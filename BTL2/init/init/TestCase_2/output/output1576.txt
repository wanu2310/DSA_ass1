line 1: k=1
line 2: insert (9)
line 3: inorderTraversal
(9) 
line 4: remove (9)
line 5: inorderTraversal

line 6: kNearestNeighbour 8 (2)

line 7: inorderTraversal

line 8: clear
line 9: buildTree 4
(9) (6) (2) (10) 
line 10: inorderTraversal
(2) (6) (9) (10) 
line 11: remove (1)
line 12: inorderTraversal
(2) (6) (9) (10) 
line 13: kNearestNeighbour 8 (6)
(2) (6) (9) (10) 
line 14: inorderTraversal
(2) (6) (9) (10) 
line 15: clear
line 16: buildTree 10
(9) (9) (10) (6) (8) (7) (6) (8) (7) (3) 
line 17: inorderTraversal
(3) (6) (6) (7) (7) (8) (8) (9) (9) (10) 
line 18: nearestNeighbour (6)
(6) 
line 19: inorderTraversal
(3) (6) (6) (7) (7) (8) (8) (9) (9) (10) 
line 20: preorderTraversal
(7) (6) (3) (6) (8) (7) (9) (8) (9) (10) 
line 21: inorderTraversal
(3) (6) (6) (7) (7) (8) (8) (9) (9) (10) 
line 22: nearestNeighbour (4)
(3) 
line 23: inorderTraversal
(3) (6) (6) (7) (7) (8) (8) (9) (9) (10) 
line 24: nearestNeighbour (10)
(10) 
line 25: inorderTraversal
(3) (6) (6) (7) (7) (8) (8) (9) (9) (10) 
line 26: insert (3)
line 27: inorderTraversal
(3) (3) (6) (6) (7) (7) (8) (8) (9) (9) (10) 
line 28: nearestNeighbour (4)
(3) 
line 29: inorderTraversal
(3) (3) (6) (6) (7) (7) (8) (8) (9) (9) (10) 
line 30: preorderTraversal
(7) (6) (3) (3) (6) (8) (7) (9) (8) (9) (10) 
line 31: inorderTraversal
(3) (3) (6) (6) (7) (7) (8) (8) (9) (9) (10) 
line 32: kNearestNeighbour 9 (4)
(3) (3) (6) (6) (7) (7) (8) (8) (9) 
line 33: inorderTraversal
(3) (3) (6) (6) (7) (7) (8) (8) (9) (9) (10) 
line 34: nearestNeighbour (3)
(3) 
line 35: inorderTraversal
(3) (3) (6) (6) (7) (7) (8) (8) (9) (9) (10) 
line 36: insert (6)
line 37: inorderTraversal
(3) (3) (6) (6) (6) (7) (7) (8) (8) (9) (9) (10) 
line 38: insert (7)
line 39: inorderTraversal
(3) (3) (6) (6) (6) (7) (7) (7) (8) (8) (9) (9) (10) 
line 40: remove (6)
line 41: inorderTraversal
(3) (3) (6) (6) (7) (7) (7) (8) (8) (9) (9) (10) 
line 42: kNearestNeighbour 4 (3)
(3) (3) (6) (6) 
line 43: inorderTraversal
(3) (3) (6) (6) (7) (7) (7) (8) (8) (9) (9) (10) 
line 44: insert (5)
line 45: inorderTraversal
(3) (3) (5) (6) (6) (7) (7) (7) (8) (8) (9) (9) (10) 
line 46: nearestNeighbour (2)
(3) 
line 47: inorderTraversal
(3) (3) (5) (6) (6) (7) (7) (7) (8) (8) (9) (9) (10) 
line 48: insert (6)
line 49: inorderTraversal
(3) (3) (5) (6) (6) (6) (7) (7) (7) (8) (8) (9) (9) (10) 
line 50: insert (2)
line 51: inorderTraversal
(2) (3) (3) (5) (6) (6) (6) (7) (7) (7) (8) (8) (9) (9) (10) 
line 52: insert (3)
line 53: inorderTraversal
(2) (3) (3) (3) (5) (6) (6) (6) (7) (7) (7) (8) (8) (9) (9) (10) 
line 54: nearestNeighbour (3)
(3) 
line 55: inorderTraversal
(2) (3) (3) (3) (5) (6) (6) (6) (7) (7) (7) (8) (8) (9) (9) (10) 
line 56: kNearestNeighbour 9 (6)
(5) (6) (6) (6) (7) (7) (7) (8) (8) 
line 57: inorderTraversal
(2) (3) (3) (3) (5) (6) (6) (6) (7) (7) (7) (8) (8) (9) (9) (10) 
line 58: nearestNeighbour (10)
(10) 
line 59: inorderTraversal
(2) (3) (3) (3) (5) (6) (6) (6) (7) (7) (7) (8) (8) (9) (9) (10) 
line 60: insert (6)
line 61: inorderTraversal
(2) (3) (3) (3) (5) (6) (6) (6) (6) (7) (7) (7) (8) (8) (9) (9) (10) 
line 62: insert (3)
line 63: inorderTraversal
(2) (3) (3) (3) (3) (5) (6) (6) (6) (6) (7) (7) (7) (8) (8) (9) (9) (10) 
line 64: insert (5)
line 65: inorderTraversal
(2) (3) (3) (3) (3) (5) (5) (6) (6) (6) (6) (7) (7) (7) (8) (8) (9) (9) (10) 
line 66: kNearestNeighbour 4 (4)
(3) (3) (5) (5) 
line 67: inorderTraversal
(2) (3) (3) (3) (3) (5) (5) (6) (6) (6) (6) (7) (7) (7) (8) (8) (9) (9) (10) 
line 68: clear
line 69: buildTree 11
(8) (4) (6) (8) (10) (8) (7) (10) (9) (8) (1) 
line 70: inorderTraversal
(1) (4) (6) (7) (8) (8) (8) (8) (9) (10) (10) 
line 71: insert (5)
line 72: inorderTraversal
(1) (4) (5) (6) (7) (8) (8) (8) (8) (9) (10) (10) 
line 73: clear
line 74: buildTree 7
(6) (2) (7) (6) (1) (1) (10) 
line 75: inorderTraversal
(1) (1) (2) (6) (6) (7) (10) 
line 76: search (10)
TRUE
line 77: inorderTraversal
(1) (1) (2) (6) (6) (7) (10) 
line 78: insert (3)
line 79: inorderTraversal
(1) (1) (2) (3) (6) (6) (7) (10) 
line 80: nodeCount_height_leafCount
nodeCount=8;height=5;leafCount=3
line 81: inorderTraversal
(1) (1) (2) (3) (6) (6) (7) (10) 
line 82: remove (6)
line 83: inorderTraversal
(1) (1) (2) (3) (6) (7) (10) 
line 84: insert (1)
line 85: inorderTraversal
(1) (1) (1) (2) (3) (6) (7) (10) 
line 86: insert (2)
line 87: inorderTraversal
(1) (1) (1) (2) (2) (3) (6) (7) (10) 
line 88: insert (6)
line 89: inorderTraversal
(1) (1) (1) (2) (2) (3) (6) (6) (7) (10) 
line 90: remove (7)
line 91: inorderTraversal
(1) (1) (1) (2) (2) (3) (6) (6) (10) 
line 92: insert (2)
line 93: inorderTraversal
(1) (1) (1) (2) (2) (2) (3) (6) (6) (10) 
line 94: insert (9)
line 95: inorderTraversal
(1) (1) (1) (2) (2) (2) (3) (6) (6) (9) (10) 
line 96: preorderTraversal
(6) (1) (1) (2) (1) (3) (2) (2) (10) (6) (9) 
line 97: inorderTraversal
(1) (1) (1) (2) (2) (2) (3) (6) (6) (9) (10) 
line 98: remove (1)
line 99: inorderTraversal
(1) (1) (2) (2) (2) (3) (6) (6) (9) (10) 
line 100: insert (5)
line 101: inorderTraversal
(1) (1) (2) (2) (2) (3) (5) (6) (6) (9) (10) 
line 102: insert (3)
line 103: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (5) (6) (6) (9) (10) 
line 104: clear
line 105: buildTree 19
(1) (3) (8) (10) (5) (10) (7) (8) (6) (10) (7) (6) (9) (4) (10) (7) (8) (6) (2) 
line 106: inorderTraversal
(1) (2) (3) (4) (5) (6) (6) (6) (7) (7) (7) (8) (8) (8) (9) (10) (10) (10) (10) 
line 107: kNearestNeighbour 2 (7)
(7) (7) 
line 108: inorderTraversal
(1) (2) (3) (4) (5) (6) (6) (6) (7) (7) (7) (8) (8) (8) (9) (10) (10) (10) (10) 
line 109: insert (2)
line 110: inorderTraversal
(1) (2) (2) (3) (4) (5) (6) (6) (6) (7) (7) (7) (8) (8) (8) (9) (10) (10) (10) (10) 
line 111: nearestNeighbour (4)
(4) 
line 112: inorderTraversal
(1) (2) (2) (3) (4) (5) (6) (6) (6) (7) (7) (7) (8) (8) (8) (9) (10) (10) (10) (10) 
line 113: nodeCount_height_leafCount
nodeCount=20;height=6;leafCount=7
line 114: inorderTraversal
(1) (2) (2) (3) (4) (5) (6) (6) (6) (7) (7) (7) (8) (8) (8) (9) (10) (10) (10) (10) 
line 115: clear
line 116: buildTree 3
(8) (4) (4) 
line 117: inorderTraversal
(4) (4) (8) 
line 118: kNearestNeighbour 9 (1)
(4) (4) (8) 
line 119: inorderTraversal
(4) (4) (8) 
line 120: clear
line 121: buildTree 11
(1) (4) (9) (10) (9) (9) (7) (4) (2) (3) (7) 
line 122: inorderTraversal
(1) (2) (3) (4) (4) (7) (7) (9) (9) (9) (10) 
line 123: nearestNeighbour (5)
(4) 
line 124: inorderTraversal
(1) (2) (3) (4) (4) (7) (7) (9) (9) (9) (10) 
line 125: nearestNeighbour (5)
(4) 
line 126: inorderTraversal
(1) (2) (3) (4) (4) (7) (7) (9) (9) (9) (10) 
line 127: kNearestNeighbour 5 (1)
(1) (2) (3) (4) (4) 
line 128: inorderTraversal
(1) (2) (3) (4) (4) (7) (7) (9) (9) (9) (10) 
line 129: remove (4)
line 130: inorderTraversal
(1) (2) (3) (4) (7) (7) (9) (9) (9) (10) 
line 131: remove (4)
line 132: inorderTraversal
(1) (2) (3) (7) (7) (9) (9) (9) (10) 
line 133: remove (2)
line 134: inorderTraversal
(1) (3) (7) (7) (9) (9) (9) (10) 
line 135: nearestNeighbour (5)
(3) 
line 136: inorderTraversal
(1) (3) (7) (7) (9) (9) (9) (10) 
line 137: kNearestNeighbour 4 (5)
(1) (3) (7) (7) 
line 138: inorderTraversal
(1) (3) (7) (7) (9) (9) (9) (10) 
line 139: insert (10)
line 140: inorderTraversal
(1) (3) (7) (7) (9) (9) (9) (10) (10) 
line 141: nearestNeighbour (5)
(3) 
line 142: inorderTraversal
(1) (3) (7) (7) (9) (9) (9) (10) (10) 
line 143: insert (10)
line 144: inorderTraversal
(1) (3) (7) (7) (9) (9) (9) (10) (10) (10) 
line 145: insert (3)
line 146: inorderTraversal
(1) (3) (3) (7) (7) (9) (9) (9) (10) (10) (10) 
line 147: insert (1)
line 148: inorderTraversal
(1) (1) (3) (3) (7) (7) (9) (9) (9) (10) (10) (10) 
line 149: search (8)
FALSE
line 150: inorderTraversal
(1) (1) (3) (3) (7) (7) (9) (9) (9) (10) (10) (10) 
line 151: kNearestNeighbour 2 (6)
(7) (7) 
line 152: inorderTraversal
(1) (1) (3) (3) (7) (7) (9) (9) (9) (10) (10) (10) 
line 153: kNearestNeighbour 4 (6)
(3) (3) (7) (7) 
line 154: inorderTraversal
(1) (1) (3) (3) (7) (7) (9) (9) (9) (10) (10) (10) 
line 155: nearestNeighbour (5)
(3) 
line 156: inorderTraversal
(1) (1) (3) (3) (7) (7) (9) (9) (9) (10) (10) (10) 
line 157: kNearestNeighbour 10 (2)
(1) (1) (3) (3) (7) (7) (9) (9) (9) (10) 
line 158: inorderTraversal
(1) (1) (3) (3) (7) (7) (9) (9) (9) (10) (10) (10) 
line 159: insert (4)
line 160: inorderTraversal
(1) (1) (3) (3) (4) (7) (7) (9) (9) (9) (10) (10) (10) 
line 161: insert (5)
line 162: inorderTraversal
(1) (1) (3) (3) (4) (5) (7) (7) (9) (9) (9) (10) (10) (10) 
line 163: insert (5)
line 164: inorderTraversal
(1) (1) (3) (3) (4) (5) (5) (7) (7) (9) (9) (9) (10) (10) (10) 
line 165: search (8)
FALSE
line 166: inorderTraversal
(1) (1) (3) (3) (4) (5) (5) (7) (7) (9) (9) (9) (10) (10) (10) 
line 167: kNearestNeighbour 6 (7)
(5) (7) (7) (9) (9) (9) 
line 168: inorderTraversal
(1) (1) (3) (3) (4) (5) (5) (7) (7) (9) (9) (9) (10) (10) (10) 
line 169: clear
line 170: buildTree 20
(7) (3) (2) (5) (6) (10) (6) (2) (5) (9) (1) (5) (4) (2) (7) (6) (1) (6) (9) (5) 
line 171: inorderTraversal
(1) (1) (2) (2) (2) (3) (4) (5) (5) (5) (5) (6) (6) (6) (6) (7) (7) (9) (9) (10) 
line 172: postorderTraversal
(1) (1) (2) (4) (3) (2) (2) (5) (5) (5) (6) (6) (6) (7) (10) (9) (9) (7) (6) (5) 
line 173: inorderTraversal
(1) (1) (2) (2) (2) (3) (4) (5) (5) (5) (5) (6) (6) (6) (6) (7) (7) (9) (9) (10) 
line 174: clear
line 175: buildTree 10
(3) (3) (6) (8) (8) (10) (1) (8) (2) (5) 
line 176: inorderTraversal
(1) (2) (3) (3) (5) (6) (8) (8) (8) (10) 
line 177: kNearestNeighbour 2 (9)
(8) (10) 
line 178: inorderTraversal
(1) (2) (3) (3) (5) (6) (8) (8) (8) (10) 
line 179: remove (3)
line 180: inorderTraversal
(1) (2) (3) (5) (6) (8) (8) (8) (10) 
line 181: remove (8)
line 182: inorderTraversal
(1) (2) (3) (5) (6) (8) (8) (10) 
line 183: insert (4)
line 184: inorderTraversal
(1) (2) (3) (4) (5) (6) (8) (8) (10) 
line 185: insert (4)
line 186: inorderTraversal
(1) (2) (3) (4) (4) (5) (6) (8) (8) (10) 
line 187: kNearestNeighbour 6 (8)
(4) (5) (6) (8) (8) (10) 
line 188: inorderTraversal
(1) (2) (3) (4) (4) (5) (6) (8) (8) (10) 
line 189: kNearestNeighbour 6 (2)
(1) (2) (3) (4) (4) (5) 
line 190: inorderTraversal
(1) (2) (3) (4) (4) (5) (6) (8) (8) (10) 
line 191: search (8)
TRUE
line 192: inorderTraversal
(1) (2) (3) (4) (4) (5) (6) (8) (8) (10) 
line 193: nearestNeighbour (6)
(6) 
line 194: inorderTraversal
(1) (2) (3) (4) (4) (5) (6) (8) (8) (10) 
line 195: insert (1)
line 196: inorderTraversal
(1) (1) (2) (3) (4) (4) (5) (6) (8) (8) (10) 
line 197: clear
line 198: buildTree 10
(8) (6) (3) (6) (2) (9) (7) (9) (10) (2) 
line 199: inorderTraversal
(2) (2) (3) (6) (6) (7) (8) (9) (9) (10) 
line 200: clear
line 201: buildTree 11
(1) (7) (3) (9) (2) (5) (10) (8) (1) (6) (8) 
line 202: inorderTraversal
(1) (1) (2) (3) (5) (6) (7) (8) (8) (9) (10) 
line 203: insert (4)
line 204: inorderTraversal
(1) (1) (2) (3) (4) (5) (6) (7) (8) (8) (9) (10) 
line 205: clear
line 206: buildTree 15
(10) (2) (3) (6) (9) (7) (9) (4) (2) (9) (7) (2) (4) (6) (4) 
line 207: inorderTraversal
(2) (2) (2) (3) (4) (4) (4) (6) (6) (7) (7) (9) (9) (9) (10) 
line 208: insert (7)
line 209: inorderTraversal
(2) (2) (2) (3) (4) (4) (4) (6) (6) (7) (7) (7) (9) (9) (9) (10) 
line 210: insert (5)
line 211: inorderTraversal
(2) (2) (2) (3) (4) (4) (4) (5) (6) (6) (7) (7) (7) (9) (9) (9) (10) 
line 212: kNearestNeighbour 4 (9)
(9) (9) (9) (10) 
line 213: inorderTraversal
(2) (2) (2) (3) (4) (4) (4) (5) (6) (6) (7) (7) (7) (9) (9) (9) (10) 
line 214: clear
line 215: buildTree 13
(6) (3) (2) (9) (2) (4) (5) (2) (4) (10) (9) (3) (7) 
line 216: inorderTraversal
(2) (2) (2) (3) (3) (4) (4) (5) (6) (7) (9) (9) (10) 
line 217: kNearestNeighbour 1 (3)
(3) 
line 218: inorderTraversal
(2) (2) (2) (3) (3) (4) (4) (5) (6) (7) (9) (9) (10) 
line 219: kNearestNeighbour 3 (3)
(2) (3) (3) 
line 220: inorderTraversal
(2) (2) (2) (3) (3) (4) (4) (5) (6) (7) (9) (9) (10) 
line 221: kNearestNeighbour 10 (10)
(3) (3) (4) (4) (5) (6) (7) (9) (9) (10) 
line 222: inorderTraversal
(2) (2) (2) (3) (3) (4) (4) (5) (6) (7) (9) (9) (10) 
line 223: insert (8)
line 224: inorderTraversal
(2) (2) (2) (3) (3) (4) (4) (5) (6) (7) (8) (9) (9) (10) 
line 225: insert (4)
line 226: inorderTraversal
(2) (2) (2) (3) (3) (4) (4) (4) (5) (6) (7) (8) (9) (9) (10) 
line 227: postorderTraversal
(2) (3) (3) (2) (2) (4) (4) (6) (5) (8) (10) (9) (9) (7) (4) 
line 228: inorderTraversal
(2) (2) (2) (3) (3) (4) (4) (4) (5) (6) (7) (8) (9) (9) (10) 
line 229: remove (2)
line 230: inorderTraversal
(2) (2) (3) (3) (4) (4) (4) (5) (6) (7) (8) (9) (9) (10) 
line 231: nearestNeighbour (8)
(8) 
line 232: inorderTraversal
(2) (2) (3) (3) (4) (4) (4) (5) (6) (7) (8) (9) (9) (10) 
line 233: remove (9)
line 234: inorderTraversal
(2) (2) (3) (3) (4) (4) (4) (5) (6) (7) (8) (9) (10) 
line 235: nearestNeighbour (4)
(4) 
line 236: inorderTraversal
(2) (2) (3) (3) (4) (4) (4) (5) (6) (7) (8) (9) (10) 
line 237: nearestNeighbour (8)
(8) 
line 238: inorderTraversal
(2) (2) (3) (3) (4) (4) (4) (5) (6) (7) (8) (9) (10) 
line 239: insert (2)
line 240: inorderTraversal
(2) (2) (2) (3) (3) (4) (4) (4) (5) (6) (7) (8) (9) (10) 
line 241: insert (6)
line 242: inorderTraversal
(2) (2) (2) (3) (3) (4) (4) (4) (5) (6) (6) (7) (8) (9) (10) 
line 243: insert (7)
line 244: inorderTraversal
(2) (2) (2) (3) (3) (4) (4) (4) (5) (6) (6) (7) (7) (8) (9) (10) 
line 245: kNearestNeighbour 1 (1)
(2) 
line 246: inorderTraversal
(2) (2) (2) (3) (3) (4) (4) (4) (5) (6) (6) (7) (7) (8) (9) (10) 
line 247: clear
line 248: buildTree 12
(1) (8) (9) (8) (2) (10) (10) (5) (5) (6) (2) (4) 
line 249: inorderTraversal
(1) (2) (2) (4) (5) (5) (6) (8) (8) (9) (10) (10) 
line 250: remove (4)
line 251: inorderTraversal
(1) (2) (2) (5) (5) (6) (8) (8) (9) (10) (10) 
line 252: nearestNeighbour (10)
(10) 
line 253: inorderTraversal
(1) (2) (2) (5) (5) (6) (8) (8) (9) (10) (10) 
line 254: kNearestNeighbour 1 (2)
(2) 
line 255: inorderTraversal
(1) (2) (2) (5) (5) (6) (8) (8) (9) (10) (10) 
line 256: insert (6)
line 257: inorderTraversal
(1) (2) (2) (5) (5) (6) (6) (8) (8) (9) (10) (10) 
line 258: insert (8)
line 259: inorderTraversal
(1) (2) (2) (5) (5) (6) (6) (8) (8) (8) (9) (10) (10) 
line 260: clear
line 261: buildTree 15
(1) (1) (8) (6) (6) (5) (5) (6) (6) (2) (9) (6) (9) (7) (9) 
line 262: inorderTraversal
(1) (1) (2) (5) (5) (6) (6) (6) (6) (6) (7) (8) (9) (9) (9) 
line 263: remove (6)
line 264: inorderTraversal
(1) (1) (2) (5) (5) (6) (6) (6) (6) (7) (8) (9) (9) (9) 
line 265: kNearestNeighbour 2 (7)
(7) (8) 
line 266: inorderTraversal
(1) (1) (2) (5) (5) (6) (6) (6) (6) (7) (8) (9) (9) (9) 
line 267: insert (6)
line 268: inorderTraversal
(1) (1) (2) (5) (5) (6) (6) (6) (6) (6) (7) (8) (9) (9) (9) 
line 269: nearestNeighbour (7)
(7) 
line 270: inorderTraversal
(1) (1) (2) (5) (5) (6) (6) (6) (6) (6) (7) (8) (9) (9) (9) 
line 271: insert (1)
line 272: inorderTraversal
(1) (1) (1) (2) (5) (5) (6) (6) (6) (6) (6) (7) (8) (9) (9) (9) 
line 273: insert (4)
line 274: inorderTraversal
(1) (1) (1) (2) (4) (5) (5) (6) (6) (6) (6) (6) (7) (8) (9) (9) (9) 
line 275: nearestNeighbour (2)
(2) 
line 276: inorderTraversal
(1) (1) (1) (2) (4) (5) (5) (6) (6) (6) (6) (6) (7) (8) (9) (9) (9) 
line 277: clear
line 278: buildTree 8
(7) (5) (9) (6) (2) (8) (4) (4) 
line 279: inorderTraversal
(2) (4) (4) (5) (6) (7) (8) (9) 
line 280: clear
line 281: buildTree 8
(10) (5) (9) (3) (3) (1) (9) (4) 
line 282: inorderTraversal
(1) (3) (3) (4) (5) (9) (9) (10) 
line 283: nearestNeighbour (7)
(5) 
line 284: inorderTraversal
(1) (3) (3) (4) (5) (9) (9) (10) 
line 285: remove (3)
line 286: inorderTraversal
(1) (3) (4) (5) (9) (9) (10) 
line 287: insert (1)
line 288: inorderTraversal
(1) (1) (3) (4) (5) (9) (9) (10) 
line 289: remove (9)
line 290: inorderTraversal
(1) (1) (3) (4) (5) (9) (10) 
line 291: nearestNeighbour (10)
(10) 
line 292: inorderTraversal
(1) (1) (3) (4) (5) (9) (10) 
line 293: search (5)
TRUE
line 294: inorderTraversal
(1) (1) (3) (4) (5) (9) (10) 
line 295: kNearestNeighbour 7 (2)
(1) (1) (3) (4) (5) (9) (10) 
line 296: inorderTraversal
(1) (1) (3) (4) (5) (9) (10) 
line 297: kNearestNeighbour 10 (6)
(1) (1) (3) (4) (5) (9) (10) 
line 298: inorderTraversal
(1) (1) (3) (4) (5) (9) (10) 
line 299: nearestNeighbour (10)
(10) 
line 300: inorderTraversal
(1) (1) (3) (4) (5) (9) (10) 
line 301: insert (1)
line 302: inorderTraversal
(1) (1) (1) (3) (4) (5) (9) (10) 
line 303: insert (10)
line 304: inorderTraversal
(1) (1) (1) (3) (4) (5) (9) (10) (10) 
line 305: insert (8)
line 306: inorderTraversal
(1) (1) (1) (3) (4) (5) (8) (9) (10) (10) 
line 307: nearestNeighbour (4)
(4) 
line 308: inorderTraversal
(1) (1) (1) (3) (4) (5) (8) (9) (10) (10) 
line 309: insert (3)
line 310: inorderTraversal
(1) (1) (1) (3) (3) (4) (5) (8) (9) (10) (10) 
line 311: search (9)
TRUE
line 312: inorderTraversal
(1) (1) (1) (3) (3) (4) (5) (8) (9) (10) (10) 
line 313: insert (4)
line 314: inorderTraversal
(1) (1) (1) (3) (3) (4) (4) (5) (8) (9) (10) (10) 
line 315: insert (4)
line 316: inorderTraversal
(1) (1) (1) (3) (3) (4) (4) (4) (5) (8) (9) (10) (10) 
line 317: insert (7)
line 318: inorderTraversal
(1) (1) (1) (3) (3) (4) (4) (4) (5) (7) (8) (9) (10) (10) 
line 319: nearestNeighbour (4)
(4) 
line 320: inorderTraversal
(1) (1) (1) (3) (3) (4) (4) (4) (5) (7) (8) (9) (10) (10) 
line 321: kNearestNeighbour 8 (4)
(1) (3) (3) (4) (4) (4) (5) (7) 
line 322: inorderTraversal
(1) (1) (1) (3) (3) (4) (4) (4) (5) (7) (8) (9) (10) (10) 
line 323: kNearestNeighbour 7 (7)
(4) (4) (5) (7) (8) (9) (10) 
line 324: inorderTraversal
(1) (1) (1) (3) (3) (4) (4) (4) (5) (7) (8) (9) (10) (10) 
line 325: insert (6)
line 326: inorderTraversal
(1) (1) (1) (3) (3) (4) (4) (4) (5) (6) (7) (8) (9) (10) (10) 
line 327: insert (5)
line 328: inorderTraversal
(1) (1) (1) (3) (3) (4) (4) (4) (5) (5) (6) (7) (8) (9) (10) (10) 
line 329: kNearestNeighbour 4 (4)
(4) (4) (4) (5) 
line 330: inorderTraversal
(1) (1) (1) (3) (3) (4) (4) (4) (5) (5) (6) (7) (8) (9) (10) (10) 
line 331: nearestNeighbour (7)
(7) 
line 332: inorderTraversal
(1) (1) (1) (3) (3) (4) (4) (4) (5) (5) (6) (7) (8) (9) (10) (10) 
line 333: nearestNeighbour (2)
(1) 
line 334: inorderTraversal
(1) (1) (1) (3) (3) (4) (4) (4) (5) (5) (6) (7) (8) (9) (10) (10) 
line 335: insert (9)
line 336: inorderTraversal
(1) (1) (1) (3) (3) (4) (4) (4) (5) (5) (6) (7) (8) (9) (9) (10) (10) 
line 337: insert (6)
line 338: inorderTraversal
(1) (1) (1) (3) (3) (4) (4) (4) (5) (5) (6) (6) (7) (8) (9) (9) (10) (10) 
line 339: remove (6)
line 340: inorderTraversal
(1) (1) (1) (3) (3) (4) (4) (4) (5) (5) (6) (7) (8) (9) (9) (10) (10) 
line 341: kNearestNeighbour 9 (4)
(3) (3) (4) (4) (4) (5) (5) (6) (7) 
line 342: inorderTraversal
(1) (1) (1) (3) (3) (4) (4) (4) (5) (5) (6) (7) (8) (9) (9) (10) (10) 
line 343: remove (10)
line 344: inorderTraversal
(1) (1) (1) (3) (3) (4) (4) (4) (5) (5) (6) (7) (8) (9) (9) (10) 
line 345: insert (4)
line 346: inorderTraversal
(1) (1) (1) (3) (3) (4) (4) (4) (4) (5) (5) (6) (7) (8) (9) (9) (10) 
line 347: insert (8)
line 348: inorderTraversal
(1) (1) (1) (3) (3) (4) (4) (4) (4) (5) (5) (6) (7) (8) (8) (9) (9) (10) 
line 349: clear
line 350: buildTree 17
(2) (6) (8) (3) (3) (7) (8) (9) (9) (5) (5) (1) (7) (1) (8) (6) (7) 
line 351: inorderTraversal
(1) (1) (2) (3) (3) (5) (5) (6) (6) (7) (7) (7) (8) (8) (8) (9) (9) 
line 352: remove (1)
line 353: inorderTraversal
(1) (2) (3) (3) (5) (5) (6) (6) (7) (7) (7) (8) (8) (8) (9) (9) 
line 354: clear
line 355: buildTree 17
(2) (9) (2) (4) (8) (4) (1) (2) (9) (5) (1) (8) (1) (9) (9) (5) (1) 
line 356: inorderTraversal
(1) (1) (1) (1) (2) (2) (2) (4) (4) (5) (5) (8) (8) (9) (9) (9) (9) 
line 357: nodeCount_height_leafCount
nodeCount=17;height=6;leafCount=6
line 358: inorderTraversal
(1) (1) (1) (1) (2) (2) (2) (4) (4) (5) (5) (8) (8) (9) (9) (9) (9) 
line 359: nearestNeighbour (10)
(9) 
line 360: inorderTraversal
(1) (1) (1) (1) (2) (2) (2) (4) (4) (5) (5) (8) (8) (9) (9) (9) (9) 
line 361: kNearestNeighbour 4 (6)
(4) (5) (5) (8) 
line 362: inorderTraversal
(1) (1) (1) (1) (2) (2) (2) (4) (4) (5) (5) (8) (8) (9) (9) (9) (9) 
line 363: postorderTraversal
(1) (1) (2) (2) (2) (1) (1) (4) (5) (5) (8) (9) (9) (9) (9) (8) (4) 
line 364: inorderTraversal
(1) (1) (1) (1) (2) (2) (2) (4) (4) (5) (5) (8) (8) (9) (9) (9) (9) 
line 365: kNearestNeighbour 2 (5)
(5) (5) 
line 366: inorderTraversal
(1) (1) (1) (1) (2) (2) (2) (4) (4) (5) (5) (8) (8) (9) (9) (9) (9) 
line 367: nearestNeighbour (4)
(4) 
line 368: inorderTraversal
(1) (1) (1) (1) (2) (2) (2) (4) (4) (5) (5) (8) (8) (9) (9) (9) (9) 
line 369: nearestNeighbour (9)
(9) 
line 370: inorderTraversal
(1) (1) (1) (1) (2) (2) (2) (4) (4) (5) (5) (8) (8) (9) (9) (9) (9) 
line 371: kNearestNeighbour 3 (10)
(9) (9) (9) 
line 372: inorderTraversal
(1) (1) (1) (1) (2) (2) (2) (4) (4) (5) (5) (8) (8) (9) (9) (9) (9) 
line 373: clear
line 374: buildTree 6
(9) (8) (8) (9) (3) (6) 
line 375: inorderTraversal
(3) (6) (8) (8) (9) (9) 
line 376: postorderTraversal
(6) (3) (8) (9) (9) (8) 
line 377: inorderTraversal
(3) (6) (8) (8) (9) (9) 
line 378: insert (4)
line 379: inorderTraversal
(3) (4) (6) (8) (8) (9) (9) 
line 380: insert (7)
line 381: inorderTraversal
(3) (4) (6) (7) (8) (8) (9) (9) 
line 382: insert (3)
line 383: inorderTraversal
(3) (3) (4) (6) (7) (8) (8) (9) (9) 
line 384: insert (2)
line 385: inorderTraversal
(2) (3) (3) (4) (6) (7) (8) (8) (9) (9) 
line 386: insert (10)
line 387: inorderTraversal
(2) (3) (3) (4) (6) (7) (8) (8) (9) (9) (10) 
line 388: insert (1)
line 389: inorderTraversal
(1) (2) (3) (3) (4) (6) (7) (8) (8) (9) (9) (10) 
line 390: remove (7)
line 391: inorderTraversal
(1) (2) (3) (3) (4) (6) (8) (8) (9) (9) (10) 
line 392: insert (8)
line 393: inorderTraversal
(1) (2) (3) (3) (4) (6) (8) (8) (8) (9) (9) (10) 
line 394: insert (7)
line 395: inorderTraversal
(1) (2) (3) (3) (4) (6) (7) (8) (8) (8) (9) (9) (10) 
line 396: insert (6)
line 397: inorderTraversal
(1) (2) (3) (3) (4) (6) (6) (7) (8) (8) (8) (9) (9) (10) 
line 398: remove (4)
line 399: inorderTraversal
(1) (2) (3) (3) (6) (6) (7) (8) (8) (8) (9) (9) (10) 
line 400: insert (4)
line 401: inorderTraversal
(1) (2) (3) (3) (4) (6) (6) (7) (8) (8) (8) (9) (9) (10) 
line 402: insert (3)
line 403: inorderTraversal
(1) (2) (3) (3) (3) (4) (6) (6) (7) (8) (8) (8) (9) (9) (10) 
line 404: remove (3)
line 405: inorderTraversal
(1) (2) (3) (3) (4) (6) (6) (7) (8) (8) (8) (9) (9) (10) 
line 406: kNearestNeighbour 4 (4)
(3) (3) (4) (6) 
line 407: inorderTraversal
(1) (2) (3) (3) (4) (6) (6) (7) (8) (8) (8) (9) (9) (10) 
line 408: insert (7)
line 409: inorderTraversal
(1) (2) (3) (3) (4) (6) (6) (7) (7) (8) (8) (8) (9) (9) (10) 
line 410: nearestNeighbour (6)
(6) 
line 411: inorderTraversal
(1) (2) (3) (3) (4) (6) (6) (7) (7) (8) (8) (8) (9) (9) (10) 
line 412: kNearestNeighbour 3 (9)
(9) (9) (10) 
line 413: inorderTraversal
(1) (2) (3) (3) (4) (6) (6) (7) (7) (8) (8) (8) (9) (9) (10) 
line 414: insert (1)
line 415: inorderTraversal
(1) (1) (2) (3) (3) (4) (6) (6) (7) (7) (8) (8) (8) (9) (9) (10) 
line 416: nearestNeighbour (4)
(4) 
line 417: inorderTraversal
(1) (1) (2) (3) (3) (4) (6) (6) (7) (7) (8) (8) (8) (9) (9) (10) 
line 418: insert (3)
line 419: inorderTraversal
(1) (1) (2) (3) (3) (3) (4) (6) (6) (7) (7) (8) (8) (8) (9) (9) (10) 
line 420: remove (1)
line 421: inorderTraversal
(1) (2) (3) (3) (3) (4) (6) (6) (7) (7) (8) (8) (8) (9) (9) (10) 
line 422: nodeCount_height_leafCount
nodeCount=16;height=6;leafCount=6
line 423: inorderTraversal
(1) (2) (3) (3) (3) (4) (6) (6) (7) (7) (8) (8) (8) (9) (9) (10) 
line 424: preorderTraversal
(8) (3) (2) (1) (6) (3) (4) (3) (7) (6) (7) (9) (8) (8) (9) (10) 
line 425: postorderTraversal
(1) (2) (3) (4) (3) (6) (7) (7) (6) (3) (8) (8) (10) (9) (9) (8) 
line 426: clear
