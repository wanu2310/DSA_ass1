line 1: k=1
line 2: search (6)
FALSE
line 3: inorderTraversal

line 4: remove (7)
line 5: inorderTraversal

line 6: nearestNeighbour (9)

line 7: inorderTraversal

line 8: kNearestNeighbour 2 (2)

line 9: inorderTraversal

line 10: insert (9)
line 11: inorderTraversal
(9) 
line 12: insert (7)
line 13: inorderTraversal
(7) (9) 
line 14: nearestNeighbour (10)
(9) 
line 15: inorderTraversal
(7) (9) 
line 16: insert (1)
line 17: inorderTraversal
(1) (7) (9) 
line 18: search (9)
TRUE
line 19: inorderTraversal
(1) (7) (9) 
line 20: remove (1)
line 21: inorderTraversal
(7) (9) 
line 22: insert (7)
line 23: inorderTraversal
(7) (7) (9) 
line 24: clear
line 25: buildTree 14
(4) (5) (3) (9) (2) (9) (6) (5) (4) (4) (8) (8) (9) (6) 
line 26: inorderTraversal
(2) (3) (4) (4) (4) (5) (5) (6) (6) (8) (8) (9) (9) (9) 
line 27: clear
line 28: buildTree 19
(8) (6) (8) (9) (8) (1) (7) (7) (9) (1) (7) (4) (8) (3) (9) (6) (2) (8) (2) 
line 29: inorderTraversal
(1) (1) (2) (2) (3) (4) (6) (6) (7) (7) (7) (8) (8) (8) (8) (8) (9) (9) (9) 
line 30: remove (7)
line 31: inorderTraversal
(1) (1) (2) (2) (3) (4) (6) (6) (7) (7) (8) (8) (8) (8) (8) (9) (9) (9) 
line 32: kNearestNeighbour 3 (8)
(8) (8) (8) 
line 33: inorderTraversal
(1) (1) (2) (2) (3) (4) (6) (6) (7) (7) (8) (8) (8) (8) (8) (9) (9) (9) 
line 34: kNearestNeighbour 2 (7)
(7) (7) 
line 35: inorderTraversal
(1) (1) (2) (2) (3) (4) (6) (6) (7) (7) (8) (8) (8) (8) (8) (9) (9) (9) 
line 36: insert (5)
line 37: inorderTraversal
(1) (1) (2) (2) (3) (4) (5) (6) (6) (7) (7) (8) (8) (8) (8) (8) (9) (9) (9) 
line 38: preorderTraversal
(7) (2) (1) (1) (4) (2) (3) (6) (5) (6) (8) (7) (8) (8) (9) (8) (8) (9) (9) 
line 39: inorderTraversal
(1) (1) (2) (2) (3) (4) (5) (6) (6) (7) (7) (8) (8) (8) (8) (8) (9) (9) (9) 
line 40: nearestNeighbour (3)
(3) 
line 41: inorderTraversal
(1) (1) (2) (2) (3) (4) (5) (6) (6) (7) (7) (8) (8) (8) (8) (8) (9) (9) (9) 
line 42: kNearestNeighbour 4 (2)
(1) (2) (2) (3) 
line 43: inorderTraversal
(1) (1) (2) (2) (3) (4) (5) (6) (6) (7) (7) (8) (8) (8) (8) (8) (9) (9) (9) 
line 44: nearestNeighbour (3)
(3) 
line 45: inorderTraversal
(1) (1) (2) (2) (3) (4) (5) (6) (6) (7) (7) (8) (8) (8) (8) (8) (9) (9) (9) 
line 46: postorderTraversal
(1) (1) (3) (2) (5) (6) (6) (4) (2) (7) (8) (8) (9) (9) (9) (8) (8) (8) (7) 
line 47: inorderTraversal
(1) (1) (2) (2) (3) (4) (5) (6) (6) (7) (7) (8) (8) (8) (8) (8) (9) (9) (9) 
line 48: clear
line 49: buildTree 7
(8) (4) (9) (5) (3) (5) (1) 
line 50: inorderTraversal
(1) (3) (4) (5) (5) (8) (9) 
line 51: clear
line 52: buildTree 6
(9) (7) (2) (1) (3) (1) 
line 53: inorderTraversal
(1) (1) (2) (3) (7) (9) 
line 54: remove (1)
line 55: inorderTraversal
(1) (2) (3) (7) (9) 
line 56: insert (7)
line 57: inorderTraversal
(1) (2) (3) (7) (7) (9) 
line 58: nearestNeighbour (5)
(3) 
line 59: inorderTraversal
(1) (2) (3) (7) (7) (9) 
line 60: nearestNeighbour (2)
(2) 
line 61: inorderTraversal
(1) (2) (3) (7) (7) (9) 
line 62: nearestNeighbour (6)
(7) 
line 63: inorderTraversal
(1) (2) (3) (7) (7) (9) 
line 64: insert (9)
line 65: inorderTraversal
(1) (2) (3) (7) (7) (9) (9) 
line 66: insert (3)
line 67: inorderTraversal
(1) (2) (3) (3) (7) (7) (9) (9) 
line 68: remove (1)
line 69: inorderTraversal
(2) (3) (3) (7) (7) (9) (9) 
line 70: insert (2)
line 71: inorderTraversal
(2) (2) (3) (3) (7) (7) (9) (9) 
line 72: insert (8)
line 73: inorderTraversal
(2) (2) (3) (3) (7) (7) (8) (9) (9) 
line 74: remove (1)
line 75: inorderTraversal
(2) (2) (3) (3) (7) (7) (8) (9) (9) 
line 76: kNearestNeighbour 6 (6)
(3) (3) (7) (7) (8) (9) 
line 77: inorderTraversal
(2) (2) (3) (3) (7) (7) (8) (9) (9) 
line 78: kNearestNeighbour 4 (10)
(7) (8) (9) (9) 
line 79: inorderTraversal
(2) (2) (3) (3) (7) (7) (8) (9) (9) 
line 80: clear
line 81: buildTree 4
(4) (8) (10) (3) 
line 82: inorderTraversal
(3) (4) (8) (10) 
line 83: insert (10)
line 84: inorderTraversal
(3) (4) (8) (10) (10) 
line 85: nearestNeighbour (7)
(8) 
line 86: inorderTraversal
(3) (4) (8) (10) (10) 
line 87: kNearestNeighbour 7 (7)
(3) (4) (8) (10) (10) 
line 88: inorderTraversal
(3) (4) (8) (10) (10) 
line 89: kNearestNeighbour 5 (2)
(3) (4) (8) (10) (10) 
line 90: inorderTraversal
(3) (4) (8) (10) (10) 
line 91: insert (4)
line 92: inorderTraversal
(3) (4) (4) (8) (10) (10) 
line 93: insert (7)
line 94: inorderTraversal
(3) (4) (4) (7) (8) (10) (10) 
line 95: remove (4)
line 96: inorderTraversal
(3) (4) (7) (8) (10) (10) 
line 97: remove (4)
line 98: inorderTraversal
(3) (7) (8) (10) (10) 
line 99: nearestNeighbour (2)
(3) 
line 100: inorderTraversal
(3) (7) (8) (10) (10) 
line 101: postorderTraversal
(3) (10) (10) (8) (7) 
line 102: inorderTraversal
(3) (7) (8) (10) (10) 
line 103: remove (4)
line 104: inorderTraversal
(3) (7) (8) (10) (10) 
line 105: nearestNeighbour (4)
(3) 
line 106: inorderTraversal
(3) (7) (8) (10) (10) 
line 107: insert (3)
line 108: inorderTraversal
(3) (3) (7) (8) (10) (10) 
line 109: insert (5)
line 110: inorderTraversal
(3) (3) (5) (7) (8) (10) (10) 
line 111: insert (1)
line 112: inorderTraversal
(1) (3) (3) (5) (7) (8) (10) (10) 
line 113: clear
line 114: buildTree 10
(6) (9) (2) (6) (9) (10) (4) (6) (9) (8) 
line 115: inorderTraversal
(2) (4) (6) (6) (6) (8) (9) (9) (9) (10) 
line 116: kNearestNeighbour 7 (10)
(6) (6) (8) (9) (9) (9) (10) 
line 117: inorderTraversal
(2) (4) (6) (6) (6) (8) (9) (9) (9) (10) 
line 118: nearestNeighbour (7)
(8) 
line 119: inorderTraversal
(2) (4) (6) (6) (6) (8) (9) (9) (9) (10) 
line 120: insert (2)
line 121: inorderTraversal
(2) (2) (4) (6) (6) (6) (8) (9) (9) (9) (10) 
line 122: nearestNeighbour (7)
(8) 
line 123: inorderTraversal
(2) (2) (4) (6) (6) (6) (8) (9) (9) (9) (10) 
line 124: nearestNeighbour (8)
(8) 
line 125: inorderTraversal
(2) (2) (4) (6) (6) (6) (8) (9) (9) (9) (10) 
line 126: clear
line 127: buildTree 14
(10) (3) (6) (7) (7) (5) (1) (7) (3) (10) (2) (7) (7) (2) 
line 128: inorderTraversal
(1) (2) (2) (3) (3) (5) (6) (7) (7) (7) (7) (7) (10) (10) 
line 129: nodeCount_height_leafCount
nodeCount=14;height=7;leafCount=5
line 130: inorderTraversal
(1) (2) (2) (3) (3) (5) (6) (7) (7) (7) (7) (7) (10) (10) 
line 131: remove (10)
line 132: inorderTraversal
(1) (2) (2) (3) (3) (5) (6) (7) (7) (7) (7) (7) (10) 
line 133: preorderTraversal
(6) (2) (1) (3) (2) (3) (5) (7) (7) (7) (7) (10) (7) 
line 134: inorderTraversal
(1) (2) (2) (3) (3) (5) (6) (7) (7) (7) (7) (7) (10) 
line 135: postorderTraversal
(1) (2) (5) (3) (3) (2) (7) (10) (7) (7) (7) (7) (6) 
line 136: inorderTraversal
(1) (2) (2) (3) (3) (5) (6) (7) (7) (7) (7) (7) (10) 
line 137: kNearestNeighbour 9 (5)
(3) (3) (5) (6) (7) (7) (7) (7) (7) 
line 138: inorderTraversal
(1) (2) (2) (3) (3) (5) (6) (7) (7) (7) (7) (7) (10) 
line 139: clear
line 140: buildTree 8
(3) (2) (8) (5) (2) (2) (10) (9) 
line 141: inorderTraversal
(2) (2) (2) (3) (5) (8) (9) (10) 
line 142: nearestNeighbour (7)
(8) 
line 143: inorderTraversal
(2) (2) (2) (3) (5) (8) (9) (10) 
line 144: search (5)
TRUE
line 145: inorderTraversal
(2) (2) (2) (3) (5) (8) (9) (10) 
line 146: clear
line 147: buildTree 5
(2) (1) (3) (5) (5) 
line 148: inorderTraversal
(1) (2) (3) (5) (5) 
line 149: nearestNeighbour (3)
(3) 
line 150: inorderTraversal
(1) (2) (3) (5) (5) 
line 151: nearestNeighbour (2)
(2) 
line 152: inorderTraversal
(1) (2) (3) (5) (5) 
line 153: insert (2)
line 154: inorderTraversal
(1) (2) (2) (3) (5) (5) 
line 155: insert (3)
line 156: inorderTraversal
(1) (2) (2) (3) (3) (5) (5) 
line 157: kNearestNeighbour 4 (1)
(1) (2) (2) (3) 
line 158: inorderTraversal
(1) (2) (2) (3) (3) (5) (5) 
line 159: insert (3)
line 160: inorderTraversal
(1) (2) (2) (3) (3) (3) (5) (5) 
line 161: nearestNeighbour (3)
(3) 
line 162: inorderTraversal
(1) (2) (2) (3) (3) (3) (5) (5) 
line 163: remove (5)
line 164: inorderTraversal
(1) (2) (2) (3) (3) (3) (5) 
line 165: kNearestNeighbour 7 (3)
(1) (2) (2) (3) (3) (3) (5) 
line 166: inorderTraversal
(1) (2) (2) (3) (3) (3) (5) 
line 167: remove (5)
line 168: inorderTraversal
(1) (2) (2) (3) (3) (3) 
line 169: clear
line 170: buildTree 14
(3) (10) (7) (4) (6) (2) (10) (6) (3) (1) (8) (1) (8) (1) 
line 171: inorderTraversal
(1) (1) (1) (2) (3) (3) (4) (6) (6) (7) (8) (8) (10) (10) 
line 172: nearestNeighbour (3)
(3) 
line 173: inorderTraversal
(1) (1) (1) (2) (3) (3) (4) (6) (6) (7) (8) (8) (10) (10) 
line 174: insert (7)
line 175: inorderTraversal
(1) (1) (1) (2) (3) (3) (4) (6) (6) (7) (7) (8) (8) (10) (10) 
line 176: kNearestNeighbour 2 (10)
(10) (10) 
line 177: inorderTraversal
(1) (1) (1) (2) (3) (3) (4) (6) (6) (7) (7) (8) (8) (10) (10) 
line 178: nearestNeighbour (8)
(8) 
line 179: inorderTraversal
(1) (1) (1) (2) (3) (3) (4) (6) (6) (7) (7) (8) (8) (10) (10) 
line 180: clear
line 181: buildTree 13
(10) (2) (7) (6) (1) (1) (5) (10) (6) (7) (4) (2) (1) 
line 182: inorderTraversal
(1) (1) (1) (2) (2) (4) (5) (6) (6) (7) (7) (10) (10) 
line 183: preorderTraversal
(5) (1) (2) (1) (1) (2) (4) (7) (6) (6) (10) (7) (10) 
line 184: inorderTraversal
(1) (1) (1) (2) (2) (4) (5) (6) (6) (7) (7) (10) (10) 
line 185: kNearestNeighbour 1 (4)
(4) 
line 186: inorderTraversal
(1) (1) (1) (2) (2) (4) (5) (6) (6) (7) (7) (10) (10) 
line 187: nearestNeighbour (9)
(10) 
line 188: inorderTraversal
(1) (1) (1) (2) (2) (4) (5) (6) (6) (7) (7) (10) (10) 
line 189: kNearestNeighbour 9 (5)
(1) (2) (2) (4) (5) (6) (6) (7) (7) 
line 190: inorderTraversal
(1) (1) (1) (2) (2) (4) (5) (6) (6) (7) (7) (10) (10) 
line 191: clear
line 192: buildTree 6
(6) (10) (4) (10) (3) (8) 
line 193: inorderTraversal
(3) (4) (6) (8) (10) (10) 
line 194: postorderTraversal
(4) (3) (8) (10) (10) (6) 
line 195: inorderTraversal
(3) (4) (6) (8) (10) (10) 
line 196: clear
line 197: buildTree 18
(10) (7) (2) (6) (2) (1) (10) (4) (4) (4) (9) (7) (6) (9) (10) (9) (2) (6) 
line 198: inorderTraversal
(1) (2) (2) (2) (4) (4) (4) (6) (6) (6) (7) (7) (9) (9) (9) (10) (10) (10) 
line 199: insert (4)
line 200: inorderTraversal
(1) (2) (2) (2) (4) (4) (4) (4) (6) (6) (6) (7) (7) (9) (9) (9) (10) (10) (10) 
line 201: nearestNeighbour (8)
(7) 
line 202: inorderTraversal
(1) (2) (2) (2) (4) (4) (4) (4) (6) (6) (6) (7) (7) (9) (9) (9) (10) (10) (10) 
line 203: nearestNeighbour (10)
(10) 
line 204: inorderTraversal
(1) (2) (2) (2) (4) (4) (4) (4) (6) (6) (6) (7) (7) (9) (9) (9) (10) (10) (10) 
line 205: kNearestNeighbour 5 (5)
(4) (4) (4) (4) (6) 
line 206: inorderTraversal
(1) (2) (2) (2) (4) (4) (4) (4) (6) (6) (6) (7) (7) (9) (9) (9) (10) (10) (10) 
line 207: insert (5)
line 208: inorderTraversal
(1) (2) (2) (2) (4) (4) (4) (4) (5) (6) (6) (6) (7) (7) (9) (9) (9) (10) (10) (10) 
line 209: remove (9)
line 210: inorderTraversal
(1) (2) (2) (2) (4) (4) (4) (4) (5) (6) (6) (6) (7) (7) (9) (9) (10) (10) (10) 
line 211: kNearestNeighbour 10 (5)
(4) (4) (4) (4) (5) (6) (6) (6) (7) (7) 
line 212: inorderTraversal
(1) (2) (2) (2) (4) (4) (4) (4) (5) (6) (6) (6) (7) (7) (9) (9) (10) (10) (10) 
line 213: clear
line 214: buildTree 13
(9) (6) (10) (4) (5) (2) (3) (10) (1) (5) (4) (4) (8) 
line 215: inorderTraversal
(1) (2) (3) (4) (4) (4) (5) (5) (6) (8) (9) (10) (10) 
line 216: insert (1)
line 217: inorderTraversal
(1) (1) (2) (3) (4) (4) (4) (5) (5) (6) (8) (9) (10) (10) 
line 218: preorderTraversal
(5) (3) (1) (2) (1) (4) (4) (4) (8) (5) (6) (10) (9) (10) 
line 219: inorderTraversal
(1) (1) (2) (3) (4) (4) (4) (5) (5) (6) (8) (9) (10) (10) 
line 220: search (2)
TRUE
line 221: inorderTraversal
(1) (1) (2) (3) (4) (4) (4) (5) (5) (6) (8) (9) (10) (10) 
line 222: insert (3)
line 223: inorderTraversal
(1) (1) (2) (3) (3) (4) (4) (4) (5) (5) (6) (8) (9) (10) (10) 
line 224: insert (1)
line 225: inorderTraversal
(1) (1) (1) (2) (3) (3) (4) (4) (4) (5) (5) (6) (8) (9) (10) (10) 
line 226: insert (7)
line 227: inorderTraversal
(1) (1) (1) (2) (3) (3) (4) (4) (4) (5) (5) (6) (7) (8) (9) (10) (10) 
line 228: nearestNeighbour (8)
(8) 
line 229: inorderTraversal
(1) (1) (1) (2) (3) (3) (4) (4) (4) (5) (5) (6) (7) (8) (9) (10) (10) 
line 230: kNearestNeighbour 9 (6)
(4) (4) (4) (5) (5) (6) (7) (8) (9) 
line 231: inorderTraversal
(1) (1) (1) (2) (3) (3) (4) (4) (4) (5) (5) (6) (7) (8) (9) (10) (10) 
line 232: insert (3)
line 233: inorderTraversal
(1) (1) (1) (2) (3) (3) (3) (4) (4) (4) (5) (5) (6) (7) (8) (9) (10) (10) 
line 234: insert (8)
line 235: inorderTraversal
(1) (1) (1) (2) (3) (3) (3) (4) (4) (4) (5) (5) (6) (7) (8) (8) (9) (10) (10) 
line 236: insert (9)
line 237: inorderTraversal
(1) (1) (1) (2) (3) (3) (3) (4) (4) (4) (5) (5) (6) (7) (8) (8) (9) (9) (10) (10) 
line 238: postorderTraversal
(1) (1) (2) (1) (3) (3) (4) (4) (4) (3) (7) (6) (5) (8) (9) (9) (10) (10) (8) (5) 
line 239: inorderTraversal
(1) (1) (1) (2) (3) (3) (3) (4) (4) (4) (5) (5) (6) (7) (8) (8) (9) (9) (10) (10) 
line 240: clear
line 241: buildTree 12
(2) (2) (3) (3) (6) (1) (8) (2) (3) (4) (2) (8) 
line 242: inorderTraversal
(1) (2) (2) (2) (2) (3) (3) (3) (4) (6) (8) (8) 
line 243: kNearestNeighbour 8 (10)
(2) (3) (3) (3) (4) (6) (8) (8) 
line 244: inorderTraversal
(1) (2) (2) (2) (2) (3) (3) (3) (4) (6) (8) (8) 
line 245: nearestNeighbour (4)
(4) 
line 246: inorderTraversal
(1) (2) (2) (2) (2) (3) (3) (3) (4) (6) (8) (8) 
line 247: preorderTraversal
(3) (2) (1) (2) (2) (2) (4) (3) (3) (8) (6) (8) 
line 248: inorderTraversal
(1) (2) (2) (2) (2) (3) (3) (3) (4) (6) (8) (8) 
line 249: insert (1)
line 250: inorderTraversal
(1) (1) (2) (2) (2) (2) (3) (3) (3) (4) (6) (8) (8) 
line 251: search (2)
TRUE
line 252: inorderTraversal
(1) (1) (2) (2) (2) (2) (3) (3) (3) (4) (6) (8) (8) 
line 253: nearestNeighbour (8)
(8) 
line 254: inorderTraversal
(1) (1) (2) (2) (2) (2) (3) (3) (3) (4) (6) (8) (8) 
line 255: preorderTraversal
(3) (2) (1) (1) (2) (2) (2) (4) (3) (3) (8) (6) (8) 
line 256: inorderTraversal
(1) (1) (2) (2) (2) (2) (3) (3) (3) (4) (6) (8) (8) 
line 257: kNearestNeighbour 3 (4)
(3) (3) (4) 
line 258: inorderTraversal
(1) (1) (2) (2) (2) (2) (3) (3) (3) (4) (6) (8) (8) 
line 259: remove (2)
line 260: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (3) (4) (6) (8) (8) 
line 261: nearestNeighbour (2)
(2) 
line 262: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (3) (4) (6) (8) (8) 
line 263: insert (6)
line 264: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (3) (4) (6) (6) (8) (8) 
line 265: nearestNeighbour (4)
(4) 
line 266: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (3) (4) (6) (6) (8) (8) 
line 267: insert (6)
line 268: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (3) (4) (6) (6) (6) (8) (8) 
line 269: postorderTraversal
(1) (1) (2) (2) (2) (3) (3) (6) (6) (6) (8) (8) (4) (3) 
line 270: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (3) (4) (6) (6) (6) (8) (8) 
line 271: nearestNeighbour (6)
(6) 
line 272: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (3) (4) (6) (6) (6) (8) (8) 
line 273: kNearestNeighbour 2 (7)
(6) (6) 
line 274: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (3) (4) (6) (6) (6) (8) (8) 
line 275: nearestNeighbour (7)
(6) 
line 276: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (3) (4) (6) (6) (6) (8) (8) 
line 277: kNearestNeighbour 4 (4)
(3) (3) (3) (4) 
line 278: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (3) (4) (6) (6) (6) (8) (8) 
line 279: remove (2)
line 280: inorderTraversal
(1) (1) (2) (2) (3) (3) (3) (4) (6) (6) (6) (8) (8) 
line 281: kNearestNeighbour 5 (4)
(3) (3) (3) (4) (6) 
line 282: inorderTraversal
(1) (1) (2) (2) (3) (3) (3) (4) (6) (6) (6) (8) (8) 
line 283: insert (8)
line 284: inorderTraversal
(1) (1) (2) (2) (3) (3) (3) (4) (6) (6) (6) (8) (8) (8) 
line 285: insert (2)
line 286: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (3) (4) (6) (6) (6) (8) (8) (8) 
line 287: search (2)
TRUE
line 288: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (3) (4) (6) (6) (6) (8) (8) (8) 
line 289: clear
line 290: buildTree 19
(10) (7) (6) (4) (7) (6) (4) (7) (1) (7) (5) (4) (6) (10) (6) (10) (5) (6) (8) 
line 291: inorderTraversal
(1) (4) (4) (4) (5) (5) (6) (6) (6) (6) (6) (7) (7) (7) (7) (8) (10) (10) (10) 
line 292: insert (2)
line 293: inorderTraversal
(1) (2) (4) (4) (4) (5) (5) (6) (6) (6) (6) (6) (7) (7) (7) (7) (8) (10) (10) (10) 
line 294: insert (6)
line 295: inorderTraversal
(1) (2) (4) (4) (4) (5) (5) (6) (6) (6) (6) (6) (6) (7) (7) (7) (7) (8) (10) (10) (10) 
line 296: kNearestNeighbour 5 (7)
(7) (7) (7) (7) (8) 
line 297: inorderTraversal
(1) (2) (4) (4) (4) (5) (5) (6) (6) (6) (6) (6) (6) (7) (7) (7) (7) (8) (10) (10) (10) 
line 298: remove (1)
line 299: inorderTraversal
(2) (4) (4) (4) (5) (5) (6) (6) (6) (6) (6) (6) (7) (7) (7) (7) (8) (10) (10) (10) 
line 300: clear
line 301: buildTree 3
(6) (1) (8) 
line 302: inorderTraversal
(1) (6) (8) 
line 303: nearestNeighbour (1)
(1) 
line 304: inorderTraversal
(1) (6) (8) 
line 305: kNearestNeighbour 9 (9)
(1) (6) (8) 
line 306: inorderTraversal
(1) (6) (8) 
line 307: insert (7)
line 308: inorderTraversal
(1) (6) (7) (8) 
line 309: nearestNeighbour (4)
(6) 
line 310: inorderTraversal
(1) (6) (7) (8) 
line 311: insert (2)
line 312: inorderTraversal
(1) (2) (6) (7) (8) 
line 313: insert (8)
line 314: inorderTraversal
(1) (2) (6) (7) (8) (8) 
line 315: nearestNeighbour (4)
(2) 
line 316: inorderTraversal
(1) (2) (6) (7) (8) (8) 
line 317: insert (7)
line 318: inorderTraversal
(1) (2) (6) (7) (7) (8) (8) 
line 319: insert (2)
line 320: inorderTraversal
(1) (2) (2) (6) (7) (7) (8) (8) 
line 321: kNearestNeighbour 8 (6)
(1) (2) (2) (6) (7) (7) (8) (8) 
line 322: inorderTraversal
(1) (2) (2) (6) (7) (7) (8) (8) 
line 323: remove (2)
line 324: inorderTraversal
(1) (2) (6) (7) (7) (8) (8) 
line 325: kNearestNeighbour 4 (4)
(1) (2) (6) (7) 
line 326: inorderTraversal
(1) (2) (6) (7) (7) (8) (8) 
line 327: nodeCount_height_leafCount
nodeCount=7;height=4;leafCount=3
line 328: inorderTraversal
(1) (2) (6) (7) (7) (8) (8) 
line 329: clear
line 330: buildTree 6
(6) (2) (2) (10) (4) (8) 
line 331: inorderTraversal
(2) (2) (4) (6) (8) (10) 
line 332: remove (2)
line 333: inorderTraversal
(2) (4) (6) (8) (10) 
line 334: remove (4)
line 335: inorderTraversal
(2) (6) (8) (10) 
line 336: kNearestNeighbour 9 (9)
(2) (6) (8) (10) 
line 337: inorderTraversal
(2) (6) (8) (10) 
line 338: kNearestNeighbour 7 (7)
(2) (6) (8) (10) 
line 339: inorderTraversal
(2) (6) (8) (10) 
line 340: kNearestNeighbour 9 (7)
(2) (6) (8) (10) 
line 341: inorderTraversal
(2) (6) (8) (10) 
line 342: remove (4)
line 343: inorderTraversal
(2) (6) (8) (10) 
line 344: nearestNeighbour (3)
(2) 
line 345: inorderTraversal
(2) (6) (8) (10) 
line 346: insert (5)
line 347: inorderTraversal
(2) (5) (6) (8) (10) 
line 348: insert (3)
line 349: inorderTraversal
(2) (3) (5) (6) (8) (10) 
line 350: kNearestNeighbour 8 (8)
(2) (3) (5) (6) (8) (10) 
line 351: inorderTraversal
(2) (3) (5) (6) (8) (10) 
line 352: search (2)
TRUE
line 353: inorderTraversal
(2) (3) (5) (6) (8) (10) 
line 354: insert (5)
line 355: inorderTraversal
(2) (3) (5) (5) (6) (8) (10) 
line 356: insert (5)
line 357: inorderTraversal
(2) (3) (5) (5) (5) (6) (8) (10) 
line 358: remove (9)
line 359: inorderTraversal
(2) (3) (5) (5) (5) (6) (8) (10) 
line 360: kNearestNeighbour 10 (8)
(2) (3) (5) (5) (5) (6) (8) (10) 
line 361: inorderTraversal
(2) (3) (5) (5) (5) (6) (8) (10) 
line 362: search (5)
TRUE
line 363: inorderTraversal
(2) (3) (5) (5) (5) (6) (8) (10) 
line 364: nearestNeighbour (4)
(3) 
line 365: inorderTraversal
(2) (3) (5) (5) (5) (6) (8) (10) 
line 366: kNearestNeighbour 6 (9)
(5) (5) (5) (6) (8) (10) 
line 367: inorderTraversal
(2) (3) (5) (5) (5) (6) (8) (10) 
line 368: remove (8)
line 369: inorderTraversal
(2) (3) (5) (5) (5) (6) (10) 
line 370: kNearestNeighbour 10 (4)
(2) (3) (5) (5) (5) (6) (10) 
line 371: inorderTraversal
(2) (3) (5) (5) (5) (6) (10) 
line 372: insert (2)
line 373: inorderTraversal
(2) (2) (3) (5) (5) (5) (6) (10) 
line 374: insert (4)
line 375: inorderTraversal
(2) (2) (3) (4) (5) (5) (5) (6) (10) 
line 376: remove (5)
line 377: inorderTraversal
(2) (2) (3) (4) (5) (5) (6) (10) 
line 378: kNearestNeighbour 4 (7)
(5) (5) (6) (10) 
line 379: inorderTraversal
(2) (2) (3) (4) (5) (5) (6) (10) 
line 380: insert (4)
line 381: inorderTraversal
(2) (2) (3) (4) (4) (5) (5) (6) (10) 
line 382: search (1)
FALSE
line 383: inorderTraversal
(2) (2) (3) (4) (4) (5) (5) (6) (10) 
line 384: remove (2)
line 385: inorderTraversal
(2) (3) (4) (4) (5) (5) (6) (10) 
line 386: nodeCount_height_leafCount
nodeCount=8;height=6;leafCount=3
line 387: inorderTraversal
(2) (3) (4) (4) (5) (5) (6) (10) 
line 388: search (6)
TRUE
line 389: inorderTraversal
(2) (3) (4) (4) (5) (5) (6) (10) 
line 390: clear
line 391: buildTree 8
(4) (10) (1) (9) (10) (4) (3) (9) 
line 392: inorderTraversal
(1) (3) (4) (4) (9) (9) (10) (10) 
line 393: kNearestNeighbour 4 (2)
(1) (3) (4) (4) 
line 394: inorderTraversal
(1) (3) (4) (4) (9) (9) (10) (10) 
line 395: kNearestNeighbour 2 (2)
(1) (3) 
line 396: inorderTraversal
(1) (3) (4) (4) (9) (9) (10) (10) 
line 397: insert (3)
line 398: inorderTraversal
(1) (3) (3) (4) (4) (9) (9) (10) (10) 
line 399: nearestNeighbour (4)
(4) 
line 400: inorderTraversal
(1) (3) (3) (4) (4) (9) (9) (10) (10) 
line 401: insert (2)
line 402: inorderTraversal
(1) (2) (3) (3) (4) (4) (9) (9) (10) (10) 
line 403: search (2)
TRUE
line 404: inorderTraversal
(1) (2) (3) (3) (4) (4) (9) (9) (10) (10) 
line 405: clear
line 406: buildTree 11
(9) (2) (8) (7) (10) (10) (6) (7) (10) (9) (2) 
line 407: inorderTraversal
(2) (2) (6) (7) (7) (8) (9) (9) (10) (10) (10) 
line 408: insert (8)
line 409: inorderTraversal
(2) (2) (6) (7) (7) (8) (8) (9) (9) (10) (10) (10) 
line 410: postorderTraversal
(2) (2) (7) (7) (6) (8) (9) (9) (10) (10) (10) (8) 
line 411: inorderTraversal
(2) (2) (6) (7) (7) (8) (8) (9) (9) (10) (10) (10) 
line 412: clear
line 413: buildTree 19
(8) (4) (10) (5) (3) (5) (4) (2) (2) (4) (3) (9) (1) (8) (4) (9) (2) (9) (6) 
line 414: inorderTraversal
(1) (2) (2) (2) (3) (3) (4) (4) (4) (4) (5) (5) (6) (8) (8) (9) (9) (9) (10) 
line 415: insert (6)
line 416: inorderTraversal
(1) (2) (2) (2) (3) (3) (4) (4) (4) (4) (5) (5) (6) (6) (8) (8) (9) (9) (9) (10) 
line 417: remove (1)
line 418: inorderTraversal
(2) (2) (2) (3) (3) (4) (4) (4) (4) (5) (5) (6) (6) (8) (8) (9) (9) (9) (10) 
line 419: insert (3)
line 420: inorderTraversal
(2) (2) (2) (3) (3) (3) (4) (4) (4) (4) (5) (5) (6) (6) (8) (8) (9) (9) (9) (10) 
line 421: insert (5)
line 422: inorderTraversal
(2) (2) (2) (3) (3) (3) (4) (4) (4) (4) (5) (5) (5) (6) (6) (8) (8) (9) (9) (9) (10) 
line 423: nodeCount_height_leafCount
nodeCount=21;height=7;leafCount=7
line 424: inorderTraversal
(2) (2) (2) (3) (3) (3) (4) (4) (4) (4) (5) (5) (5) (6) (6) (8) (8) (9) (9) (9) (10) 
line 425: preorderTraversal
(4) (2) (2) (3) (2) (3) (3) (6) (4) (4) (5) (4) (5) (5) (9) (8) (6) (8) (9) (9) (10) 
line 426: postorderTraversal
(2) (3) (3) (3) (2) (2) (4) (5) (5) (5) (4) (4) (6) (8) (8) (10) (9) (9) (9) (6) (4) 
line 427: clear
