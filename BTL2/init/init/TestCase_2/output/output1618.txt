line 1: k=1
line 2: insert (8)
line 3: inorderTraversal
(8) 
line 4: kNearestNeighbour 1 (9)
(8) 
line 5: inorderTraversal
(8) 
line 6: kNearestNeighbour 6 (6)
(8) 
line 7: inorderTraversal
(8) 
line 8: nearestNeighbour (10)
(8) 
line 9: inorderTraversal
(8) 
line 10: remove (8)
line 11: inorderTraversal

line 12: insert (2)
line 13: inorderTraversal
(2) 
line 14: insert (4)
line 15: inorderTraversal
(2) (4) 
line 16: kNearestNeighbour 10 (3)
(2) (4) 
line 17: inorderTraversal
(2) (4) 
line 18: remove (4)
line 19: inorderTraversal
(2) 
line 20: nearestNeighbour (8)
(2) 
line 21: inorderTraversal
(2) 
line 22: insert (5)
line 23: inorderTraversal
(2) (5) 
line 24: clear
line 25: buildTree 14
(6) (9) (5) (2) (2) (6) (2) (9) (3) (4) (5) (4) (5) (10) 
line 26: inorderTraversal
(2) (2) (2) (3) (4) (4) (5) (5) (5) (6) (6) (9) (9) (10) 
line 27: nearestNeighbour (3)
(3) 
line 28: inorderTraversal
(2) (2) (2) (3) (4) (4) (5) (5) (5) (6) (6) (9) (9) (10) 
line 29: clear
line 30: buildTree 15
(2) (9) (3) (9) (7) (9) (4) (6) (5) (7) (6) (7) (3) (9) (9) 
line 31: inorderTraversal
(2) (3) (3) (4) (5) (6) (6) (7) (7) (7) (9) (9) (9) (9) (9) 
line 32: insert (9)
line 33: inorderTraversal
(2) (3) (3) (4) (5) (6) (6) (7) (7) (7) (9) (9) (9) (9) (9) (9) 
line 34: kNearestNeighbour 9 (10)
(7) (7) (7) (9) (9) (9) (9) (9) (9) 
line 35: inorderTraversal
(2) (3) (3) (4) (5) (6) (6) (7) (7) (7) (9) (9) (9) (9) (9) (9) 
line 36: kNearestNeighbour 7 (5)
(3) (3) (4) (5) (6) (6) (7) 
line 37: inorderTraversal
(2) (3) (3) (4) (5) (6) (6) (7) (7) (7) (9) (9) (9) (9) (9) (9) 
line 38: kNearestNeighbour 9 (5)
(3) (3) (4) (5) (6) (6) (7) (7) (7) 
line 39: inorderTraversal
(2) (3) (3) (4) (5) (6) (6) (7) (7) (7) (9) (9) (9) (9) (9) (9) 
line 40: insert (7)
line 41: inorderTraversal
(2) (3) (3) (4) (5) (6) (6) (7) (7) (7) (7) (9) (9) (9) (9) (9) (9) 
line 42: insert (5)
line 43: inorderTraversal
(2) (3) (3) (4) (5) (5) (6) (6) (7) (7) (7) (7) (9) (9) (9) (9) (9) (9) 
line 44: search (9)
TRUE
line 45: inorderTraversal
(2) (3) (3) (4) (5) (5) (6) (6) (7) (7) (7) (7) (9) (9) (9) (9) (9) (9) 
line 46: insert (9)
line 47: inorderTraversal
(2) (3) (3) (4) (5) (5) (6) (6) (7) (7) (7) (7) (9) (9) (9) (9) (9) (9) (9) 
line 48: preorderTraversal
(7) (4) (3) (2) (3) (6) (5) (5) (6) (9) (7) (7) (7) (9) (9) (9) (9) (9) (9) 
line 49: inorderTraversal
(2) (3) (3) (4) (5) (5) (6) (6) (7) (7) (7) (7) (9) (9) (9) (9) (9) (9) (9) 
line 50: kNearestNeighbour 8 (2)
(2) (3) (3) (4) (5) (5) (6) (6) 
line 51: inorderTraversal
(2) (3) (3) (4) (5) (5) (6) (6) (7) (7) (7) (7) (9) (9) (9) (9) (9) (9) (9) 
line 52: insert (2)
line 53: inorderTraversal
(2) (2) (3) (3) (4) (5) (5) (6) (6) (7) (7) (7) (7) (9) (9) (9) (9) (9) (9) (9) 
line 54: kNearestNeighbour 8 (10)
(7) (9) (9) (9) (9) (9) (9) (9) 
line 55: inorderTraversal
(2) (2) (3) (3) (4) (5) (5) (6) (6) (7) (7) (7) (7) (9) (9) (9) (9) (9) (9) (9) 
line 56: insert (1)
line 57: inorderTraversal
(1) (2) (2) (3) (3) (4) (5) (5) (6) (6) (7) (7) (7) (7) (9) (9) (9) (9) (9) (9) (9) 
line 58: insert (6)
line 59: inorderTraversal
(1) (2) (2) (3) (3) (4) (5) (5) (6) (6) (6) (7) (7) (7) (7) (9) (9) (9) (9) (9) (9) (9) 
line 60: clear
line 61: buildTree 9
(5) (10) (4) (4) (9) (6) (5) (6) (2) 
line 62: inorderTraversal
(2) (4) (4) (5) (5) (6) (6) (9) (10) 
line 63: kNearestNeighbour 10 (3)
(2) (4) (4) (5) (5) (6) (6) (9) (10) 
line 64: inorderTraversal
(2) (4) (4) (5) (5) (6) (6) (9) (10) 
line 65: nearestNeighbour (8)
(9) 
line 66: inorderTraversal
(2) (4) (4) (5) (5) (6) (6) (9) (10) 
line 67: insert (6)
line 68: inorderTraversal
(2) (4) (4) (5) (5) (6) (6) (6) (9) (10) 
line 69: insert (6)
line 70: inorderTraversal
(2) (4) (4) (5) (5) (6) (6) (6) (6) (9) (10) 
line 71: nodeCount_height_leafCount
nodeCount=11;height=6;leafCount=5
line 72: inorderTraversal
(2) (4) (4) (5) (5) (6) (6) (6) (6) (9) (10) 
line 73: kNearestNeighbour 1 (9)
(9) 
line 74: inorderTraversal
(2) (4) (4) (5) (5) (6) (6) (6) (6) (9) (10) 
line 75: remove (6)
line 76: inorderTraversal
(2) (4) (4) (5) (5) (6) (6) (6) (9) (10) 
line 77: insert (1)
line 78: inorderTraversal
(1) (2) (4) (4) (5) (5) (6) (6) (6) (9) (10) 
line 79: nearestNeighbour (10)
(10) 
line 80: inorderTraversal
(1) (2) (4) (4) (5) (5) (6) (6) (6) (9) (10) 
line 81: insert (3)
line 82: inorderTraversal
(1) (2) (3) (4) (4) (5) (5) (6) (6) (6) (9) (10) 
line 83: kNearestNeighbour 7 (1)
(1) (2) (3) (4) (4) (5) (5) 
line 84: inorderTraversal
(1) (2) (3) (4) (4) (5) (5) (6) (6) (6) (9) (10) 
line 85: clear
line 86: buildTree 19
(4) (6) (9) (4) (10) (4) (8) (8) (10) (7) (9) (7) (8) (10) (4) (1) (2) (1) (9) 
line 87: inorderTraversal
(1) (1) (2) (4) (4) (4) (4) (6) (7) (7) (8) (8) (8) (9) (9) (9) (10) (10) (10) 
line 88: nearestNeighbour (2)
(2) 
line 89: inorderTraversal
(1) (1) (2) (4) (4) (4) (4) (6) (7) (7) (8) (8) (8) (9) (9) (9) (10) (10) (10) 
line 90: kNearestNeighbour 2 (4)
(4) (4) 
line 91: inorderTraversal
(1) (1) (2) (4) (4) (4) (4) (6) (7) (7) (8) (8) (8) (9) (9) (9) (10) (10) (10) 
line 92: insert (6)
line 93: inorderTraversal
(1) (1) (2) (4) (4) (4) (4) (6) (6) (7) (7) (8) (8) (8) (9) (9) (9) (10) (10) (10) 
line 94: insert (4)
line 95: inorderTraversal
(1) (1) (2) (4) (4) (4) (4) (4) (6) (6) (7) (7) (8) (8) (8) (9) (9) (9) (10) (10) (10) 
line 96: insert (10)
line 97: inorderTraversal
(1) (1) (2) (4) (4) (4) (4) (4) (6) (6) (7) (7) (8) (8) (8) (9) (9) (9) (10) (10) (10) (10) 
line 98: nearestNeighbour (3)
(2) 
line 99: inorderTraversal
(1) (1) (2) (4) (4) (4) (4) (4) (6) (6) (7) (7) (8) (8) (8) (9) (9) (9) (10) (10) (10) (10) 
line 100: nearestNeighbour (9)
(9) 
line 101: inorderTraversal
(1) (1) (2) (4) (4) (4) (4) (4) (6) (6) (7) (7) (8) (8) (8) (9) (9) (9) (10) (10) (10) (10) 
line 102: insert (4)
line 103: inorderTraversal
(1) (1) (2) (4) (4) (4) (4) (4) (4) (6) (6) (7) (7) (8) (8) (8) (9) (9) (9) (10) (10) (10) (10) 
line 104: nearestNeighbour (6)
(6) 
line 105: inorderTraversal
(1) (1) (2) (4) (4) (4) (4) (4) (4) (6) (6) (7) (7) (8) (8) (8) (9) (9) (9) (10) (10) (10) (10) 
line 106: insert (2)
line 107: inorderTraversal
(1) (1) (2) (2) (4) (4) (4) (4) (4) (4) (6) (6) (7) (7) (8) (8) (8) (9) (9) (9) (10) (10) (10) (10) 
line 108: kNearestNeighbour 5 (10)
(9) (10) (10) (10) (10) 
line 109: inorderTraversal
(1) (1) (2) (2) (4) (4) (4) (4) (4) (4) (6) (6) (7) (7) (8) (8) (8) (9) (9) (9) (10) (10) (10) (10) 
line 110: insert (2)
line 111: inorderTraversal
(1) (1) (2) (2) (2) (4) (4) (4) (4) (4) (4) (6) (6) (7) (7) (8) (8) (8) (9) (9) (9) (10) (10) (10) (10) 
line 112: remove (8)
line 113: inorderTraversal
(1) (1) (2) (2) (2) (4) (4) (4) (4) (4) (4) (6) (6) (7) (7) (8) (8) (9) (9) (9) (10) (10) (10) (10) 
line 114: preorderTraversal
(7) (4) (1) (1) (2) (2) (2) (4) (4) (4) (6) (4) (4) (6) (9) (8) (7) (8) (10) (9) (9) (10) (10) (10) 
line 115: inorderTraversal
(1) (1) (2) (2) (2) (4) (4) (4) (4) (4) (4) (6) (6) (7) (7) (8) (8) (9) (9) (9) (10) (10) (10) (10) 
line 116: clear
line 117: buildTree 14
(5) (9) (4) (9) (6) (5) (1) (5) (3) (2) (7) (2) (6) (2) 
line 118: inorderTraversal
(1) (2) (2) (2) (3) (4) (5) (5) (5) (6) (6) (7) (9) (9) 
line 119: kNearestNeighbour 1 (9)
(9) 
line 120: inorderTraversal
(1) (2) (2) (2) (3) (4) (5) (5) (5) (6) (6) (7) (9) (9) 
line 121: insert (6)
line 122: inorderTraversal
(1) (2) (2) (2) (3) (4) (5) (5) (5) (6) (6) (6) (7) (9) (9) 
line 123: postorderTraversal
(1) (2) (4) (3) (2) (2) (5) (5) (6) (6) (9) (9) (7) (6) (5) 
line 124: inorderTraversal
(1) (2) (2) (2) (3) (4) (5) (5) (5) (6) (6) (6) (7) (9) (9) 
line 125: clear
line 126: buildTree 18
(3) (6) (7) (10) (4) (2) (4) (5) (9) (5) (1) (9) (1) (4) (6) (8) (1) (10) 
line 127: inorderTraversal
(1) (1) (1) (2) (3) (4) (4) (4) (5) (5) (6) (6) (7) (8) (9) (9) (10) (10) 
line 128: kNearestNeighbour 9 (2)
(1) (1) (1) (2) (3) (4) (4) (4) (5) 
line 129: inorderTraversal
(1) (1) (1) (2) (3) (4) (4) (4) (5) (5) (6) (6) (7) (8) (9) (9) (10) (10) 
line 130: kNearestNeighbour 3 (1)
(1) (1) (1) 
line 131: inorderTraversal
(1) (1) (1) (2) (3) (4) (4) (4) (5) (5) (6) (6) (7) (8) (9) (9) (10) (10) 
line 132: kNearestNeighbour 3 (1)
(1) (1) (1) 
line 133: inorderTraversal
(1) (1) (1) (2) (3) (4) (4) (4) (5) (5) (6) (6) (7) (8) (9) (9) (10) (10) 
line 134: kNearestNeighbour 10 (4)
(1) (2) (3) (4) (4) (4) (5) (5) (6) (6) 
line 135: inorderTraversal
(1) (1) (1) (2) (3) (4) (4) (4) (5) (5) (6) (6) (7) (8) (9) (9) (10) (10) 
line 136: remove (1)
line 137: inorderTraversal
(1) (1) (2) (3) (4) (4) (4) (5) (5) (6) (6) (7) (8) (9) (9) (10) (10) 
line 138: nearestNeighbour (6)
(6) 
line 139: inorderTraversal
(1) (1) (2) (3) (4) (4) (4) (5) (5) (6) (6) (7) (8) (9) (9) (10) (10) 
line 140: clear
line 141: buildTree 5
(5) (5) (7) (3) (10) 
line 142: inorderTraversal
(3) (5) (5) (7) (10) 
line 143: nearestNeighbour (10)
(10) 
line 144: inorderTraversal
(3) (5) (5) (7) (10) 
line 145: nearestNeighbour (5)
(5) 
line 146: inorderTraversal
(3) (5) (5) (7) (10) 
line 147: search (8)
FALSE
line 148: inorderTraversal
(3) (5) (5) (7) (10) 
line 149: preorderTraversal
(5) (3) (7) (5) (10) 
line 150: inorderTraversal
(3) (5) (5) (7) (10) 
line 151: kNearestNeighbour 2 (1)
(3) (5) 
line 152: inorderTraversal
(3) (5) (5) (7) (10) 
line 153: insert (10)
line 154: inorderTraversal
(3) (5) (5) (7) (10) (10) 
line 155: remove (3)
line 156: inorderTraversal
(5) (5) (7) (10) (10) 
line 157: insert (2)
line 158: inorderTraversal
(2) (5) (5) (7) (10) (10) 
line 159: nearestNeighbour (9)
(10) 
line 160: inorderTraversal
(2) (5) (5) (7) (10) (10) 
line 161: kNearestNeighbour 2 (2)
(2) (5) 
line 162: inorderTraversal
(2) (5) (5) (7) (10) (10) 
line 163: remove (9)
line 164: inorderTraversal
(2) (5) (5) (7) (10) (10) 
line 165: insert (6)
line 166: inorderTraversal
(2) (5) (5) (6) (7) (10) (10) 
line 167: insert (6)
line 168: inorderTraversal
(2) (5) (5) (6) (6) (7) (10) (10) 
line 169: nodeCount_height_leafCount
nodeCount=8;height=5;leafCount=3
line 170: inorderTraversal
(2) (5) (5) (6) (6) (7) (10) (10) 
line 171: insert (8)
line 172: inorderTraversal
(2) (5) (5) (6) (6) (7) (8) (10) (10) 
line 173: clear
line 174: buildTree 19
(3) (4) (2) (5) (7) (10) (10) (3) (2) (8) (9) (6) (1) (3) (2) (7) (8) (1) (2) 
line 175: inorderTraversal
(1) (1) (2) (2) (2) (2) (3) (3) (3) (4) (5) (6) (7) (7) (8) (8) (9) (10) (10) 
line 176: search (3)
TRUE
line 177: inorderTraversal
(1) (1) (2) (2) (2) (2) (3) (3) (3) (4) (5) (6) (7) (7) (8) (8) (9) (10) (10) 
line 178: insert (8)
line 179: inorderTraversal
(1) (1) (2) (2) (2) (2) (3) (3) (3) (4) (5) (6) (7) (7) (8) (8) (8) (9) (10) (10) 
line 180: kNearestNeighbour 8 (4)
(2) (2) (3) (3) (3) (4) (5) (6) 
line 181: inorderTraversal
(1) (1) (2) (2) (2) (2) (3) (3) (3) (4) (5) (6) (7) (7) (8) (8) (8) (9) (10) (10) 
line 182: search (6)
TRUE
line 183: inorderTraversal
(1) (1) (2) (2) (2) (2) (3) (3) (3) (4) (5) (6) (7) (7) (8) (8) (8) (9) (10) (10) 
line 184: kNearestNeighbour 8 (10)
(7) (7) (8) (8) (8) (9) (10) (10) 
line 185: inorderTraversal
(1) (1) (2) (2) (2) (2) (3) (3) (3) (4) (5) (6) (7) (7) (8) (8) (8) (9) (10) (10) 
line 186: insert (2)
line 187: inorderTraversal
(1) (1) (2) (2) (2) (2) (2) (3) (3) (3) (4) (5) (6) (7) (7) (8) (8) (8) (9) (10) (10) 
line 188: insert (2)
line 189: inorderTraversal
(1) (1) (2) (2) (2) (2) (2) (2) (3) (3) (3) (4) (5) (6) (7) (7) (8) (8) (8) (9) (10) (10) 
line 190: nearestNeighbour (5)
(5) 
line 191: inorderTraversal
(1) (1) (2) (2) (2) (2) (2) (2) (3) (3) (3) (4) (5) (6) (7) (7) (8) (8) (8) (9) (10) (10) 
line 192: remove (5)
line 193: inorderTraversal
(1) (1) (2) (2) (2) (2) (2) (2) (3) (3) (3) (4) (6) (7) (7) (8) (8) (8) (9) (10) (10) 
line 194: remove (2)
line 195: inorderTraversal
(1) (1) (2) (2) (2) (2) (2) (3) (3) (3) (4) (6) (7) (7) (8) (8) (8) (9) (10) (10) 
line 196: nearestNeighbour (7)
(7) 
line 197: inorderTraversal
(1) (1) (2) (2) (2) (2) (2) (3) (3) (3) (4) (6) (7) (7) (8) (8) (8) (9) (10) (10) 
line 198: kNearestNeighbour 2 (9)
(9) (10) 
line 199: inorderTraversal
(1) (1) (2) (2) (2) (2) (2) (3) (3) (3) (4) (6) (7) (7) (8) (8) (8) (9) (10) (10) 
line 200: kNearestNeighbour 1 (7)
(7) 
line 201: inorderTraversal
(1) (1) (2) (2) (2) (2) (2) (3) (3) (3) (4) (6) (7) (7) (8) (8) (8) (9) (10) (10) 
line 202: kNearestNeighbour 1 (5)
(6) 
line 203: inorderTraversal
(1) (1) (2) (2) (2) (2) (2) (3) (3) (3) (4) (6) (7) (7) (8) (8) (8) (9) (10) (10) 
line 204: nearestNeighbour (7)
(7) 
line 205: inorderTraversal
(1) (1) (2) (2) (2) (2) (2) (3) (3) (3) (4) (6) (7) (7) (8) (8) (8) (9) (10) (10) 
line 206: nearestNeighbour (1)
(1) 
line 207: inorderTraversal
(1) (1) (2) (2) (2) (2) (2) (3) (3) (3) (4) (6) (7) (7) (8) (8) (8) (9) (10) (10) 
line 208: nearestNeighbour (2)
(2) 
line 209: inorderTraversal
(1) (1) (2) (2) (2) (2) (2) (3) (3) (3) (4) (6) (7) (7) (8) (8) (8) (9) (10) (10) 
line 210: nearestNeighbour (4)
(4) 
line 211: inorderTraversal
(1) (1) (2) (2) (2) (2) (2) (3) (3) (3) (4) (6) (7) (7) (8) (8) (8) (9) (10) (10) 
line 212: insert (9)
line 213: inorderTraversal
(1) (1) (2) (2) (2) (2) (2) (3) (3) (3) (4) (6) (7) (7) (8) (8) (8) (9) (9) (10) (10) 
line 214: nearestNeighbour (9)
(9) 
line 215: inorderTraversal
(1) (1) (2) (2) (2) (2) (2) (3) (3) (3) (4) (6) (7) (7) (8) (8) (8) (9) (9) (10) (10) 
line 216: search (2)
TRUE
line 217: inorderTraversal
(1) (1) (2) (2) (2) (2) (2) (3) (3) (3) (4) (6) (7) (7) (8) (8) (8) (9) (9) (10) (10) 
line 218: search (2)
TRUE
line 219: inorderTraversal
(1) (1) (2) (2) (2) (2) (2) (3) (3) (3) (4) (6) (7) (7) (8) (8) (8) (9) (9) (10) (10) 
line 220: insert (3)
line 221: inorderTraversal
(1) (1) (2) (2) (2) (2) (2) (3) (3) (3) (3) (4) (6) (7) (7) (8) (8) (8) (9) (9) (10) (10) 
line 222: kNearestNeighbour 2 (9)
(9) (9) 
line 223: inorderTraversal
(1) (1) (2) (2) (2) (2) (2) (3) (3) (3) (3) (4) (6) (7) (7) (8) (8) (8) (9) (9) (10) (10) 
line 224: insert (1)
line 225: inorderTraversal
(1) (1) (1) (2) (2) (2) (2) (2) (3) (3) (3) (3) (4) (6) (7) (7) (8) (8) (8) (9) (9) (10) (10) 
line 226: kNearestNeighbour 3 (3)
(3) (3) (3) 
line 227: inorderTraversal
(1) (1) (1) (2) (2) (2) (2) (2) (3) (3) (3) (3) (4) (6) (7) (7) (8) (8) (8) (9) (9) (10) (10) 
line 228: insert (6)
line 229: inorderTraversal
(1) (1) (1) (2) (2) (2) (2) (2) (3) (3) (3) (3) (4) (6) (6) (7) (7) (8) (8) (8) (9) (9) (10) (10) 
line 230: clear
line 231: buildTree 7
(6) (2) (5) (10) (1) (2) (4) 
line 232: inorderTraversal
(1) (2) (2) (4) (5) (6) (10) 
line 233: nearestNeighbour (8)
(10) 
line 234: inorderTraversal
(1) (2) (2) (4) (5) (6) (10) 
line 235: nearestNeighbour (1)
(1) 
line 236: inorderTraversal
(1) (2) (2) (4) (5) (6) (10) 
line 237: insert (9)
line 238: inorderTraversal
(1) (2) (2) (4) (5) (6) (9) (10) 
line 239: search (10)
TRUE
line 240: inorderTraversal
(1) (2) (2) (4) (5) (6) (9) (10) 
line 241: insert (1)
line 242: inorderTraversal
(1) (1) (2) (2) (4) (5) (6) (9) (10) 
line 243: kNearestNeighbour 2 (7)
(6) (9) 
line 244: inorderTraversal
(1) (1) (2) (2) (4) (5) (6) (9) (10) 
line 245: insert (10)
line 246: inorderTraversal
(1) (1) (2) (2) (4) (5) (6) (9) (10) (10) 
line 247: search (10)
TRUE
line 248: inorderTraversal
(1) (1) (2) (2) (4) (5) (6) (9) (10) (10) 
line 249: nearestNeighbour (7)
(6) 
line 250: inorderTraversal
(1) (1) (2) (2) (4) (5) (6) (9) (10) (10) 
line 251: remove (2)
line 252: inorderTraversal
(1) (1) (2) (4) (5) (6) (9) (10) (10) 
line 253: insert (3)
line 254: inorderTraversal
(1) (1) (2) (3) (4) (5) (6) (9) (10) (10) 
line 255: insert (9)
line 256: inorderTraversal
(1) (1) (2) (3) (4) (5) (6) (9) (9) (10) (10) 
line 257: insert (4)
line 258: inorderTraversal
(1) (1) (2) (3) (4) (4) (5) (6) (9) (9) (10) (10) 
line 259: kNearestNeighbour 1 (7)
(6) 
line 260: inorderTraversal
(1) (1) (2) (3) (4) (4) (5) (6) (9) (9) (10) (10) 
line 261: kNearestNeighbour 6 (5)
(2) (3) (4) (4) (5) (6) 
line 262: inorderTraversal
(1) (1) (2) (3) (4) (4) (5) (6) (9) (9) (10) (10) 
line 263: insert (1)
line 264: inorderTraversal
(1) (1) (1) (2) (3) (4) (4) (5) (6) (9) (9) (10) (10) 
line 265: clear
line 266: buildTree 14
(10) (6) (8) (9) (10) (9) (10) (4) (3) (1) (5) (9) (1) (3) 
line 267: inorderTraversal
(1) (1) (3) (3) (4) (5) (6) (8) (9) (9) (9) (10) (10) (10) 
line 268: remove (4)
line 269: inorderTraversal
(1) (1) (3) (3) (5) (6) (8) (9) (9) (9) (10) (10) (10) 
line 270: search (9)
TRUE
line 271: inorderTraversal
(1) (1) (3) (3) (5) (6) (8) (9) (9) (9) (10) (10) (10) 
line 272: nearestNeighbour (7)
(8) 
line 273: inorderTraversal
(1) (1) (3) (3) (5) (6) (8) (9) (9) (9) (10) (10) (10) 
line 274: remove (4)
line 275: inorderTraversal
(1) (1) (3) (3) (5) (6) (8) (9) (9) (9) (10) (10) (10) 
line 276: remove (6)
line 277: inorderTraversal
(1) (1) (3) (3) (5) (8) (9) (9) (9) (10) (10) (10) 
line 278: nearestNeighbour (2)
(1) 
line 279: inorderTraversal
(1) (1) (3) (3) (5) (8) (9) (9) (9) (10) (10) (10) 
line 280: insert (9)
line 281: inorderTraversal
(1) (1) (3) (3) (5) (8) (9) (9) (9) (9) (10) (10) (10) 
line 282: remove (3)
line 283: inorderTraversal
(1) (1) (3) (5) (8) (9) (9) (9) (9) (10) (10) (10) 
line 284: nearestNeighbour (5)
(5) 
line 285: inorderTraversal
(1) (1) (3) (5) (8) (9) (9) (9) (9) (10) (10) (10) 
line 286: remove (9)
line 287: inorderTraversal
(1) (1) (3) (5) (8) (9) (9) (9) (10) (10) (10) 
line 288: insert (7)
line 289: inorderTraversal
(1) (1) (3) (5) (7) (8) (9) (9) (9) (10) (10) (10) 
line 290: kNearestNeighbour 7 (7)
(5) (7) (8) (9) (9) (9) (10) 
line 291: inorderTraversal
(1) (1) (3) (5) (7) (8) (9) (9) (9) (10) (10) (10) 
line 292: nearestNeighbour (1)
(1) 
line 293: inorderTraversal
(1) (1) (3) (5) (7) (8) (9) (9) (9) (10) (10) (10) 
line 294: remove (7)
line 295: inorderTraversal
(1) (1) (3) (5) (8) (9) (9) (9) (10) (10) (10) 
line 296: preorderTraversal
(8) (3) (1) (1) (5) (9) (10) (9) (9) (10) (10) 
line 297: inorderTraversal
(1) (1) (3) (5) (8) (9) (9) (9) (10) (10) (10) 
line 298: kNearestNeighbour 10 (4)
(1) (1) (3) (5) (8) (9) (9) (9) (10) (10) 
line 299: inorderTraversal
(1) (1) (3) (5) (8) (9) (9) (9) (10) (10) (10) 
line 300: insert (7)
line 301: inorderTraversal
(1) (1) (3) (5) (7) (8) (9) (9) (9) (10) (10) (10) 
line 302: remove (6)
line 303: inorderTraversal
(1) (1) (3) (5) (7) (8) (9) (9) (9) (10) (10) (10) 
line 304: preorderTraversal
(8) (3) (1) (1) (5) (7) (9) (10) (9) (9) (10) (10) 
line 305: inorderTraversal
(1) (1) (3) (5) (7) (8) (9) (9) (9) (10) (10) (10) 
line 306: insert (1)
line 307: inorderTraversal
(1) (1) (1) (3) (5) (7) (8) (9) (9) (9) (10) (10) (10) 
line 308: insert (6)
line 309: inorderTraversal
(1) (1) (1) (3) (5) (6) (7) (8) (9) (9) (9) (10) (10) (10) 
line 310: nodeCount_height_leafCount
nodeCount=14;height=5;leafCount=4
line 311: inorderTraversal
(1) (1) (1) (3) (5) (6) (7) (8) (9) (9) (9) (10) (10) (10) 
line 312: kNearestNeighbour 8 (6)
(3) (5) (6) (7) (8) (9) (9) (9) 
line 313: inorderTraversal
(1) (1) (1) (3) (5) (6) (7) (8) (9) (9) (9) (10) (10) (10) 
line 314: search (10)
TRUE
line 315: inorderTraversal
(1) (1) (1) (3) (5) (6) (7) (8) (9) (9) (9) (10) (10) (10) 
line 316: insert (2)
line 317: inorderTraversal
(1) (1) (1) (2) (3) (5) (6) (7) (8) (9) (9) (9) (10) (10) (10) 
line 318: nearestNeighbour (8)
(8) 
line 319: inorderTraversal
(1) (1) (1) (2) (3) (5) (6) (7) (8) (9) (9) (9) (10) (10) (10) 
line 320: insert (10)
line 321: inorderTraversal
(1) (1) (1) (2) (3) (5) (6) (7) (8) (9) (9) (9) (10) (10) (10) (10) 
line 322: clear
line 323: buildTree 12
(10) (1) (4) (9) (3) (2) (10) (6) (6) (3) (1) (4) 
line 324: inorderTraversal
(1) (1) (2) (3) (3) (4) (4) (6) (6) (9) (10) (10) 
line 325: insert (3)
line 326: inorderTraversal
(1) (1) (2) (3) (3) (3) (4) (4) (6) (6) (9) (10) (10) 
line 327: insert (5)
line 328: inorderTraversal
(1) (1) (2) (3) (3) (3) (4) (4) (5) (6) (6) (9) (10) (10) 
line 329: kNearestNeighbour 9 (9)
(3) (4) (4) (5) (6) (6) (9) (10) (10) 
line 330: inorderTraversal
(1) (1) (2) (3) (3) (3) (4) (4) (5) (6) (6) (9) (10) (10) 
line 331: remove (3)
line 332: inorderTraversal
(1) (1) (2) (3) (3) (4) (4) (5) (6) (6) (9) (10) (10) 
line 333: nearestNeighbour (9)
(9) 
line 334: inorderTraversal
(1) (1) (2) (3) (3) (4) (4) (5) (6) (6) (9) (10) (10) 
line 335: insert (1)
line 336: inorderTraversal
(1) (1) (1) (2) (3) (3) (4) (4) (5) (6) (6) (9) (10) (10) 
line 337: kNearestNeighbour 6 (7)
(5) (6) (6) (9) (10) (10) 
line 338: inorderTraversal
(1) (1) (1) (2) (3) (3) (4) (4) (5) (6) (6) (9) (10) (10) 
line 339: preorderTraversal
(4) (2) (1) (1) (1) (3) (3) (6) (4) (5) (9) (6) (10) (10) 
line 340: inorderTraversal
(1) (1) (1) (2) (3) (3) (4) (4) (5) (6) (6) (9) (10) (10) 
line 341: insert (3)
line 342: inorderTraversal
(1) (1) (1) (2) (3) (3) (3) (4) (4) (5) (6) (6) (9) (10) (10) 
line 343: kNearestNeighbour 6 (2)
(1) (1) (2) (3) (3) (3) 
line 344: inorderTraversal
(1) (1) (1) (2) (3) (3) (3) (4) (4) (5) (6) (6) (9) (10) (10) 
line 345: remove (9)
line 346: inorderTraversal
(1) (1) (1) (2) (3) (3) (3) (4) (4) (5) (6) (6) (10) (10) 
line 347: search (6)
TRUE
line 348: inorderTraversal
(1) (1) (1) (2) (3) (3) (3) (4) (4) (5) (6) (6) (10) (10) 
line 349: insert (10)
line 350: inorderTraversal
(1) (1) (1) (2) (3) (3) (3) (4) (4) (5) (6) (6) (10) (10) (10) 
line 351: nearestNeighbour (6)
(6) 
line 352: inorderTraversal
(1) (1) (1) (2) (3) (3) (3) (4) (4) (5) (6) (6) (10) (10) (10) 
line 353: remove (2)
line 354: inorderTraversal
(1) (1) (1) (3) (3) (3) (4) (4) (5) (6) (6) (10) (10) (10) 
line 355: kNearestNeighbour 2 (2)
(1) (1) 
line 356: inorderTraversal
(1) (1) (1) (3) (3) (3) (4) (4) (5) (6) (6) (10) (10) (10) 
line 357: insert (2)
line 358: inorderTraversal
(1) (1) (1) (2) (3) (3) (3) (4) (4) (5) (6) (6) (10) (10) (10) 
line 359: insert (8)
line 360: inorderTraversal
(1) (1) (1) (2) (3) (3) (3) (4) (4) (5) (6) (6) (8) (10) (10) (10) 
line 361: insert (4)
line 362: inorderTraversal
(1) (1) (1) (2) (3) (3) (3) (4) (4) (4) (5) (6) (6) (8) (10) (10) (10) 
line 363: remove (5)
line 364: inorderTraversal
(1) (1) (1) (2) (3) (3) (3) (4) (4) (4) (6) (6) (8) (10) (10) (10) 
line 365: kNearestNeighbour 8 (9)
(4) (4) (6) (6) (8) (10) (10) (10) 
line 366: inorderTraversal
(1) (1) (1) (2) (3) (3) (3) (4) (4) (4) (6) (6) (8) (10) (10) (10) 
line 367: insert (3)
line 368: inorderTraversal
(1) (1) (1) (2) (3) (3) (3) (3) (4) (4) (4) (6) (6) (8) (10) (10) (10) 
line 369: insert (2)
line 370: inorderTraversal
(1) (1) (1) (2) (2) (3) (3) (3) (3) (4) (4) (4) (6) (6) (8) (10) (10) (10) 
line 371: clear
line 372: buildTree 2
(5) (6) 
line 373: inorderTraversal
(5) (6) 
line 374: insert (7)
line 375: inorderTraversal
(5) (6) (7) 
line 376: nearestNeighbour (4)
(5) 
line 377: inorderTraversal
(5) (6) (7) 
line 378: nodeCount_height_leafCount
nodeCount=3;height=3;leafCount=1
line 379: inorderTraversal
(5) (6) (7) 
line 380: search (6)
TRUE
line 381: inorderTraversal
(5) (6) (7) 
line 382: insert (3)
line 383: inorderTraversal
(3) (5) (6) (7) 
line 384: insert (4)
line 385: inorderTraversal
(3) (4) (5) (6) (7) 
line 386: nearestNeighbour (1)
(3) 
line 387: inorderTraversal
(3) (4) (5) (6) (7) 
line 388: search (7)
TRUE
line 389: inorderTraversal
(3) (4) (5) (6) (7) 
line 390: clear
line 391: buildTree 16
(3) (10) (10) (3) (3) (8) (3) (7) (3) (2) (6) (6) (7) (1) (10) (7) 
line 392: inorderTraversal
(1) (2) (3) (3) (3) (3) (3) (6) (6) (7) (7) (7) (8) (10) (10) (10) 
line 393: remove (3)
line 394: inorderTraversal
(1) (2) (3) (3) (3) (3) (6) (6) (7) (7) (7) (8) (10) (10) (10) 
line 395: insert (9)
line 396: inorderTraversal
(1) (2) (3) (3) (3) (3) (6) (6) (7) (7) (7) (8) (9) (10) (10) (10) 
line 397: search (10)
TRUE
line 398: inorderTraversal
(1) (2) (3) (3) (3) (3) (6) (6) (7) (7) (7) (8) (9) (10) (10) (10) 
line 399: nearestNeighbour (5)
(6) 
line 400: inorderTraversal
(1) (2) (3) (3) (3) (3) (6) (6) (7) (7) (7) (8) (9) (10) (10) (10) 
line 401: nearestNeighbour (1)
(1) 
line 402: inorderTraversal
(1) (2) (3) (3) (3) (3) (6) (6) (7) (7) (7) (8) (9) (10) (10) (10) 
line 403: insert (2)
line 404: inorderTraversal
(1) (2) (2) (3) (3) (3) (3) (6) (6) (7) (7) (7) (8) (9) (10) (10) (10) 
line 405: insert (2)
line 406: inorderTraversal
(1) (2) (2) (2) (3) (3) (3) (3) (6) (6) (7) (7) (7) (8) (9) (10) (10) (10) 
line 407: insert (7)
line 408: inorderTraversal
(1) (2) (2) (2) (3) (3) (3) (3) (6) (6) (7) (7) (7) (7) (8) (9) (10) (10) (10) 
line 409: remove (2)
line 410: inorderTraversal
(1) (2) (2) (3) (3) (3) (3) (6) (6) (7) (7) (7) (7) (8) (9) (10) (10) (10) 
line 411: remove (3)
line 412: inorderTraversal
(1) (2) (2) (3) (3) (3) (6) (6) (7) (7) (7) (7) (8) (9) (10) (10) (10) 
line 413: preorderTraversal
(6) (3) (1) (2) (2) (3) (3) (7) (6) (8) (7) (7) (7) (10) (9) (10) (10) 
line 414: inorderTraversal
(1) (2) (2) (3) (3) (3) (6) (6) (7) (7) (7) (7) (8) (9) (10) (10) (10) 
line 415: nodeCount_height_leafCount
nodeCount=17;height=6;leafCount=6
line 416: inorderTraversal
(1) (2) (2) (3) (3) (3) (6) (6) (7) (7) (7) (7) (8) (9) (10) (10) (10) 
line 417: preorderTraversal
(6) (3) (1) (2) (2) (3) (3) (7) (6) (8) (7) (7) (7) (10) (9) (10) (10) 
line 418: postorderTraversal
(2) (2) (1) (3) (3) (3) (6) (7) (7) (7) (9) (10) (10) (10) (8) (7) (6) 
line 419: clear
