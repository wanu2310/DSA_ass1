line 1: k=1
line 2: insert (1)
line 3: inorderTraversal
(1) 
line 4: nearestNeighbour (2)
(1) 
line 5: inorderTraversal
(1) 
line 6: kNearestNeighbour 9 (8)
(1) 
line 7: inorderTraversal
(1) 
line 8: kNearestNeighbour 5 (1)
(1) 
line 9: inorderTraversal
(1) 
line 10: search (1)
TRUE
line 11: inorderTraversal
(1) 
line 12: clear
line 13: buildTree 19
(9) (5) (5) (9) (4) (4) (8) (3) (2) (3) (8) (6) (5) (5) (7) (9) (2) (2) (6) 
line 14: inorderTraversal
(2) (2) (2) (3) (3) (4) (4) (5) (5) (5) (5) (6) (6) (7) (8) (8) (9) (9) (9) 
line 15: kNearestNeighbour 8 (6)
(5) (5) (5) (5) (6) (6) (7) (8) 
line 16: inorderTraversal
(2) (2) (2) (3) (3) (4) (4) (5) (5) (5) (5) (6) (6) (7) (8) (8) (9) (9) (9) 
line 17: clear
line 18: buildTree 9
(4) (9) (4) (2) (7) (4) (3) (4) (5) 
line 19: inorderTraversal
(2) (3) (4) (4) (4) (4) (5) (7) (9) 
line 20: insert (10)
line 21: inorderTraversal
(2) (3) (4) (4) (4) (4) (5) (7) (9) (10) 
line 22: insert (7)
line 23: inorderTraversal
(2) (3) (4) (4) (4) (4) (5) (7) (7) (9) (10) 
line 24: search (5)
TRUE
line 25: inorderTraversal
(2) (3) (4) (4) (4) (4) (5) (7) (7) (9) (10) 
line 26: nearestNeighbour (6)
(7) 
line 27: inorderTraversal
(2) (3) (4) (4) (4) (4) (5) (7) (7) (9) (10) 
line 28: remove (9)
line 29: inorderTraversal
(2) (3) (4) (4) (4) (4) (5) (7) (7) (10) 
line 30: kNearestNeighbour 7 (3)
(2) (3) (4) (4) (4) (4) (5) 
line 31: inorderTraversal
(2) (3) (4) (4) (4) (4) (5) (7) (7) (10) 
line 32: insert (6)
line 33: inorderTraversal
(2) (3) (4) (4) (4) (4) (5) (6) (7) (7) (10) 
line 34: insert (7)
line 35: inorderTraversal
(2) (3) (4) (4) (4) (4) (5) (6) (7) (7) (7) (10) 
line 36: insert (2)
line 37: inorderTraversal
(2) (2) (3) (4) (4) (4) (4) (5) (6) (7) (7) (7) (10) 
line 38: kNearestNeighbour 5 (10)
(6) (7) (7) (7) (10) 
line 39: inorderTraversal
(2) (2) (3) (4) (4) (4) (4) (5) (6) (7) (7) (7) (10) 
line 40: insert (1)
line 41: inorderTraversal
(1) (2) (2) (3) (4) (4) (4) (4) (5) (6) (7) (7) (7) (10) 
line 42: insert (3)
line 43: inorderTraversal
(1) (2) (2) (3) (3) (4) (4) (4) (4) (5) (6) (7) (7) (7) (10) 
line 44: kNearestNeighbour 1 (9)
(10) 
line 45: inorderTraversal
(1) (2) (2) (3) (3) (4) (4) (4) (4) (5) (6) (7) (7) (7) (10) 
line 46: kNearestNeighbour 4 (10)
(7) (7) (7) (10) 
line 47: inorderTraversal
(1) (2) (2) (3) (3) (4) (4) (4) (4) (5) (6) (7) (7) (7) (10) 
line 48: nearestNeighbour (3)
(3) 
line 49: inorderTraversal
(1) (2) (2) (3) (3) (4) (4) (4) (4) (5) (6) (7) (7) (7) (10) 
line 50: kNearestNeighbour 7 (4)
(3) (3) (4) (4) (4) (4) (5) 
line 51: inorderTraversal
(1) (2) (2) (3) (3) (4) (4) (4) (4) (5) (6) (7) (7) (7) (10) 
line 52: search (7)
TRUE
line 53: inorderTraversal
(1) (2) (2) (3) (3) (4) (4) (4) (4) (5) (6) (7) (7) (7) (10) 
line 54: insert (3)
line 55: inorderTraversal
(1) (2) (2) (3) (3) (3) (4) (4) (4) (4) (5) (6) (7) (7) (7) (10) 
line 56: kNearestNeighbour 9 (1)
(1) (2) (2) (3) (3) (3) (4) (4) (4) 
line 57: inorderTraversal
(1) (2) (2) (3) (3) (3) (4) (4) (4) (4) (5) (6) (7) (7) (7) (10) 
line 58: nodeCount_height_leafCount
nodeCount=16;height=7;leafCount=6
line 59: inorderTraversal
(1) (2) (2) (3) (3) (3) (4) (4) (4) (4) (5) (6) (7) (7) (7) (10) 
line 60: insert (1)
line 61: inorderTraversal
(1) (1) (2) (2) (3) (3) (3) (4) (4) (4) (4) (5) (6) (7) (7) (7) (10) 
line 62: insert (4)
line 63: inorderTraversal
(1) (1) (2) (2) (3) (3) (3) (4) (4) (4) (4) (4) (5) (6) (7) (7) (7) (10) 
line 64: insert (5)
line 65: inorderTraversal
(1) (1) (2) (2) (3) (3) (3) (4) (4) (4) (4) (4) (5) (5) (6) (7) (7) (7) (10) 
line 66: clear
line 67: buildTree 17
(3) (10) (9) (3) (10) (10) (2) (5) (6) (5) (9) (2) (3) (6) (3) (3) (5) 
line 68: inorderTraversal
(2) (2) (3) (3) (3) (3) (3) (5) (5) (5) (6) (6) (9) (9) (10) (10) (10) 
line 69: nearestNeighbour (10)
(10) 
line 70: inorderTraversal
(2) (2) (3) (3) (3) (3) (3) (5) (5) (5) (6) (6) (9) (9) (10) (10) (10) 
line 71: nearestNeighbour (1)
(2) 
line 72: inorderTraversal
(2) (2) (3) (3) (3) (3) (3) (5) (5) (5) (6) (6) (9) (9) (10) (10) (10) 
line 73: insert (2)
line 74: inorderTraversal
(2) (2) (2) (3) (3) (3) (3) (3) (5) (5) (5) (6) (6) (9) (9) (10) (10) (10) 
line 75: search (3)
TRUE
line 76: inorderTraversal
(2) (2) (2) (3) (3) (3) (3) (3) (5) (5) (5) (6) (6) (9) (9) (10) (10) (10) 
line 77: insert (1)
line 78: inorderTraversal
(1) (2) (2) (2) (3) (3) (3) (3) (3) (5) (5) (5) (6) (6) (9) (9) (10) (10) (10) 
line 79: insert (6)
line 80: inorderTraversal
(1) (2) (2) (2) (3) (3) (3) (3) (3) (5) (5) (5) (6) (6) (6) (9) (9) (10) (10) (10) 
line 81: insert (1)
line 82: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (3) (3) (3) (5) (5) (5) (6) (6) (6) (9) (9) (10) (10) (10) 
line 83: insert (7)
line 84: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (3) (3) (3) (5) (5) (5) (6) (6) (6) (7) (9) (9) (10) (10) (10) 
line 85: kNearestNeighbour 7 (7)
(5) (5) (6) (6) (6) (7) (9) 
line 86: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (3) (3) (3) (5) (5) (5) (6) (6) (6) (7) (9) (9) (10) (10) (10) 
line 87: nearestNeighbour (5)
(5) 
line 88: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (3) (3) (3) (5) (5) (5) (6) (6) (6) (7) (9) (9) (10) (10) (10) 
line 89: remove (9)
line 90: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (3) (3) (3) (5) (5) (5) (6) (6) (6) (7) (9) (10) (10) (10) 
line 91: nearestNeighbour (5)
(5) 
line 92: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (3) (3) (3) (5) (5) (5) (6) (6) (6) (7) (9) (10) (10) (10) 
line 93: nearestNeighbour (10)
(10) 
line 94: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (3) (3) (3) (5) (5) (5) (6) (6) (6) (7) (9) (10) (10) (10) 
line 95: nearestNeighbour (8)
(7) 
line 96: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (3) (3) (3) (5) (5) (5) (6) (6) (6) (7) (9) (10) (10) (10) 
line 97: insert (4)
line 98: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (3) (3) (3) (4) (5) (5) (5) (6) (6) (6) (7) (9) (10) (10) (10) 
line 99: remove (1)
line 100: inorderTraversal
(1) (2) (2) (2) (3) (3) (3) (3) (3) (4) (5) (5) (5) (6) (6) (6) (7) (9) (10) (10) (10) 
line 101: insert (4)
line 102: inorderTraversal
(1) (2) (2) (2) (3) (3) (3) (3) (3) (4) (4) (5) (5) (5) (6) (6) (6) (7) (9) (10) (10) (10) 
line 103: insert (6)
line 104: inorderTraversal
(1) (2) (2) (2) (3) (3) (3) (3) (3) (4) (4) (5) (5) (5) (6) (6) (6) (6) (7) (9) (10) (10) (10) 
line 105: insert (3)
line 106: inorderTraversal
(1) (2) (2) (2) (3) (3) (3) (3) (3) (3) (4) (4) (5) (5) (5) (6) (6) (6) (6) (7) (9) (10) (10) (10) 
line 107: insert (9)
line 108: inorderTraversal
(1) (2) (2) (2) (3) (3) (3) (3) (3) (3) (4) (4) (5) (5) (5) (6) (6) (6) (6) (7) (9) (9) (10) (10) (10) 
line 109: nearestNeighbour (8)
(7) 
line 110: inorderTraversal
(1) (2) (2) (2) (3) (3) (3) (3) (3) (3) (4) (4) (5) (5) (5) (6) (6) (6) (6) (7) (9) (9) (10) (10) (10) 
line 111: insert (8)
line 112: inorderTraversal
(1) (2) (2) (2) (3) (3) (3) (3) (3) (3) (4) (4) (5) (5) (5) (6) (6) (6) (6) (7) (8) (9) (9) (10) (10) (10) 
line 113: clear
line 114: buildTree 5
(5) (8) (10) (5) (9) 
line 115: inorderTraversal
(5) (5) (8) (9) (10) 
line 116: kNearestNeighbour 5 (3)
(5) (5) (8) (9) (10) 
line 117: inorderTraversal
(5) (5) (8) (9) (10) 
line 118: kNearestNeighbour 10 (10)
(5) (5) (8) (9) (10) 
line 119: inorderTraversal
(5) (5) (8) (9) (10) 
line 120: remove (8)
line 121: inorderTraversal
(5) (5) (9) (10) 
line 122: kNearestNeighbour 7 (2)
(5) (5) (9) (10) 
line 123: inorderTraversal
(5) (5) (9) (10) 
line 124: kNearestNeighbour 5 (9)
(5) (5) (9) (10) 
line 125: inorderTraversal
(5) (5) (9) (10) 
line 126: nearestNeighbour (6)
(5) 
line 127: inorderTraversal
(5) (5) (9) (10) 
line 128: nearestNeighbour (8)
(9) 
line 129: inorderTraversal
(5) (5) (9) (10) 
line 130: nearestNeighbour (10)
(10) 
line 131: inorderTraversal
(5) (5) (9) (10) 
line 132: insert (8)
line 133: inorderTraversal
(5) (5) (8) (9) (10) 
line 134: insert (1)
line 135: inorderTraversal
(1) (5) (5) (8) (9) (10) 
line 136: insert (7)
line 137: inorderTraversal
(1) (5) (5) (7) (8) (9) (10) 
line 138: insert (10)
line 139: inorderTraversal
(1) (5) (5) (7) (8) (9) (10) (10) 
line 140: clear
line 141: buildTree 3
(5) (4) (8) 
line 142: inorderTraversal
(4) (5) (8) 
line 143: nearestNeighbour (7)
(8) 
line 144: inorderTraversal
(4) (5) (8) 
line 145: insert (5)
line 146: inorderTraversal
(4) (5) (5) (8) 
line 147: clear
line 148: buildTree 15
(2) (5) (6) (5) (2) (8) (1) (6) (8) (5) (1) (6) (1) (8) (3) 
line 149: inorderTraversal
(1) (1) (1) (2) (2) (3) (5) (5) (5) (6) (6) (6) (8) (8) (8) 
line 150: clear
line 151: buildTree 1
(6) 
line 152: inorderTraversal
(6) 
line 153: preorderTraversal
(6) 
line 154: inorderTraversal
(6) 
line 155: kNearestNeighbour 4 (1)
(6) 
line 156: inorderTraversal
(6) 
line 157: nearestNeighbour (6)
(6) 
line 158: inorderTraversal
(6) 
line 159: insert (4)
line 160: inorderTraversal
(4) (6) 
line 161: kNearestNeighbour 3 (9)
(4) (6) 
line 162: inorderTraversal
(4) (6) 
line 163: kNearestNeighbour 7 (1)
(4) (6) 
line 164: inorderTraversal
(4) (6) 
line 165: insert (1)
line 166: inorderTraversal
(1) (4) (6) 
line 167: kNearestNeighbour 4 (9)
(1) (4) (6) 
line 168: inorderTraversal
(1) (4) (6) 
line 169: clear
line 170: buildTree 10
(2) (4) (6) (1) (8) (9) (4) (5) (6) (7) 
line 171: inorderTraversal
(1) (2) (4) (4) (5) (6) (6) (7) (8) (9) 
line 172: insert (8)
line 173: inorderTraversal
(1) (2) (4) (4) (5) (6) (6) (7) (8) (8) (9) 
line 174: remove (2)
line 175: inorderTraversal
(1) (4) (4) (5) (6) (6) (7) (8) (8) (9) 
line 176: search (9)
TRUE
line 177: inorderTraversal
(1) (4) (4) (5) (6) (6) (7) (8) (8) (9) 
line 178: search (9)
TRUE
line 179: inorderTraversal
(1) (4) (4) (5) (6) (6) (7) (8) (8) (9) 
line 180: remove (7)
line 181: inorderTraversal
(1) (4) (4) (5) (6) (6) (8) (8) (9) 
line 182: insert (3)
line 183: inorderTraversal
(1) (3) (4) (4) (5) (6) (6) (8) (8) (9) 
line 184: clear
line 185: buildTree 19
(2) (3) (5) (10) (6) (5) (5) (4) (10) (3) (8) (9) (4) (8) (3) (8) (3) (9) (7) 
line 186: inorderTraversal
(2) (3) (3) (3) (3) (4) (4) (5) (5) (5) (6) (7) (8) (8) (8) (9) (9) (10) (10) 
line 187: insert (10)
line 188: inorderTraversal
(2) (3) (3) (3) (3) (4) (4) (5) (5) (5) (6) (7) (8) (8) (8) (9) (9) (10) (10) (10) 
line 189: kNearestNeighbour 5 (2)
(2) (3) (3) (3) (3) 
line 190: inorderTraversal
(2) (3) (3) (3) (3) (4) (4) (5) (5) (5) (6) (7) (8) (8) (8) (9) (9) (10) (10) (10) 
line 191: insert (8)
line 192: inorderTraversal
(2) (3) (3) (3) (3) (4) (4) (5) (5) (5) (6) (7) (8) (8) (8) (8) (9) (9) (10) (10) (10) 
line 193: insert (3)
line 194: inorderTraversal
(2) (3) (3) (3) (3) (3) (4) (4) (5) (5) (5) (6) (7) (8) (8) (8) (8) (9) (9) (10) (10) (10) 
line 195: insert (9)
line 196: inorderTraversal
(2) (3) (3) (3) (3) (3) (4) (4) (5) (5) (5) (6) (7) (8) (8) (8) (8) (9) (9) (9) (10) (10) (10) 
line 197: insert (1)
line 198: inorderTraversal
(1) (2) (3) (3) (3) (3) (3) (4) (4) (5) (5) (5) (6) (7) (8) (8) (8) (8) (9) (9) (9) (10) (10) (10) 
line 199: insert (6)
line 200: inorderTraversal
(1) (2) (3) (3) (3) (3) (3) (4) (4) (5) (5) (5) (6) (6) (7) (8) (8) (8) (8) (9) (9) (9) (10) (10) (10) 
line 201: insert (9)
line 202: inorderTraversal
(1) (2) (3) (3) (3) (3) (3) (4) (4) (5) (5) (5) (6) (6) (7) (8) (8) (8) (8) (9) (9) (9) (9) (10) (10) (10) 
line 203: nearestNeighbour (6)
(6) 
line 204: inorderTraversal
(1) (2) (3) (3) (3) (3) (3) (4) (4) (5) (5) (5) (6) (6) (7) (8) (8) (8) (8) (9) (9) (9) (9) (10) (10) (10) 
line 205: nearestNeighbour (10)
(10) 
line 206: inorderTraversal
(1) (2) (3) (3) (3) (3) (3) (4) (4) (5) (5) (5) (6) (6) (7) (8) (8) (8) (8) (9) (9) (9) (9) (10) (10) (10) 
line 207: kNearestNeighbour 8 (10)
(8) (9) (9) (9) (9) (10) (10) (10) 
line 208: inorderTraversal
(1) (2) (3) (3) (3) (3) (3) (4) (4) (5) (5) (5) (6) (6) (7) (8) (8) (8) (8) (9) (9) (9) (9) (10) (10) (10) 
line 209: kNearestNeighbour 9 (4)
(3) (3) (3) (3) (3) (4) (4) (5) (5) 
line 210: inorderTraversal
(1) (2) (3) (3) (3) (3) (3) (4) (4) (5) (5) (5) (6) (6) (7) (8) (8) (8) (8) (9) (9) (9) (9) (10) (10) (10) 
line 211: search (9)
TRUE
line 212: inorderTraversal
(1) (2) (3) (3) (3) (3) (3) (4) (4) (5) (5) (5) (6) (6) (7) (8) (8) (8) (8) (9) (9) (9) (9) (10) (10) (10) 
line 213: clear
line 214: buildTree 1
(9) 
line 215: inorderTraversal
(9) 
line 216: kNearestNeighbour 9 (5)
(9) 
line 217: inorderTraversal
(9) 
line 218: clear
line 219: buildTree 16
(10) (10) (3) (5) (5) (6) (9) (7) (3) (8) (3) (5) (9) (7) (6) (1) 
line 220: inorderTraversal
(1) (3) (3) (3) (5) (5) (5) (6) (6) (7) (7) (8) (9) (9) (10) (10) 
line 221: kNearestNeighbour 9 (4)
(1) (3) (3) (3) (5) (5) (5) (6) (6) 
line 222: inorderTraversal
(1) (3) (3) (3) (5) (5) (5) (6) (6) (7) (7) (8) (9) (9) (10) (10) 
line 223: preorderTraversal
(6) (3) (1) (5) (3) (3) (5) (5) (8) (7) (6) (7) (9) (10) (9) (10) 
line 224: inorderTraversal
(1) (3) (3) (3) (5) (5) (5) (6) (6) (7) (7) (8) (9) (9) (10) (10) 
line 225: insert (6)
line 226: inorderTraversal
(1) (3) (3) (3) (5) (5) (5) (6) (6) (6) (7) (7) (8) (9) (9) (10) (10) 
line 227: insert (2)
line 228: inorderTraversal
(1) (2) (3) (3) (3) (5) (5) (5) (6) (6) (6) (7) (7) (8) (9) (9) (10) (10) 
line 229: insert (5)
line 230: inorderTraversal
(1) (2) (3) (3) (3) (5) (5) (5) (5) (6) (6) (6) (7) (7) (8) (9) (9) (10) (10) 
line 231: nearestNeighbour (6)
(6) 
line 232: inorderTraversal
(1) (2) (3) (3) (3) (5) (5) (5) (5) (6) (6) (6) (7) (7) (8) (9) (9) (10) (10) 
line 233: clear
line 234: buildTree 16
(8) (1) (4) (3) (10) (4) (2) (10) (4) (9) (1) (1) (8) (6) (10) (7) 
line 235: inorderTraversal
(1) (1) (1) (2) (3) (4) (4) (4) (6) (7) (8) (8) (9) (10) (10) (10) 
line 236: preorderTraversal
(4) (1) (1) (2) (1) (3) (8) (4) (6) (4) (7) (10) (8) (9) (10) (10) 
line 237: inorderTraversal
(1) (1) (1) (2) (3) (4) (4) (4) (6) (7) (8) (8) (9) (10) (10) (10) 
line 238: kNearestNeighbour 7 (6)
(4) (4) (4) (6) (7) (8) (8) 
line 239: inorderTraversal
(1) (1) (1) (2) (3) (4) (4) (4) (6) (7) (8) (8) (9) (10) (10) (10) 
line 240: insert (10)
line 241: inorderTraversal
(1) (1) (1) (2) (3) (4) (4) (4) (6) (7) (8) (8) (9) (10) (10) (10) (10) 
line 242: clear
line 243: buildTree 5
(8) (8) (2) (5) (10) 
line 244: inorderTraversal
(2) (5) (8) (8) (10) 
line 245: remove (2)
line 246: inorderTraversal
(5) (8) (8) (10) 
line 247: insert (1)
line 248: inorderTraversal
(1) (5) (8) (8) (10) 
line 249: clear
line 250: buildTree 12
(10) (10) (3) (10) (6) (5) (4) (7) (9) (6) (4) (4) 
line 251: inorderTraversal
(3) (4) (4) (4) (5) (6) (6) (7) (9) (10) (10) (10) 
line 252: insert (10)
line 253: inorderTraversal
(3) (4) (4) (4) (5) (6) (6) (7) (9) (10) (10) (10) (10) 
line 254: insert (6)
line 255: inorderTraversal
(3) (4) (4) (4) (5) (6) (6) (6) (7) (9) (10) (10) (10) (10) 
line 256: nearestNeighbour (5)
(5) 
line 257: inorderTraversal
(3) (4) (4) (4) (5) (6) (6) (6) (7) (9) (10) (10) (10) (10) 
line 258: kNearestNeighbour 5 (7)
(6) (6) (6) (7) (9) 
line 259: inorderTraversal
(3) (4) (4) (4) (5) (6) (6) (6) (7) (9) (10) (10) (10) (10) 
line 260: clear
line 261: buildTree 18
(6) (4) (8) (4) (6) (3) (3) (10) (5) (10) (1) (10) (8) (3) (10) (7) (3) (7) 
line 262: inorderTraversal
(1) (3) (3) (3) (3) (4) (4) (5) (6) (6) (7) (7) (8) (8) (10) (10) (10) (10) 
line 263: insert (2)
line 264: inorderTraversal
(1) (2) (3) (3) (3) (3) (4) (4) (5) (6) (6) (7) (7) (8) (8) (10) (10) (10) (10) 
line 265: nearestNeighbour (8)
(8) 
line 266: inorderTraversal
(1) (2) (3) (3) (3) (3) (4) (4) (5) (6) (6) (7) (7) (8) (8) (10) (10) (10) (10) 
line 267: insert (4)
line 268: inorderTraversal
(1) (2) (3) (3) (3) (3) (4) (4) (4) (5) (6) (6) (7) (7) (8) (8) (10) (10) (10) (10) 
line 269: insert (6)
line 270: inorderTraversal
(1) (2) (3) (3) (3) (3) (4) (4) (4) (5) (6) (6) (6) (7) (7) (8) (8) (10) (10) (10) (10) 
line 271: kNearestNeighbour 2 (9)
(8) (10) 
line 272: inorderTraversal
(1) (2) (3) (3) (3) (3) (4) (4) (4) (5) (6) (6) (6) (7) (7) (8) (8) (10) (10) (10) (10) 
line 273: insert (4)
line 274: inorderTraversal
(1) (2) (3) (3) (3) (3) (4) (4) (4) (4) (5) (6) (6) (6) (7) (7) (8) (8) (10) (10) (10) (10) 
line 275: clear
line 276: buildTree 1
(5) 
line 277: inorderTraversal
(5) 
line 278: remove (5)
line 279: inorderTraversal

line 280: search (5)
FALSE
line 281: inorderTraversal

line 282: nearestNeighbour (8)

line 283: inorderTraversal

line 284: insert (10)
line 285: inorderTraversal
(10) 
line 286: insert (10)
line 287: inorderTraversal
(10) (10) 
line 288: insert (8)
line 289: inorderTraversal
(8) (10) (10) 
line 290: insert (4)
line 291: inorderTraversal
(4) (8) (10) (10) 
line 292: nearestNeighbour (7)
(8) 
line 293: inorderTraversal
(4) (8) (10) (10) 
line 294: preorderTraversal
(10) (8) (4) (10) 
line 295: inorderTraversal
(4) (8) (10) (10) 
line 296: postorderTraversal
(4) (8) (10) (10) 
line 297: inorderTraversal
(4) (8) (10) (10) 
line 298: insert (10)
line 299: inorderTraversal
(4) (8) (10) (10) (10) 
line 300: insert (3)
line 301: inorderTraversal
(3) (4) (8) (10) (10) (10) 
line 302: clear
line 303: buildTree 5
(1) (6) (6) (8) (9) 
line 304: inorderTraversal
(1) (6) (6) (8) (9) 
line 305: remove (4)
line 306: inorderTraversal
(1) (6) (6) (8) (9) 
line 307: insert (1)
line 308: inorderTraversal
(1) (1) (6) (6) (8) (9) 
line 309: insert (10)
line 310: inorderTraversal
(1) (1) (6) (6) (8) (9) (10) 
line 311: insert (1)
line 312: inorderTraversal
(1) (1) (1) (6) (6) (8) (9) (10) 
line 313: insert (9)
line 314: inorderTraversal
(1) (1) (1) (6) (6) (8) (9) (9) (10) 
line 315: remove (6)
line 316: inorderTraversal
(1) (1) (1) (6) (8) (9) (9) (10) 
line 317: insert (10)
line 318: inorderTraversal
(1) (1) (1) (6) (8) (9) (9) (10) (10) 
line 319: insert (3)
line 320: inorderTraversal
(1) (1) (1) (3) (6) (8) (9) (9) (10) (10) 
line 321: nearestNeighbour (8)
(8) 
line 322: inorderTraversal
(1) (1) (1) (3) (6) (8) (9) (9) (10) (10) 
line 323: insert (3)
line 324: inorderTraversal
(1) (1) (1) (3) (3) (6) (8) (9) (9) (10) (10) 
line 325: kNearestNeighbour 7 (10)
(3) (6) (8) (9) (9) (10) (10) 
line 326: inorderTraversal
(1) (1) (1) (3) (3) (6) (8) (9) (9) (10) (10) 
line 327: clear
line 328: buildTree 14
(3) (2) (3) (8) (4) (1) (8) (6) (4) (3) (6) (10) (10) (1) 
line 329: inorderTraversal
(1) (1) (2) (3) (3) (3) (4) (4) (6) (6) (8) (8) (10) (10) 
line 330: insert (10)
line 331: inorderTraversal
(1) (1) (2) (3) (3) (3) (4) (4) (6) (6) (8) (8) (10) (10) (10) 
line 332: insert (3)
line 333: inorderTraversal
(1) (1) (2) (3) (3) (3) (3) (4) (4) (6) (6) (8) (8) (10) (10) (10) 
line 334: kNearestNeighbour 2 (3)
(3) (3) 
line 335: inorderTraversal
(1) (1) (2) (3) (3) (3) (3) (4) (4) (6) (6) (8) (8) (10) (10) (10) 
line 336: kNearestNeighbour 9 (6)
(3) (3) (3) (4) (4) (6) (6) (8) (8) 
line 337: inorderTraversal
(1) (1) (2) (3) (3) (3) (3) (4) (4) (6) (6) (8) (8) (10) (10) (10) 
line 338: insert (10)
line 339: inorderTraversal
(1) (1) (2) (3) (3) (3) (3) (4) (4) (6) (6) (8) (8) (10) (10) (10) (10) 
line 340: nearestNeighbour (2)
(2) 
line 341: inorderTraversal
(1) (1) (2) (3) (3) (3) (3) (4) (4) (6) (6) (8) (8) (10) (10) (10) (10) 
line 342: insert (3)
line 343: inorderTraversal
(1) (1) (2) (3) (3) (3) (3) (3) (4) (4) (6) (6) (8) (8) (10) (10) (10) (10) 
line 344: nodeCount_height_leafCount
nodeCount=18;height=7;leafCount=6
line 345: inorderTraversal
(1) (1) (2) (3) (3) (3) (3) (3) (4) (4) (6) (6) (8) (8) (10) (10) (10) (10) 
line 346: remove (8)
line 347: inorderTraversal
(1) (1) (2) (3) (3) (3) (3) (3) (4) (4) (6) (6) (8) (10) (10) (10) (10) 
line 348: insert (4)
line 349: inorderTraversal
(1) (1) (2) (3) (3) (3) (3) (3) (4) (4) (4) (6) (6) (8) (10) (10) (10) (10) 
line 350: remove (4)
line 351: inorderTraversal
(1) (1) (2) (3) (3) (3) (3) (3) (4) (4) (6) (6) (8) (10) (10) (10) (10) 
line 352: insert (10)
line 353: inorderTraversal
(1) (1) (2) (3) (3) (3) (3) (3) (4) (4) (6) (6) (8) (10) (10) (10) (10) (10) 
line 354: kNearestNeighbour 3 (10)
(10) (10) (10) 
line 355: inorderTraversal
(1) (1) (2) (3) (3) (3) (3) (3) (4) (4) (6) (6) (8) (10) (10) (10) (10) (10) 
line 356: kNearestNeighbour 9 (9)
(4) (6) (6) (8) (10) (10) (10) (10) (10) 
line 357: inorderTraversal
(1) (1) (2) (3) (3) (3) (3) (3) (4) (4) (6) (6) (8) (10) (10) (10) (10) (10) 
line 358: insert (6)
line 359: inorderTraversal
(1) (1) (2) (3) (3) (3) (3) (3) (4) (4) (6) (6) (6) (8) (10) (10) (10) (10) (10) 
line 360: remove (7)
line 361: inorderTraversal
(1) (1) (2) (3) (3) (3) (3) (3) (4) (4) (6) (6) (6) (8) (10) (10) (10) (10) (10) 
line 362: kNearestNeighbour 2 (4)
(4) (4) 
line 363: inorderTraversal
(1) (1) (2) (3) (3) (3) (3) (3) (4) (4) (6) (6) (6) (8) (10) (10) (10) (10) (10) 
line 364: nearestNeighbour (4)
(4) 
line 365: inorderTraversal
(1) (1) (2) (3) (3) (3) (3) (3) (4) (4) (6) (6) (6) (8) (10) (10) (10) (10) (10) 
line 366: nearestNeighbour (7)
(6) 
line 367: inorderTraversal
(1) (1) (2) (3) (3) (3) (3) (3) (4) (4) (6) (6) (6) (8) (10) (10) (10) (10) (10) 
line 368: remove (10)
line 369: inorderTraversal
(1) (1) (2) (3) (3) (3) (3) (3) (4) (4) (6) (6) (6) (8) (10) (10) (10) (10) 
line 370: insert (2)
line 371: inorderTraversal
(1) (1) (2) (2) (3) (3) (3) (3) (3) (4) (4) (6) (6) (6) (8) (10) (10) (10) (10) 
line 372: nearestNeighbour (4)
(4) 
line 373: inorderTraversal
(1) (1) (2) (2) (3) (3) (3) (3) (3) (4) (4) (6) (6) (6) (8) (10) (10) (10) (10) 
line 374: nearestNeighbour (6)
(6) 
line 375: inorderTraversal
(1) (1) (2) (2) (3) (3) (3) (3) (3) (4) (4) (6) (6) (6) (8) (10) (10) (10) (10) 
line 376: insert (2)
line 377: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (3) (3) (3) (4) (4) (6) (6) (6) (8) (10) (10) (10) (10) 
line 378: nearestNeighbour (4)
(4) 
line 379: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (3) (3) (3) (4) (4) (6) (6) (6) (8) (10) (10) (10) (10) 
line 380: search (3)
TRUE
line 381: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (3) (3) (3) (4) (4) (6) (6) (6) (8) (10) (10) (10) (10) 
line 382: kNearestNeighbour 4 (4)
(3) (3) (4) (4) 
line 383: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (3) (3) (3) (4) (4) (6) (6) (6) (8) (10) (10) (10) (10) 
line 384: kNearestNeighbour 4 (2)
(2) (2) (2) (3) 
line 385: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (3) (3) (3) (4) (4) (6) (6) (6) (8) (10) (10) (10) (10) 
line 386: kNearestNeighbour 1 (3)
(3) 
line 387: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (3) (3) (3) (4) (4) (6) (6) (6) (8) (10) (10) (10) (10) 
line 388: search (10)
TRUE
line 389: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (3) (3) (3) (4) (4) (6) (6) (6) (8) (10) (10) (10) (10) 
line 390: remove (10)
line 391: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (3) (3) (3) (4) (4) (6) (6) (6) (8) (10) (10) (10) 
line 392: search (2)
TRUE
line 393: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (3) (3) (3) (4) (4) (6) (6) (6) (8) (10) (10) (10) 
line 394: kNearestNeighbour 5 (1)
(1) (1) (2) (2) (2) 
line 395: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (3) (3) (3) (4) (4) (6) (6) (6) (8) (10) (10) (10) 
line 396: insert (9)
line 397: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (3) (3) (3) (4) (4) (6) (6) (6) (8) (9) (10) (10) (10) 
line 398: insert (6)
line 399: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (3) (3) (3) (4) (4) (6) (6) (6) (6) (8) (9) (10) (10) (10) 
line 400: insert (7)
line 401: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (3) (3) (3) (4) (4) (6) (6) (6) (6) (7) (8) (9) (10) (10) (10) 
line 402: remove (6)
line 403: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (3) (3) (3) (4) (4) (6) (6) (6) (7) (8) (9) (10) (10) (10) 
line 404: nearestNeighbour (10)
(10) 
line 405: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (3) (3) (3) (4) (4) (6) (6) (6) (7) (8) (9) (10) (10) (10) 
line 406: insert (2)
line 407: inorderTraversal
(1) (1) (2) (2) (2) (2) (3) (3) (3) (3) (3) (4) (4) (6) (6) (6) (7) (8) (9) (10) (10) (10) 
line 408: insert (7)
line 409: inorderTraversal
(1) (1) (2) (2) (2) (2) (3) (3) (3) (3) (3) (4) (4) (6) (6) (6) (7) (7) (8) (9) (10) (10) (10) 
line 410: kNearestNeighbour 5 (6)
(6) (6) (6) (7) (7) 
line 411: inorderTraversal
(1) (1) (2) (2) (2) (2) (3) (3) (3) (3) (3) (4) (4) (6) (6) (6) (7) (7) (8) (9) (10) (10) (10) 
line 412: clear
line 413: buildTree 11
(9) (7) (5) (9) (4) (3) (2) (6) (6) (10) (10) 
line 414: inorderTraversal
(2) (3) (4) (5) (6) (6) (7) (9) (9) (10) (10) 
line 415: insert (9)
line 416: inorderTraversal
(2) (3) (4) (5) (6) (6) (7) (9) (9) (9) (10) (10) 
line 417: clear
line 418: buildTree 7
(2) (9) (2) (3) (8) (3) (2) 
line 419: inorderTraversal
(2) (2) (2) (3) (3) (8) (9) 
line 420: kNearestNeighbour 9 (9)
(2) (2) (2) (3) (3) (8) (9) 
line 421: inorderTraversal
(2) (2) (2) (3) (3) (8) (9) 
line 422: nodeCount_height_leafCount
nodeCount=7;height=4;leafCount=3
line 423: inorderTraversal
(2) (2) (2) (3) (3) (8) (9) 
line 424: preorderTraversal
(3) (2) (2) (2) (8) (3) (9) 
line 425: postorderTraversal
(2) (2) (2) (3) (9) (8) (3) 
line 426: clear
