line 1: k=1
line 2: clear
line 3: buildTree 6
(2) (6) (1) (3) (4) (8) 
line 4: inorderTraversal
(1) (2) (3) (4) (6) (8) 
line 5: nearestNeighbour (4)
(4) 
line 6: inorderTraversal
(1) (2) (3) (4) (6) (8) 
line 7: nodeCount_height_leafCount
nodeCount=6;height=3;leafCount=3
line 8: inorderTraversal
(1) (2) (3) (4) (6) (8) 
line 9: search (6)
TRUE
line 10: inorderTraversal
(1) (2) (3) (4) (6) (8) 
line 11: insert (2)
line 12: inorderTraversal
(1) (2) (2) (3) (4) (6) (8) 
line 13: clear
line 14: buildTree 18
(2) (5) (8) (7) (9) (7) (2) (10) (5) (2) (9) (5) (4) (1) (9) (3) (8) (3) 
line 15: inorderTraversal
(1) (2) (2) (2) (3) (3) (4) (5) (5) (5) (7) (7) (8) (8) (9) (9) (9) (10) 
line 16: nearestNeighbour (7)
(7) 
line 17: inorderTraversal
(1) (2) (2) (2) (3) (3) (4) (5) (5) (5) (7) (7) (8) (8) (9) (9) (9) (10) 
line 18: kNearestNeighbour 1 (8)
(8) 
line 19: inorderTraversal
(1) (2) (2) (2) (3) (3) (4) (5) (5) (5) (7) (7) (8) (8) (9) (9) (9) (10) 
line 20: insert (1)
line 21: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (4) (5) (5) (5) (7) (7) (8) (8) (9) (9) (9) (10) 
line 22: remove (9)
line 23: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (4) (5) (5) (5) (7) (7) (8) (8) (9) (9) (10) 
line 24: kNearestNeighbour 10 (7)
(5) (5) (5) (7) (7) (8) (8) (9) (9) (10) 
line 25: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (4) (5) (5) (5) (7) (7) (8) (8) (9) (9) (10) 
line 26: kNearestNeighbour 3 (5)
(5) (5) (5) 
line 27: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (4) (5) (5) (5) (7) (7) (8) (8) (9) (9) (10) 
line 28: remove (9)
line 29: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (4) (5) (5) (5) (7) (7) (8) (8) (9) (10) 
line 30: kNearestNeighbour 10 (8)
(4) (5) (5) (5) (7) (7) (8) (8) (9) (10) 
line 31: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (4) (5) (5) (5) (7) (7) (8) (8) (9) (10) 
line 32: nearestNeighbour (10)
(10) 
line 33: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (4) (5) (5) (5) (7) (7) (8) (8) (9) (10) 
line 34: kNearestNeighbour 5 (7)
(5) (7) (7) (8) (8) 
line 35: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (4) (5) (5) (5) (7) (7) (8) (8) (9) (10) 
line 36: kNearestNeighbour 1 (3)
(3) 
line 37: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (4) (5) (5) (5) (7) (7) (8) (8) (9) (10) 
line 38: insert (4)
line 39: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (4) (4) (5) (5) (5) (7) (7) (8) (8) (9) (10) 
line 40: insert (8)
line 41: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (4) (4) (5) (5) (5) (7) (7) (8) (8) (8) (9) (10) 
line 42: nearestNeighbour (8)
(8) 
line 43: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (4) (4) (5) (5) (5) (7) (7) (8) (8) (8) (9) (10) 
line 44: nearestNeighbour (8)
(8) 
line 45: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (4) (4) (5) (5) (5) (7) (7) (8) (8) (8) (9) (10) 
line 46: nearestNeighbour (4)
(4) 
line 47: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (4) (4) (5) (5) (5) (7) (7) (8) (8) (8) (9) (10) 
line 48: remove (1)
line 49: inorderTraversal
(1) (2) (2) (2) (3) (3) (4) (4) (5) (5) (5) (7) (7) (8) (8) (8) (9) (10) 
line 50: insert (8)
line 51: inorderTraversal
(1) (2) (2) (2) (3) (3) (4) (4) (5) (5) (5) (7) (7) (8) (8) (8) (8) (9) (10) 
line 52: clear
line 53: buildTree 11
(8) (2) (5) (3) (8) (8) (4) (7) (5) (8) (5) 
line 54: inorderTraversal
(2) (3) (4) (5) (5) (5) (7) (8) (8) (8) (8) 
line 55: insert (8)
line 56: inorderTraversal
(2) (3) (4) (5) (5) (5) (7) (8) (8) (8) (8) (8) 
line 57: insert (5)
line 58: inorderTraversal
(2) (3) (4) (5) (5) (5) (5) (7) (8) (8) (8) (8) (8) 
line 59: kNearestNeighbour 5 (8)
(8) (8) (8) (8) (8) 
line 60: inorderTraversal
(2) (3) (4) (5) (5) (5) (5) (7) (8) (8) (8) (8) (8) 
line 61: insert (9)
line 62: inorderTraversal
(2) (3) (4) (5) (5) (5) (5) (7) (8) (8) (8) (8) (8) (9) 
line 63: insert (3)
line 64: inorderTraversal
(2) (3) (3) (4) (5) (5) (5) (5) (7) (8) (8) (8) (8) (8) (9) 
line 65: insert (2)
line 66: inorderTraversal
(2) (2) (3) (3) (4) (5) (5) (5) (5) (7) (8) (8) (8) (8) (8) (9) 
line 67: insert (1)
line 68: inorderTraversal
(1) (2) (2) (3) (3) (4) (5) (5) (5) (5) (7) (8) (8) (8) (8) (8) (9) 
line 69: postorderTraversal
(1) (2) (2) (3) (4) (3) (5) (7) (5) (5) (9) (8) (8) (8) (8) (8) (5) 
line 70: inorderTraversal
(1) (2) (2) (3) (3) (4) (5) (5) (5) (5) (7) (8) (8) (8) (8) (8) (9) 
line 71: insert (8)
line 72: inorderTraversal
(1) (2) (2) (3) (3) (4) (5) (5) (5) (5) (7) (8) (8) (8) (8) (8) (8) (9) 
line 73: remove (7)
line 74: inorderTraversal
(1) (2) (2) (3) (3) (4) (5) (5) (5) (5) (8) (8) (8) (8) (8) (8) (9) 
line 75: remove (5)
line 76: inorderTraversal
(1) (2) (2) (3) (3) (4) (5) (5) (5) (8) (8) (8) (8) (8) (8) (9) 
line 77: insert (7)
line 78: inorderTraversal
(1) (2) (2) (3) (3) (4) (5) (5) (5) (7) (8) (8) (8) (8) (8) (8) (9) 
line 79: nearestNeighbour (7)
(7) 
line 80: inorderTraversal
(1) (2) (2) (3) (3) (4) (5) (5) (5) (7) (8) (8) (8) (8) (8) (8) (9) 
line 81: insert (6)
line 82: inorderTraversal
(1) (2) (2) (3) (3) (4) (5) (5) (5) (6) (7) (8) (8) (8) (8) (8) (8) (9) 
line 83: nearestNeighbour (8)
(8) 
line 84: inorderTraversal
(1) (2) (2) (3) (3) (4) (5) (5) (5) (6) (7) (8) (8) (8) (8) (8) (8) (9) 
line 85: nearestNeighbour (4)
(4) 
line 86: inorderTraversal
(1) (2) (2) (3) (3) (4) (5) (5) (5) (6) (7) (8) (8) (8) (8) (8) (8) (9) 
line 87: insert (5)
line 88: inorderTraversal
(1) (2) (2) (3) (3) (4) (5) (5) (5) (5) (6) (7) (8) (8) (8) (8) (8) (8) (9) 
line 89: remove (5)
line 90: inorderTraversal
(1) (2) (2) (3) (3) (4) (5) (5) (5) (6) (7) (8) (8) (8) (8) (8) (8) (9) 
line 91: insert (1)
line 92: inorderTraversal
(1) (1) (2) (2) (3) (3) (4) (5) (5) (5) (6) (7) (8) (8) (8) (8) (8) (8) (9) 
line 93: insert (6)
line 94: inorderTraversal
(1) (1) (2) (2) (3) (3) (4) (5) (5) (5) (6) (6) (7) (8) (8) (8) (8) (8) (8) (9) 
line 95: nodeCount_height_leafCount
nodeCount=20;height=8;leafCount=5
line 96: inorderTraversal
(1) (1) (2) (2) (3) (3) (4) (5) (5) (5) (6) (6) (7) (8) (8) (8) (8) (8) (8) (9) 
line 97: insert (6)
line 98: inorderTraversal
(1) (1) (2) (2) (3) (3) (4) (5) (5) (5) (6) (6) (6) (7) (8) (8) (8) (8) (8) (8) (9) 
line 99: clear
line 100: buildTree 11
(7) (2) (4) (10) (9) (10) (7) (4) (1) (6) (4) 
line 101: inorderTraversal
(1) (2) (4) (4) (4) (6) (7) (7) (9) (10) (10) 
line 102: nearestNeighbour (8)
(7) 
line 103: inorderTraversal
(1) (2) (4) (4) (4) (6) (7) (7) (9) (10) (10) 
line 104: kNearestNeighbour 1 (1)
(1) 
line 105: inorderTraversal
(1) (2) (4) (4) (4) (6) (7) (7) (9) (10) (10) 
line 106: insert (1)
line 107: inorderTraversal
(1) (1) (2) (4) (4) (4) (6) (7) (7) (9) (10) (10) 
line 108: insert (5)
line 109: inorderTraversal
(1) (1) (2) (4) (4) (4) (5) (6) (7) (7) (9) (10) (10) 
line 110: insert (7)
line 111: inorderTraversal
(1) (1) (2) (4) (4) (4) (5) (6) (7) (7) (7) (9) (10) (10) 
line 112: kNearestNeighbour 8 (8)
(5) (6) (7) (7) (7) (9) (10) (10) 
line 113: inorderTraversal
(1) (1) (2) (4) (4) (4) (5) (6) (7) (7) (7) (9) (10) (10) 
line 114: insert (3)
line 115: inorderTraversal
(1) (1) (2) (3) (4) (4) (4) (5) (6) (7) (7) (7) (9) (10) (10) 
line 116: insert (10)
line 117: inorderTraversal
(1) (1) (2) (3) (4) (4) (4) (5) (6) (7) (7) (7) (9) (10) (10) (10) 
line 118: insert (7)
line 119: inorderTraversal
(1) (1) (2) (3) (4) (4) (4) (5) (6) (7) (7) (7) (7) (9) (10) (10) (10) 
line 120: insert (10)
line 121: inorderTraversal
(1) (1) (2) (3) (4) (4) (4) (5) (6) (7) (7) (7) (7) (9) (10) (10) (10) (10) 
line 122: kNearestNeighbour 4 (1)
(1) (1) (2) (3) 
line 123: inorderTraversal
(1) (1) (2) (3) (4) (4) (4) (5) (6) (7) (7) (7) (7) (9) (10) (10) (10) (10) 
line 124: insert (6)
line 125: inorderTraversal
(1) (1) (2) (3) (4) (4) (4) (5) (6) (6) (7) (7) (7) (7) (9) (10) (10) (10) (10) 
line 126: nearestNeighbour (6)
(6) 
line 127: inorderTraversal
(1) (1) (2) (3) (4) (4) (4) (5) (6) (6) (7) (7) (7) (7) (9) (10) (10) (10) (10) 
line 128: kNearestNeighbour 7 (8)
(6) (7) (7) (7) (7) (9) (10) 
line 129: inorderTraversal
(1) (1) (2) (3) (4) (4) (4) (5) (6) (6) (7) (7) (7) (7) (9) (10) (10) (10) (10) 
line 130: nearestNeighbour (10)
(10) 
line 131: inorderTraversal
(1) (1) (2) (3) (4) (4) (4) (5) (6) (6) (7) (7) (7) (7) (9) (10) (10) (10) (10) 
line 132: nearestNeighbour (9)
(9) 
line 133: inorderTraversal
(1) (1) (2) (3) (4) (4) (4) (5) (6) (6) (7) (7) (7) (7) (9) (10) (10) (10) (10) 
line 134: insert (3)
line 135: inorderTraversal
(1) (1) (2) (3) (3) (4) (4) (4) (5) (6) (6) (7) (7) (7) (7) (9) (10) (10) (10) (10) 
line 136: nearestNeighbour (4)
(4) 
line 137: inorderTraversal
(1) (1) (2) (3) (3) (4) (4) (4) (5) (6) (6) (7) (7) (7) (7) (9) (10) (10) (10) (10) 
line 138: insert (2)
line 139: inorderTraversal
(1) (1) (2) (2) (3) (3) (4) (4) (4) (5) (6) (6) (7) (7) (7) (7) (9) (10) (10) (10) (10) 
line 140: insert (4)
line 141: inorderTraversal
(1) (1) (2) (2) (3) (3) (4) (4) (4) (4) (5) (6) (6) (7) (7) (7) (7) (9) (10) (10) (10) (10) 
line 142: insert (4)
line 143: inorderTraversal
(1) (1) (2) (2) (3) (3) (4) (4) (4) (4) (4) (5) (6) (6) (7) (7) (7) (7) (9) (10) (10) (10) (10) 
line 144: remove (2)
line 145: inorderTraversal
(1) (1) (2) (3) (3) (4) (4) (4) (4) (4) (5) (6) (6) (7) (7) (7) (7) (9) (10) (10) (10) (10) 
line 146: insert (5)
line 147: inorderTraversal
(1) (1) (2) (3) (3) (4) (4) (4) (4) (4) (5) (5) (6) (6) (7) (7) (7) (7) (9) (10) (10) (10) (10) 
line 148: clear
line 149: buildTree 12
(5) (6) (3) (9) (4) (9) (10) (5) (8) (4) (7) (3) 
line 150: inorderTraversal
(3) (3) (4) (4) (5) (5) (6) (7) (8) (9) (9) (10) 
line 151: insert (4)
line 152: inorderTraversal
(3) (3) (4) (4) (4) (5) (5) (6) (7) (8) (9) (9) (10) 
line 153: kNearestNeighbour 2 (2)
(3) (3) 
line 154: inorderTraversal
(3) (3) (4) (4) (4) (5) (5) (6) (7) (8) (9) (9) (10) 
line 155: nodeCount_height_leafCount
nodeCount=13;height=5;leafCount=5
line 156: inorderTraversal
(3) (3) (4) (4) (4) (5) (5) (6) (7) (8) (9) (9) (10) 
line 157: insert (3)
line 158: inorderTraversal
(3) (3) (3) (4) (4) (4) (5) (5) (6) (7) (8) (9) (9) (10) 
line 159: nearestNeighbour (2)
(3) 
line 160: inorderTraversal
(3) (3) (3) (4) (4) (4) (5) (5) (6) (7) (8) (9) (9) (10) 
line 161: search (9)
TRUE
line 162: inorderTraversal
(3) (3) (3) (4) (4) (4) (5) (5) (6) (7) (8) (9) (9) (10) 
line 163: nearestNeighbour (1)
(3) 
line 164: inorderTraversal
(3) (3) (3) (4) (4) (4) (5) (5) (6) (7) (8) (9) (9) (10) 
line 165: kNearestNeighbour 3 (1)
(3) (3) (3) 
line 166: inorderTraversal
(3) (3) (3) (4) (4) (4) (5) (5) (6) (7) (8) (9) (9) (10) 
line 167: insert (5)
line 168: inorderTraversal
(3) (3) (3) (4) (4) (4) (5) (5) (5) (6) (7) (8) (9) (9) (10) 
line 169: nearestNeighbour (7)
(7) 
line 170: inorderTraversal
(3) (3) (3) (4) (4) (4) (5) (5) (5) (6) (7) (8) (9) (9) (10) 
line 171: remove (5)
line 172: inorderTraversal
(3) (3) (3) (4) (4) (4) (5) (5) (6) (7) (8) (9) (9) (10) 
line 173: kNearestNeighbour 9 (3)
(3) (3) (3) (4) (4) (4) (5) (5) (6) 
line 174: inorderTraversal
(3) (3) (3) (4) (4) (4) (5) (5) (6) (7) (8) (9) (9) (10) 
line 175: nearestNeighbour (6)
(6) 
line 176: inorderTraversal
(3) (3) (3) (4) (4) (4) (5) (5) (6) (7) (8) (9) (9) (10) 
line 177: insert (9)
line 178: inorderTraversal
(3) (3) (3) (4) (4) (4) (5) (5) (6) (7) (8) (9) (9) (9) (10) 
line 179: preorderTraversal
(5) (3) (4) (3) (3) (4) (4) (8) (6) (5) (7) (9) (9) (10) (9) 
line 180: inorderTraversal
(3) (3) (3) (4) (4) (4) (5) (5) (6) (7) (8) (9) (9) (9) (10) 
line 181: insert (4)
line 182: inorderTraversal
(3) (3) (3) (4) (4) (4) (4) (5) (5) (6) (7) (8) (9) (9) (9) (10) 
line 183: kNearestNeighbour 7 (9)
(6) (7) (8) (9) (9) (9) (10) 
line 184: inorderTraversal
(3) (3) (3) (4) (4) (4) (4) (5) (5) (6) (7) (8) (9) (9) (9) (10) 
line 185: insert (4)
line 186: inorderTraversal
(3) (3) (3) (4) (4) (4) (4) (4) (5) (5) (6) (7) (8) (9) (9) (9) (10) 
line 187: kNearestNeighbour 9 (9)
(5) (5) (6) (7) (8) (9) (9) (9) (10) 
line 188: inorderTraversal
(3) (3) (3) (4) (4) (4) (4) (4) (5) (5) (6) (7) (8) (9) (9) (9) (10) 
line 189: nearestNeighbour (3)
(3) 
line 190: inorderTraversal
(3) (3) (3) (4) (4) (4) (4) (4) (5) (5) (6) (7) (8) (9) (9) (9) (10) 
line 191: nearestNeighbour (2)
(3) 
line 192: inorderTraversal
(3) (3) (3) (4) (4) (4) (4) (4) (5) (5) (6) (7) (8) (9) (9) (9) (10) 
line 193: insert (6)
line 194: inorderTraversal
(3) (3) (3) (4) (4) (4) (4) (4) (5) (5) (6) (6) (7) (8) (9) (9) (9) (10) 
line 195: insert (7)
line 196: inorderTraversal
(3) (3) (3) (4) (4) (4) (4) (4) (5) (5) (6) (6) (7) (7) (8) (9) (9) (9) (10) 
line 197: nearestNeighbour (10)
(10) 
line 198: inorderTraversal
(3) (3) (3) (4) (4) (4) (4) (4) (5) (5) (6) (6) (7) (7) (8) (9) (9) (9) (10) 
line 199: insert (10)
line 200: inorderTraversal
(3) (3) (3) (4) (4) (4) (4) (4) (5) (5) (6) (6) (7) (7) (8) (9) (9) (9) (10) (10) 
line 201: nearestNeighbour (4)
(4) 
line 202: inorderTraversal
(3) (3) (3) (4) (4) (4) (4) (4) (5) (5) (6) (6) (7) (7) (8) (9) (9) (9) (10) (10) 
line 203: insert (8)
line 204: inorderTraversal
(3) (3) (3) (4) (4) (4) (4) (4) (5) (5) (6) (6) (7) (7) (8) (8) (9) (9) (9) (10) (10) 
line 205: insert (10)
line 206: inorderTraversal
(3) (3) (3) (4) (4) (4) (4) (4) (5) (5) (6) (6) (7) (7) (8) (8) (9) (9) (9) (10) (10) (10) 
line 207: insert (3)
line 208: inorderTraversal
(3) (3) (3) (3) (4) (4) (4) (4) (4) (5) (5) (6) (6) (7) (7) (8) (8) (9) (9) (9) (10) (10) (10) 
line 209: search (10)
TRUE
line 210: inorderTraversal
(3) (3) (3) (3) (4) (4) (4) (4) (4) (5) (5) (6) (6) (7) (7) (8) (8) (9) (9) (9) (10) (10) (10) 
line 211: insert (10)
line 212: inorderTraversal
(3) (3) (3) (3) (4) (4) (4) (4) (4) (5) (5) (6) (6) (7) (7) (8) (8) (9) (9) (9) (10) (10) (10) (10) 
line 213: nearestNeighbour (10)
(10) 
line 214: inorderTraversal
(3) (3) (3) (3) (4) (4) (4) (4) (4) (5) (5) (6) (6) (7) (7) (8) (8) (9) (9) (9) (10) (10) (10) (10) 
line 215: clear
line 216: buildTree 6
(4) (3) (2) (1) (1) (7) 
line 217: inorderTraversal
(1) (1) (2) (3) (4) (7) 
line 218: nearestNeighbour (2)
(2) 
line 219: inorderTraversal
(1) (1) (2) (3) (4) (7) 
line 220: kNearestNeighbour 7 (1)
(1) (1) (2) (3) (4) (7) 
line 221: inorderTraversal
(1) (1) (2) (3) (4) (7) 
line 222: insert (7)
line 223: inorderTraversal
(1) (1) (2) (3) (4) (7) (7) 
line 224: insert (6)
line 225: inorderTraversal
(1) (1) (2) (3) (4) (6) (7) (7) 
line 226: kNearestNeighbour 2 (2)
(2) (3) 
line 227: inorderTraversal
(1) (1) (2) (3) (4) (6) (7) (7) 
line 228: nearestNeighbour (8)
(7) 
line 229: inorderTraversal
(1) (1) (2) (3) (4) (6) (7) (7) 
line 230: remove (5)
line 231: inorderTraversal
(1) (1) (2) (3) (4) (6) (7) (7) 
line 232: kNearestNeighbour 7 (10)
(1) (2) (3) (4) (6) (7) (7) 
line 233: inorderTraversal
(1) (1) (2) (3) (4) (6) (7) (7) 
line 234: kNearestNeighbour 3 (4)
(3) (4) (6) 
line 235: inorderTraversal
(1) (1) (2) (3) (4) (6) (7) (7) 
line 236: nearestNeighbour (7)
(7) 
line 237: inorderTraversal
(1) (1) (2) (3) (4) (6) (7) (7) 
line 238: insert (1)
line 239: inorderTraversal
(1) (1) (1) (2) (3) (4) (6) (7) (7) 
line 240: insert (6)
line 241: inorderTraversal
(1) (1) (1) (2) (3) (4) (6) (6) (7) (7) 
line 242: clear
line 243: buildTree 8
(1) (6) (3) (4) (1) (9) (7) (10) 
line 244: inorderTraversal
(1) (1) (3) (4) (6) (7) (9) (10) 
line 245: search (1)
TRUE
line 246: inorderTraversal
(1) (1) (3) (4) (6) (7) (9) (10) 
line 247: kNearestNeighbour 6 (2)
(1) (1) (3) (4) (6) (7) 
line 248: inorderTraversal
(1) (1) (3) (4) (6) (7) (9) (10) 
line 249: kNearestNeighbour 8 (9)
(1) (1) (3) (4) (6) (7) (9) (10) 
line 250: inorderTraversal
(1) (1) (3) (4) (6) (7) (9) (10) 
line 251: kNearestNeighbour 2 (10)
(9) (10) 
line 252: inorderTraversal
(1) (1) (3) (4) (6) (7) (9) (10) 
line 253: nearestNeighbour (9)
(9) 
line 254: inorderTraversal
(1) (1) (3) (4) (6) (7) (9) (10) 
line 255: nearestNeighbour (2)
(3) 
line 256: inorderTraversal
(1) (1) (3) (4) (6) (7) (9) (10) 
line 257: insert (1)
line 258: inorderTraversal
(1) (1) (1) (3) (4) (6) (7) (9) (10) 
line 259: insert (3)
line 260: inorderTraversal
(1) (1) (1) (3) (3) (4) (6) (7) (9) (10) 
line 261: nearestNeighbour (1)
(1) 
line 262: inorderTraversal
(1) (1) (1) (3) (3) (4) (6) (7) (9) (10) 
line 263: preorderTraversal
(4) (1) (1) (3) (1) (3) (7) (6) (9) (10) 
line 264: inorderTraversal
(1) (1) (1) (3) (3) (4) (6) (7) (9) (10) 
line 265: remove (3)
line 266: inorderTraversal
(1) (1) (1) (3) (4) (6) (7) (9) (10) 
line 267: insert (8)
line 268: inorderTraversal
(1) (1) (1) (3) (4) (6) (7) (8) (9) (10) 
line 269: nearestNeighbour (6)
(6) 
line 270: inorderTraversal
(1) (1) (1) (3) (4) (6) (7) (8) (9) (10) 
line 271: insert (6)
line 272: inorderTraversal
(1) (1) (1) (3) (4) (6) (6) (7) (8) (9) (10) 
line 273: kNearestNeighbour 1 (9)
(9) 
line 274: inorderTraversal
(1) (1) (1) (3) (4) (6) (6) (7) (8) (9) (10) 
line 275: insert (3)
line 276: inorderTraversal
(1) (1) (1) (3) (3) (4) (6) (6) (7) (8) (9) (10) 
line 277: insert (6)
line 278: inorderTraversal
(1) (1) (1) (3) (3) (4) (6) (6) (6) (7) (8) (9) (10) 
line 279: nearestNeighbour (7)
(7) 
line 280: inorderTraversal
(1) (1) (1) (3) (3) (4) (6) (6) (6) (7) (8) (9) (10) 
line 281: remove (9)
line 282: inorderTraversal
(1) (1) (1) (3) (3) (4) (6) (6) (6) (7) (8) (10) 
line 283: remove (8)
line 284: inorderTraversal
(1) (1) (1) (3) (3) (4) (6) (6) (6) (7) (10) 
line 285: search (1)
TRUE
line 286: inorderTraversal
(1) (1) (1) (3) (3) (4) (6) (6) (6) (7) (10) 
line 287: nodeCount_height_leafCount
nodeCount=11;height=5;leafCount=4
line 288: inorderTraversal
(1) (1) (1) (3) (3) (4) (6) (6) (6) (7) (10) 
line 289: insert (7)
line 290: inorderTraversal
(1) (1) (1) (3) (3) (4) (6) (6) (6) (7) (7) (10) 
line 291: nearestNeighbour (8)
(7) 
line 292: inorderTraversal
(1) (1) (1) (3) (3) (4) (6) (6) (6) (7) (7) (10) 
line 293: insert (4)
line 294: inorderTraversal
(1) (1) (1) (3) (3) (4) (4) (6) (6) (6) (7) (7) (10) 
line 295: kNearestNeighbour 2 (10)
(7) (10) 
line 296: inorderTraversal
(1) (1) (1) (3) (3) (4) (4) (6) (6) (6) (7) (7) (10) 
line 297: insert (6)
line 298: inorderTraversal
(1) (1) (1) (3) (3) (4) (4) (6) (6) (6) (6) (7) (7) (10) 
line 299: insert (7)
line 300: inorderTraversal
(1) (1) (1) (3) (3) (4) (4) (6) (6) (6) (6) (7) (7) (7) (10) 
line 301: remove (1)
line 302: inorderTraversal
(1) (1) (3) (3) (4) (4) (6) (6) (6) (6) (7) (7) (7) (10) 
line 303: clear
line 304: buildTree 12
(6) (2) (7) (7) (4) (8) (9) (1) (10) (9) (2) (3) 
line 305: inorderTraversal
(1) (2) (2) (3) (4) (6) (7) (7) (8) (9) (9) (10) 
line 306: nearestNeighbour (1)
(1) 
line 307: inorderTraversal
(1) (2) (2) (3) (4) (6) (7) (7) (8) (9) (9) (10) 
line 308: insert (1)
line 309: inorderTraversal
(1) (1) (2) (2) (3) (4) (6) (7) (7) (8) (9) (9) (10) 
line 310: insert (1)
line 311: inorderTraversal
(1) (1) (1) (2) (2) (3) (4) (6) (7) (7) (8) (9) (9) (10) 
line 312: insert (5)
line 313: inorderTraversal
(1) (1) (1) (2) (2) (3) (4) (5) (6) (7) (7) (8) (9) (9) (10) 
line 314: insert (3)
line 315: inorderTraversal
(1) (1) (1) (2) (2) (3) (3) (4) (5) (6) (7) (7) (8) (9) (9) (10) 
line 316: nearestNeighbour (7)
(7) 
line 317: inorderTraversal
(1) (1) (1) (2) (2) (3) (3) (4) (5) (6) (7) (7) (8) (9) (9) (10) 
line 318: insert (5)
line 319: inorderTraversal
(1) (1) (1) (2) (2) (3) (3) (4) (5) (5) (6) (7) (7) (8) (9) (9) (10) 
line 320: insert (6)
line 321: inorderTraversal
(1) (1) (1) (2) (2) (3) (3) (4) (5) (5) (6) (6) (7) (7) (8) (9) (9) (10) 
line 322: insert (2)
line 323: inorderTraversal
(1) (1) (1) (2) (2) (2) (3) (3) (4) (5) (5) (6) (6) (7) (7) (8) (9) (9) (10) 
line 324: clear
line 325: buildTree 1
(8) 
line 326: inorderTraversal
(8) 
line 327: remove (8)
line 328: inorderTraversal

line 329: kNearestNeighbour 6 (5)

line 330: inorderTraversal

line 331: insert (9)
line 332: inorderTraversal
(9) 
line 333: insert (1)
line 334: inorderTraversal
(1) (9) 
line 335: kNearestNeighbour 6 (3)
(1) (9) 
line 336: inorderTraversal
(1) (9) 
line 337: insert (9)
line 338: inorderTraversal
(1) (9) (9) 
line 339: insert (3)
line 340: inorderTraversal
(1) (3) (9) (9) 
line 341: kNearestNeighbour 9 (10)
(1) (3) (9) (9) 
line 342: inorderTraversal
(1) (3) (9) (9) 
line 343: insert (7)
line 344: inorderTraversal
(1) (3) (7) (9) (9) 
line 345: kNearestNeighbour 4 (1)
(1) (3) (7) (9) 
line 346: inorderTraversal
(1) (3) (7) (9) (9) 
line 347: insert (7)
line 348: inorderTraversal
(1) (3) (7) (7) (9) (9) 
line 349: kNearestNeighbour 6 (6)
(1) (3) (7) (7) (9) (9) 
line 350: inorderTraversal
(1) (3) (7) (7) (9) (9) 
line 351: insert (6)
line 352: inorderTraversal
(1) (3) (6) (7) (7) (9) (9) 
line 353: search (5)
FALSE
line 354: inorderTraversal
(1) (3) (6) (7) (7) (9) (9) 
line 355: remove (9)
line 356: inorderTraversal
(1) (3) (6) (7) (7) (9) 
line 357: preorderTraversal
(9) (1) (3) (7) (6) (7) 
line 358: inorderTraversal
(1) (3) (6) (7) (7) (9) 
line 359: nodeCount_height_leafCount
nodeCount=6;height=5;leafCount=2
line 360: inorderTraversal
(1) (3) (6) (7) (7) (9) 
line 361: kNearestNeighbour 5 (1)
(1) (3) (6) (7) (7) 
line 362: inorderTraversal
(1) (3) (6) (7) (7) (9) 
line 363: nearestNeighbour (9)
(9) 
line 364: inorderTraversal
(1) (3) (6) (7) (7) (9) 
line 365: nearestNeighbour (10)
(9) 
line 366: inorderTraversal
(1) (3) (6) (7) (7) (9) 
line 367: nearestNeighbour (4)
(3) 
line 368: inorderTraversal
(1) (3) (6) (7) (7) (9) 
line 369: kNearestNeighbour 4 (5)
(3) (6) (7) (7) 
line 370: inorderTraversal
(1) (3) (6) (7) (7) (9) 
line 371: kNearestNeighbour 5 (1)
(1) (3) (6) (7) (7) 
line 372: inorderTraversal
(1) (3) (6) (7) (7) (9) 
line 373: insert (10)
line 374: inorderTraversal
(1) (3) (6) (7) (7) (9) (10) 
line 375: insert (10)
line 376: inorderTraversal
(1) (3) (6) (7) (7) (9) (10) (10) 
line 377: nearestNeighbour (7)
(7) 
line 378: inorderTraversal
(1) (3) (6) (7) (7) (9) (10) (10) 
line 379: insert (8)
line 380: inorderTraversal
(1) (3) (6) (7) (7) (8) (9) (10) (10) 
line 381: search (6)
TRUE
line 382: inorderTraversal
(1) (3) (6) (7) (7) (8) (9) (10) (10) 
line 383: kNearestNeighbour 6 (3)
(1) (3) (6) (7) (7) (8) 
line 384: inorderTraversal
(1) (3) (6) (7) (7) (8) (9) (10) (10) 
line 385: nearestNeighbour (1)
(1) 
line 386: inorderTraversal
(1) (3) (6) (7) (7) (8) (9) (10) (10) 
line 387: insert (3)
line 388: inorderTraversal
(1) (3) (3) (6) (7) (7) (8) (9) (10) (10) 
line 389: kNearestNeighbour 5 (4)
(3) (3) (6) (7) (7) 
line 390: inorderTraversal
(1) (3) (3) (6) (7) (7) (8) (9) (10) (10) 
line 391: insert (7)
line 392: inorderTraversal
(1) (3) (3) (6) (7) (7) (7) (8) (9) (10) (10) 
line 393: remove (10)
line 394: inorderTraversal
(1) (3) (3) (6) (7) (7) (7) (8) (9) (10) 
line 395: remove (7)
line 396: inorderTraversal
(1) (3) (3) (6) (7) (7) (8) (9) (10) 
line 397: nodeCount_height_leafCount
nodeCount=9;height=6;leafCount=3
line 398: inorderTraversal
(1) (3) (3) (6) (7) (7) (8) (9) (10) 
line 399: insert (10)
line 400: inorderTraversal
(1) (3) (3) (6) (7) (7) (8) (9) (10) (10) 
line 401: kNearestNeighbour 4 (4)
(3) (3) (6) (7) 
line 402: inorderTraversal
(1) (3) (3) (6) (7) (7) (8) (9) (10) (10) 
line 403: remove (3)
line 404: inorderTraversal
(1) (3) (6) (7) (7) (8) (9) (10) (10) 
line 405: kNearestNeighbour 7 (4)
(1) (3) (6) (7) (7) (8) (9) 
line 406: inorderTraversal
(1) (3) (6) (7) (7) (8) (9) (10) (10) 
line 407: kNearestNeighbour 7 (4)
(1) (3) (6) (7) (7) (8) (9) 
line 408: inorderTraversal
(1) (3) (6) (7) (7) (8) (9) (10) (10) 
line 409: remove (10)
line 410: inorderTraversal
(1) (3) (6) (7) (7) (8) (9) (10) 
line 411: nodeCount_height_leafCount
nodeCount=8;height=6;leafCount=3
line 412: inorderTraversal
(1) (3) (6) (7) (7) (8) (9) (10) 
line 413: preorderTraversal
(9) (1) (3) (7) (6) (7) (8) (10) 
line 414: postorderTraversal
(6) (8) (7) (7) (3) (1) (10) (9) 
line 415: clear
