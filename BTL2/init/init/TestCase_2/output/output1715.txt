line 1: k=1
line 2: kNearestNeighbour 8 (5)

line 3: inorderTraversal

line 4: kNearestNeighbour 10 (1)

line 5: inorderTraversal

line 6: insert (6)
line 7: inorderTraversal
(6) 
line 8: kNearestNeighbour 6 (3)
(6) 
line 9: inorderTraversal
(6) 
line 10: insert (6)
line 11: inorderTraversal
(6) (6) 
line 12: insert (1)
line 13: inorderTraversal
(1) (6) (6) 
line 14: insert (5)
line 15: inorderTraversal
(1) (5) (6) (6) 
line 16: kNearestNeighbour 4 (8)
(1) (5) (6) (6) 
line 17: inorderTraversal
(1) (5) (6) (6) 
line 18: nearestNeighbour (10)
(6) 
line 19: inorderTraversal
(1) (5) (6) (6) 
line 20: kNearestNeighbour 10 (9)
(1) (5) (6) (6) 
line 21: inorderTraversal
(1) (5) (6) (6) 
line 22: nearestNeighbour (8)
(6) 
line 23: inorderTraversal
(1) (5) (6) (6) 
line 24: insert (9)
line 25: inorderTraversal
(1) (5) (6) (6) (9) 
line 26: clear
line 27: buildTree 7
(2) (5) (6) (6) (5) (10) (8) 
line 28: inorderTraversal
(2) (5) (5) (6) (6) (8) (10) 
line 29: insert (1)
line 30: inorderTraversal
(1) (2) (5) (5) (6) (6) (8) (10) 
line 31: insert (8)
line 32: inorderTraversal
(1) (2) (5) (5) (6) (6) (8) (8) (10) 
line 33: nearestNeighbour (2)
(2) 
line 34: inorderTraversal
(1) (2) (5) (5) (6) (6) (8) (8) (10) 
line 35: kNearestNeighbour 4 (7)
(6) (6) (8) (8) 
line 36: inorderTraversal
(1) (2) (5) (5) (6) (6) (8) (8) (10) 
line 37: nearestNeighbour (7)
(6) 
line 38: inorderTraversal
(1) (2) (5) (5) (6) (6) (8) (8) (10) 
line 39: kNearestNeighbour 6 (6)
(5) (5) (6) (6) (8) (8) 
line 40: inorderTraversal
(1) (2) (5) (5) (6) (6) (8) (8) (10) 
line 41: kNearestNeighbour 5 (7)
(5) (6) (6) (8) (8) 
line 42: inorderTraversal
(1) (2) (5) (5) (6) (6) (8) (8) (10) 
line 43: insert (6)
line 44: inorderTraversal
(1) (2) (5) (5) (6) (6) (6) (8) (8) (10) 
line 45: insert (5)
line 46: inorderTraversal
(1) (2) (5) (5) (5) (6) (6) (6) (8) (8) (10) 
line 47: insert (6)
line 48: inorderTraversal
(1) (2) (5) (5) (5) (6) (6) (6) (6) (8) (8) (10) 
line 49: remove (5)
line 50: inorderTraversal
(1) (2) (5) (5) (6) (6) (6) (6) (8) (8) (10) 
line 51: nearestNeighbour (10)
(10) 
line 52: inorderTraversal
(1) (2) (5) (5) (6) (6) (6) (6) (8) (8) (10) 
line 53: clear
line 54: buildTree 9
(3) (10) (1) (9) (10) (6) (7) (9) (10) 
line 55: inorderTraversal
(1) (3) (6) (7) (9) (9) (10) (10) (10) 
line 56: kNearestNeighbour 9 (2)
(1) (3) (6) (7) (9) (9) (10) (10) (10) 
line 57: inorderTraversal
(1) (3) (6) (7) (9) (9) (10) (10) (10) 
line 58: kNearestNeighbour 1 (2)
(1) 
line 59: inorderTraversal
(1) (3) (6) (7) (9) (9) (10) (10) (10) 
line 60: insert (9)
line 61: inorderTraversal
(1) (3) (6) (7) (9) (9) (9) (10) (10) (10) 
line 62: kNearestNeighbour 7 (7)
(6) (7) (9) (9) (9) (10) (10) 
line 63: inorderTraversal
(1) (3) (6) (7) (9) (9) (9) (10) (10) (10) 
line 64: remove (10)
line 65: inorderTraversal
(1) (3) (6) (7) (9) (9) (9) (10) (10) 
line 66: nearestNeighbour (5)
(6) 
line 67: inorderTraversal
(1) (3) (6) (7) (9) (9) (9) (10) (10) 
line 68: kNearestNeighbour 5 (10)
(9) (9) (9) (10) (10) 
line 69: inorderTraversal
(1) (3) (6) (7) (9) (9) (9) (10) (10) 
line 70: insert (8)
line 71: inorderTraversal
(1) (3) (6) (7) (8) (9) (9) (9) (10) (10) 
line 72: insert (9)
line 73: inorderTraversal
(1) (3) (6) (7) (8) (9) (9) (9) (9) (10) (10) 
line 74: kNearestNeighbour 6 (5)
(1) (3) (6) (7) (8) (9) 
line 75: inorderTraversal
(1) (3) (6) (7) (8) (9) (9) (9) (9) (10) (10) 
line 76: insert (5)
line 77: inorderTraversal
(1) (3) (5) (6) (7) (8) (9) (9) (9) (9) (10) (10) 
line 78: insert (8)
line 79: inorderTraversal
(1) (3) (5) (6) (7) (8) (8) (9) (9) (9) (9) (10) (10) 
line 80: nearestNeighbour (4)
(5) 
line 81: inorderTraversal
(1) (3) (5) (6) (7) (8) (8) (9) (9) (9) (9) (10) (10) 
line 82: insert (9)
line 83: inorderTraversal
(1) (3) (5) (6) (7) (8) (8) (9) (9) (9) (9) (9) (10) (10) 
line 84: insert (4)
line 85: inorderTraversal
(1) (3) (4) (5) (6) (7) (8) (8) (9) (9) (9) (9) (9) (10) (10) 
line 86: kNearestNeighbour 5 (6)
(5) (6) (7) (8) (8) 
line 87: inorderTraversal
(1) (3) (4) (5) (6) (7) (8) (8) (9) (9) (9) (9) (9) (10) (10) 
line 88: insert (4)
line 89: inorderTraversal
(1) (3) (4) (4) (5) (6) (7) (8) (8) (9) (9) (9) (9) (9) (10) (10) 
line 90: clear
line 91: buildTree 9
(1) (5) (1) (8) (6) (2) (7) (1) (2) 
line 92: inorderTraversal
(1) (1) (1) (2) (2) (5) (6) (7) (8) 
line 93: clear
line 94: buildTree 5
(9) (8) (2) (1) (6) 
line 95: inorderTraversal
(1) (2) (6) (8) (9) 
line 96: preorderTraversal
(6) (1) (2) (8) (9) 
line 97: inorderTraversal
(1) (2) (6) (8) (9) 
line 98: search (6)
TRUE
line 99: inorderTraversal
(1) (2) (6) (8) (9) 
line 100: insert (4)
line 101: inorderTraversal
(1) (2) (4) (6) (8) (9) 
line 102: insert (8)
line 103: inorderTraversal
(1) (2) (4) (6) (8) (8) (9) 
line 104: insert (2)
line 105: inorderTraversal
(1) (2) (2) (4) (6) (8) (8) (9) 
line 106: remove (9)
line 107: inorderTraversal
(1) (2) (2) (4) (6) (8) (8) 
line 108: kNearestNeighbour 8 (7)
(1) (2) (2) (4) (6) (8) (8) 
line 109: inorderTraversal
(1) (2) (2) (4) (6) (8) (8) 
line 110: remove (4)
line 111: inorderTraversal
(1) (2) (2) (6) (8) (8) 
line 112: remove (2)
line 113: inorderTraversal
(1) (2) (6) (8) (8) 
line 114: kNearestNeighbour 10 (5)
(1) (2) (6) (8) (8) 
line 115: inorderTraversal
(1) (2) (6) (8) (8) 
line 116: kNearestNeighbour 7 (1)
(1) (2) (6) (8) (8) 
line 117: inorderTraversal
(1) (2) (6) (8) (8) 
line 118: nearestNeighbour (10)
(8) 
line 119: inorderTraversal
(1) (2) (6) (8) (8) 
line 120: kNearestNeighbour 10 (8)
(1) (2) (6) (8) (8) 
line 121: inorderTraversal
(1) (2) (6) (8) (8) 
line 122: nearestNeighbour (6)
(6) 
line 123: inorderTraversal
(1) (2) (6) (8) (8) 
line 124: insert (10)
line 125: inorderTraversal
(1) (2) (6) (8) (8) (10) 
line 126: kNearestNeighbour 10 (9)
(1) (2) (6) (8) (8) (10) 
line 127: inorderTraversal
(1) (2) (6) (8) (8) (10) 
line 128: insert (10)
line 129: inorderTraversal
(1) (2) (6) (8) (8) (10) (10) 
line 130: clear
line 131: buildTree 7
(10) (3) (9) (9) (2) (10) (1) 
line 132: inorderTraversal
(1) (2) (3) (9) (9) (10) (10) 
line 133: insert (7)
line 134: inorderTraversal
(1) (2) (3) (7) (9) (9) (10) (10) 
line 135: insert (4)
line 136: inorderTraversal
(1) (2) (3) (4) (7) (9) (9) (10) (10) 
line 137: kNearestNeighbour 10 (5)
(1) (2) (3) (4) (7) (9) (9) (10) (10) 
line 138: inorderTraversal
(1) (2) (3) (4) (7) (9) (9) (10) (10) 
line 139: kNearestNeighbour 1 (8)
(7) 
line 140: inorderTraversal
(1) (2) (3) (4) (7) (9) (9) (10) (10) 
line 141: insert (2)
line 142: inorderTraversal
(1) (2) (2) (3) (4) (7) (9) (9) (10) (10) 
line 143: insert (9)
line 144: inorderTraversal
(1) (2) (2) (3) (4) (7) (9) (9) (9) (10) (10) 
line 145: insert (10)
line 146: inorderTraversal
(1) (2) (2) (3) (4) (7) (9) (9) (9) (10) (10) (10) 
line 147: kNearestNeighbour 3 (1)
(1) (2) (2) 
line 148: inorderTraversal
(1) (2) (2) (3) (4) (7) (9) (9) (9) (10) (10) (10) 
line 149: kNearestNeighbour 6 (5)
(1) (2) (2) (3) (4) (7) 
line 150: inorderTraversal
(1) (2) (2) (3) (4) (7) (9) (9) (9) (10) (10) (10) 
line 151: search (2)
TRUE
line 152: inorderTraversal
(1) (2) (2) (3) (4) (7) (9) (9) (9) (10) (10) (10) 
line 153: nearestNeighbour (10)
(10) 
line 154: inorderTraversal
(1) (2) (2) (3) (4) (7) (9) (9) (9) (10) (10) (10) 
line 155: insert (5)
line 156: inorderTraversal
(1) (2) (2) (3) (4) (5) (7) (9) (9) (9) (10) (10) (10) 
line 157: nearestNeighbour (3)
(3) 
line 158: inorderTraversal
(1) (2) (2) (3) (4) (5) (7) (9) (9) (9) (10) (10) (10) 
line 159: insert (1)
line 160: inorderTraversal
(1) (1) (2) (2) (3) (4) (5) (7) (9) (9) (9) (10) (10) (10) 
line 161: nearestNeighbour (9)
(9) 
line 162: inorderTraversal
(1) (1) (2) (2) (3) (4) (5) (7) (9) (9) (9) (10) (10) (10) 
line 163: insert (7)
line 164: inorderTraversal
(1) (1) (2) (2) (3) (4) (5) (7) (7) (9) (9) (9) (10) (10) (10) 
line 165: search (1)
TRUE
line 166: inorderTraversal
(1) (1) (2) (2) (3) (4) (5) (7) (7) (9) (9) (9) (10) (10) (10) 
line 167: insert (6)
line 168: inorderTraversal
(1) (1) (2) (2) (3) (4) (5) (6) (7) (7) (9) (9) (9) (10) (10) (10) 
line 169: remove (7)
line 170: inorderTraversal
(1) (1) (2) (2) (3) (4) (5) (6) (7) (9) (9) (9) (10) (10) (10) 
line 171: kNearestNeighbour 5 (9)
(9) (9) (9) (10) (10) 
line 172: inorderTraversal
(1) (1) (2) (2) (3) (4) (5) (6) (7) (9) (9) (9) (10) (10) (10) 
line 173: remove (5)
line 174: inorderTraversal
(1) (1) (2) (2) (3) (4) (6) (7) (9) (9) (9) (10) (10) (10) 
line 175: nearestNeighbour (4)
(4) 
line 176: inorderTraversal
(1) (1) (2) (2) (3) (4) (6) (7) (9) (9) (9) (10) (10) (10) 
line 177: postorderTraversal
(1) (1) (2) (6) (4) (7) (3) (2) (9) (9) (10) (10) (10) (9) 
line 178: inorderTraversal
(1) (1) (2) (2) (3) (4) (6) (7) (9) (9) (9) (10) (10) (10) 
line 179: insert (5)
line 180: inorderTraversal
(1) (1) (2) (2) (3) (4) (5) (6) (7) (9) (9) (9) (10) (10) (10) 
line 181: kNearestNeighbour 7 (4)
(2) (2) (3) (4) (5) (6) (7) 
line 182: inorderTraversal
(1) (1) (2) (2) (3) (4) (5) (6) (7) (9) (9) (9) (10) (10) (10) 
line 183: insert (7)
line 184: inorderTraversal
(1) (1) (2) (2) (3) (4) (5) (6) (7) (7) (9) (9) (9) (10) (10) (10) 
line 185: insert (9)
line 186: inorderTraversal
(1) (1) (2) (2) (3) (4) (5) (6) (7) (7) (9) (9) (9) (9) (10) (10) (10) 
line 187: nearestNeighbour (6)
(6) 
line 188: inorderTraversal
(1) (1) (2) (2) (3) (4) (5) (6) (7) (7) (9) (9) (9) (9) (10) (10) (10) 
line 189: insert (2)
line 190: inorderTraversal
(1) (1) (2) (2) (2) (3) (4) (5) (6) (7) (7) (9) (9) (9) (9) (10) (10) (10) 
line 191: kNearestNeighbour 7 (6)
(3) (4) (5) (6) (7) (7) (9) 
line 192: inorderTraversal
(1) (1) (2) (2) (2) (3) (4) (5) (6) (7) (7) (9) (9) (9) (9) (10) (10) (10) 
line 193: remove (5)
line 194: inorderTraversal
(1) (1) (2) (2) (2) (3) (4) (6) (7) (7) (9) (9) (9) (9) (10) (10) (10) 
line 195: nearestNeighbour (7)
(7) 
line 196: inorderTraversal
(1) (1) (2) (2) (2) (3) (4) (6) (7) (7) (9) (9) (9) (9) (10) (10) (10) 
line 197: nodeCount_height_leafCount
nodeCount=17;height=6;leafCount=6
line 198: inorderTraversal
(1) (1) (2) (2) (2) (3) (4) (6) (7) (7) (9) (9) (9) (9) (10) (10) (10) 
line 199: nearestNeighbour (2)
(2) 
line 200: inorderTraversal
(1) (1) (2) (2) (2) (3) (4) (6) (7) (7) (9) (9) (9) (9) (10) (10) (10) 
line 201: remove (3)
line 202: inorderTraversal
(1) (1) (2) (2) (2) (4) (6) (7) (7) (9) (9) (9) (9) (10) (10) (10) 
line 203: kNearestNeighbour 7 (7)
(6) (7) (7) (9) (9) (9) (9) 
line 204: inorderTraversal
(1) (1) (2) (2) (2) (4) (6) (7) (7) (9) (9) (9) (9) (10) (10) (10) 
line 205: nearestNeighbour (5)
(6) 
line 206: inorderTraversal
(1) (1) (2) (2) (2) (4) (6) (7) (7) (9) (9) (9) (9) (10) (10) (10) 
line 207: insert (5)
line 208: inorderTraversal
(1) (1) (2) (2) (2) (4) (5) (6) (7) (7) (9) (9) (9) (9) (10) (10) (10) 
line 209: nodeCount_height_leafCount
nodeCount=17;height=6;leafCount=6
line 210: inorderTraversal
(1) (1) (2) (2) (2) (4) (5) (6) (7) (7) (9) (9) (9) (9) (10) (10) (10) 
line 211: clear
line 212: buildTree 8
(7) (9) (1) (3) (3) (8) (10) (3) 
line 213: inorderTraversal
(1) (3) (3) (3) (7) (8) (9) (10) 
line 214: nearestNeighbour (1)
(1) 
line 215: inorderTraversal
(1) (3) (3) (3) (7) (8) (9) (10) 
line 216: search (3)
TRUE
line 217: inorderTraversal
(1) (3) (3) (3) (7) (8) (9) (10) 
line 218: clear
line 219: buildTree 2
(4) (5) 
line 220: inorderTraversal
(4) (5) 
line 221: nearestNeighbour (5)
(5) 
line 222: inorderTraversal
(4) (5) 
line 223: postorderTraversal
(5) (4) 
line 224: inorderTraversal
(4) (5) 
line 225: search (5)
TRUE
line 226: inorderTraversal
(4) (5) 
line 227: nearestNeighbour (3)
(4) 
line 228: inorderTraversal
(4) (5) 
line 229: kNearestNeighbour 8 (4)
(4) (5) 
line 230: inorderTraversal
(4) (5) 
line 231: nodeCount_height_leafCount
nodeCount=2;height=2;leafCount=1
line 232: inorderTraversal
(4) (5) 
line 233: clear
line 234: buildTree 20
(5) (6) (9) (6) (10) (4) (6) (1) (10) (3) (3) (6) (7) (3) (10) (9) (10) (3) (9) (10) 
line 235: inorderTraversal
(1) (3) (3) (3) (3) (4) (5) (6) (6) (6) (6) (7) (9) (9) (9) (10) (10) (10) (10) (10) 
line 236: insert (10)
line 237: inorderTraversal
(1) (3) (3) (3) (3) (4) (5) (6) (6) (6) (6) (7) (9) (9) (9) (10) (10) (10) (10) (10) (10) 
line 238: insert (7)
line 239: inorderTraversal
(1) (3) (3) (3) (3) (4) (5) (6) (6) (6) (6) (7) (7) (9) (9) (9) (10) (10) (10) (10) (10) (10) 
line 240: nearestNeighbour (3)
(3) 
line 241: inorderTraversal
(1) (3) (3) (3) (3) (4) (5) (6) (6) (6) (6) (7) (7) (9) (9) (9) (10) (10) (10) (10) (10) (10) 
line 242: kNearestNeighbour 1 (1)
(1) 
line 243: inorderTraversal
(1) (3) (3) (3) (3) (4) (5) (6) (6) (6) (6) (7) (7) (9) (9) (9) (10) (10) (10) (10) (10) (10) 
line 244: search (3)
TRUE
line 245: inorderTraversal
(1) (3) (3) (3) (3) (4) (5) (6) (6) (6) (6) (7) (7) (9) (9) (9) (10) (10) (10) (10) (10) (10) 
line 246: insert (2)
line 247: inorderTraversal
(1) (2) (3) (3) (3) (3) (4) (5) (6) (6) (6) (6) (7) (7) (9) (9) (9) (10) (10) (10) (10) (10) (10) 
line 248: nearestNeighbour (1)
(1) 
line 249: inorderTraversal
(1) (2) (3) (3) (3) (3) (4) (5) (6) (6) (6) (6) (7) (7) (9) (9) (9) (10) (10) (10) (10) (10) (10) 
line 250: insert (2)
line 251: inorderTraversal
(1) (2) (2) (3) (3) (3) (3) (4) (5) (6) (6) (6) (6) (7) (7) (9) (9) (9) (10) (10) (10) (10) (10) (10) 
line 252: insert (6)
line 253: inorderTraversal
(1) (2) (2) (3) (3) (3) (3) (4) (5) (6) (6) (6) (6) (6) (7) (7) (9) (9) (9) (10) (10) (10) (10) (10) (10) 
line 254: preorderTraversal
(6) (3) (1) (2) (2) (3) (3) (4) (3) (5) (9) (6) (6) (6) (7) (6) (7) (10) (9) (9) (10) (10) (10) (10) (10) 
line 255: inorderTraversal
(1) (2) (2) (3) (3) (3) (3) (4) (5) (6) (6) (6) (6) (6) (7) (7) (9) (9) (9) (10) (10) (10) (10) (10) (10) 
line 256: insert (7)
line 257: inorderTraversal
(1) (2) (2) (3) (3) (3) (3) (4) (5) (6) (6) (6) (6) (6) (7) (7) (7) (9) (9) (9) (10) (10) (10) (10) (10) (10) 
line 258: nearestNeighbour (4)
(4) 
line 259: inorderTraversal
(1) (2) (2) (3) (3) (3) (3) (4) (5) (6) (6) (6) (6) (6) (7) (7) (7) (9) (9) (9) (10) (10) (10) (10) (10) (10) 
line 260: clear
line 261: buildTree 8
(10) (2) (9) (7) (2) (6) (2) (2) 
line 262: inorderTraversal
(2) (2) (2) (2) (6) (7) (9) (10) 
line 263: clear
line 264: buildTree 2
(5) (1) 
line 265: inorderTraversal
(1) (5) 
line 266: insert (10)
line 267: inorderTraversal
(1) (5) (10) 
line 268: insert (6)
line 269: inorderTraversal
(1) (5) (6) (10) 
line 270: insert (6)
line 271: inorderTraversal
(1) (5) (6) (6) (10) 
line 272: nearestNeighbour (1)
(1) 
line 273: inorderTraversal
(1) (5) (6) (6) (10) 
line 274: kNearestNeighbour 4 (10)
(5) (6) (6) (10) 
line 275: inorderTraversal
(1) (5) (6) (6) (10) 
line 276: insert (3)
line 277: inorderTraversal
(1) (3) (5) (6) (6) (10) 
line 278: kNearestNeighbour 3 (5)
(5) (6) (6) 
line 279: inorderTraversal
(1) (3) (5) (6) (6) (10) 
line 280: nearestNeighbour (1)
(1) 
line 281: inorderTraversal
(1) (3) (5) (6) (6) (10) 
line 282: kNearestNeighbour 4 (5)
(3) (5) (6) (6) 
line 283: inorderTraversal
(1) (3) (5) (6) (6) (10) 
line 284: clear
line 285: buildTree 18
(2) (8) (1) (7) (7) (5) (5) (5) (5) (8) (7) (1) (2) (1) (5) (4) (6) (7) 
line 286: inorderTraversal
(1) (1) (1) (2) (2) (4) (5) (5) (5) (5) (5) (6) (7) (7) (7) (7) (8) (8) 
line 287: kNearestNeighbour 1 (7)
(7) 
line 288: inorderTraversal
(1) (1) (1) (2) (2) (4) (5) (5) (5) (5) (5) (6) (7) (7) (7) (7) (8) (8) 
line 289: insert (1)
line 290: inorderTraversal
(1) (1) (1) (1) (2) (2) (4) (5) (5) (5) (5) (5) (6) (7) (7) (7) (7) (8) (8) 
line 291: insert (8)
line 292: inorderTraversal
(1) (1) (1) (1) (2) (2) (4) (5) (5) (5) (5) (5) (6) (7) (7) (7) (7) (8) (8) (8) 
line 293: insert (2)
line 294: inorderTraversal
(1) (1) (1) (1) (2) (2) (2) (4) (5) (5) (5) (5) (5) (6) (7) (7) (7) (7) (8) (8) (8) 
line 295: clear
line 296: buildTree 16
(2) (2) (1) (9) (7) (4) (10) (6) (2) (2) (3) (10) (6) (10) (3) (9) 
line 297: inorderTraversal
(1) (2) (2) (2) (2) (3) (3) (4) (6) (6) (7) (9) (9) (10) (10) (10) 
line 298: clear
line 299: buildTree 6
(2) (1) (9) (5) (9) (6) 
line 300: inorderTraversal
(1) (2) (5) (6) (9) (9) 
line 301: kNearestNeighbour 9 (1)
(1) (2) (5) (6) (9) (9) 
line 302: inorderTraversal
(1) (2) (5) (6) (9) (9) 
line 303: remove (8)
line 304: inorderTraversal
(1) (2) (5) (6) (9) (9) 
line 305: clear
line 306: buildTree 2
(9) (5) 
line 307: inorderTraversal
(5) (9) 
line 308: remove (9)
line 309: inorderTraversal
(5) 
line 310: kNearestNeighbour 4 (6)
(5) 
line 311: inorderTraversal
(5) 
line 312: insert (9)
line 313: inorderTraversal
(5) (9) 
line 314: insert (4)
line 315: inorderTraversal
(4) (5) (9) 
line 316: nearestNeighbour (1)
(4) 
line 317: inorderTraversal
(4) (5) (9) 
line 318: remove (4)
line 319: inorderTraversal
(5) (9) 
line 320: kNearestNeighbour 4 (7)
(5) (9) 
line 321: inorderTraversal
(5) (9) 
line 322: remove (4)
line 323: inorderTraversal
(5) (9) 
line 324: nearestNeighbour (4)
(5) 
line 325: inorderTraversal
(5) (9) 
line 326: search (4)
FALSE
line 327: inorderTraversal
(5) (9) 
line 328: nearestNeighbour (7)
(9) 
line 329: inorderTraversal
(5) (9) 
line 330: insert (6)
line 331: inorderTraversal
(5) (6) (9) 
line 332: kNearestNeighbour 9 (5)
(5) (6) (9) 
line 333: inorderTraversal
(5) (6) (9) 
line 334: insert (4)
line 335: inorderTraversal
(4) (5) (6) (9) 
line 336: insert (7)
line 337: inorderTraversal
(4) (5) (6) (7) (9) 
line 338: insert (10)
line 339: inorderTraversal
(4) (5) (6) (7) (9) (10) 
line 340: remove (5)
line 341: inorderTraversal
(4) (6) (7) (9) (10) 
line 342: nearestNeighbour (7)
(7) 
line 343: inorderTraversal
(4) (6) (7) (9) (10) 
line 344: nearestNeighbour (7)
(7) 
line 345: inorderTraversal
(4) (6) (7) (9) (10) 
line 346: nearestNeighbour (8)
(7) 
line 347: inorderTraversal
(4) (6) (7) (9) (10) 
line 348: remove (7)
line 349: inorderTraversal
(4) (6) (9) (10) 
line 350: kNearestNeighbour 8 (6)
(4) (6) (9) (10) 
line 351: inorderTraversal
(4) (6) (9) (10) 
line 352: search (4)
TRUE
line 353: inorderTraversal
(4) (6) (9) (10) 
line 354: insert (7)
line 355: inorderTraversal
(4) (6) (7) (9) (10) 
line 356: nearestNeighbour (1)
(4) 
line 357: inorderTraversal
(4) (6) (7) (9) (10) 
line 358: nearestNeighbour (6)
(6) 
line 359: inorderTraversal
(4) (6) (7) (9) (10) 
line 360: insert (8)
line 361: inorderTraversal
(4) (6) (7) (8) (9) (10) 
line 362: insert (6)
line 363: inorderTraversal
(4) (6) (6) (7) (8) (9) (10) 
line 364: preorderTraversal
(6) (4) (9) (7) (6) (8) (10) 
line 365: inorderTraversal
(4) (6) (6) (7) (8) (9) (10) 
line 366: nearestNeighbour (1)
(4) 
line 367: inorderTraversal
(4) (6) (6) (7) (8) (9) (10) 
line 368: nodeCount_height_leafCount
nodeCount=7;height=4;leafCount=4
line 369: inorderTraversal
(4) (6) (6) (7) (8) (9) (10) 
line 370: insert (6)
line 371: inorderTraversal
(4) (6) (6) (6) (7) (8) (9) (10) 
line 372: nodeCount_height_leafCount
nodeCount=8;height=5;leafCount=4
line 373: inorderTraversal
(4) (6) (6) (6) (7) (8) (9) (10) 
line 374: remove (10)
line 375: inorderTraversal
(4) (6) (6) (6) (7) (8) (9) 
line 376: insert (5)
line 377: inorderTraversal
(4) (5) (6) (6) (6) (7) (8) (9) 
line 378: insert (8)
line 379: inorderTraversal
(4) (5) (6) (6) (6) (7) (8) (8) (9) 
line 380: insert (1)
line 381: inorderTraversal
(1) (4) (5) (6) (6) (6) (7) (8) (8) (9) 
line 382: nearestNeighbour (4)
(4) 
line 383: inorderTraversal
(1) (4) (5) (6) (6) (6) (7) (8) (8) (9) 
line 384: insert (10)
line 385: inorderTraversal
(1) (4) (5) (6) (6) (6) (7) (8) (8) (9) (10) 
line 386: insert (7)
line 387: inorderTraversal
(1) (4) (5) (6) (6) (6) (7) (7) (8) (8) (9) (10) 
line 388: nearestNeighbour (9)
(9) 
line 389: inorderTraversal
(1) (4) (5) (6) (6) (6) (7) (7) (8) (8) (9) (10) 
line 390: insert (5)
line 391: inorderTraversal
(1) (4) (5) (5) (6) (6) (6) (7) (7) (8) (8) (9) (10) 
line 392: kNearestNeighbour 5 (5)
(4) (5) (5) (6) (6) 
line 393: inorderTraversal
(1) (4) (5) (5) (6) (6) (6) (7) (7) (8) (8) (9) (10) 
line 394: kNearestNeighbour 10 (5)
(4) (5) (5) (6) (6) (6) (7) (7) (8) (8) 
line 395: inorderTraversal
(1) (4) (5) (5) (6) (6) (6) (7) (7) (8) (8) (9) (10) 
line 396: insert (3)
line 397: inorderTraversal
(1) (3) (4) (5) (5) (6) (6) (6) (7) (7) (8) (8) (9) (10) 
line 398: nearestNeighbour (4)
(4) 
line 399: inorderTraversal
(1) (3) (4) (5) (5) (6) (6) (6) (7) (7) (8) (8) (9) (10) 
line 400: kNearestNeighbour 6 (7)
(6) (6) (7) (7) (8) (8) 
line 401: inorderTraversal
(1) (3) (4) (5) (5) (6) (6) (6) (7) (7) (8) (8) (9) (10) 
line 402: kNearestNeighbour 6 (4)
(3) (4) (5) (5) (6) (6) 
line 403: inorderTraversal
(1) (3) (4) (5) (5) (6) (6) (6) (7) (7) (8) (8) (9) (10) 
line 404: insert (5)
line 405: inorderTraversal
(1) (3) (4) (5) (5) (5) (6) (6) (6) (7) (7) (8) (8) (9) (10) 
line 406: nearestNeighbour (6)
(6) 
line 407: inorderTraversal
(1) (3) (4) (5) (5) (5) (6) (6) (6) (7) (7) (8) (8) (9) (10) 
line 408: kNearestNeighbour 7 (5)
(4) (5) (5) (5) (6) (6) (6) 
line 409: inorderTraversal
(1) (3) (4) (5) (5) (5) (6) (6) (6) (7) (7) (8) (8) (9) (10) 
line 410: kNearestNeighbour 5 (3)
(1) (3) (4) (5) (5) 
line 411: inorderTraversal
(1) (3) (4) (5) (5) (5) (6) (6) (6) (7) (7) (8) (8) (9) (10) 
line 412: insert (3)
line 413: inorderTraversal
(1) (3) (3) (4) (5) (5) (5) (6) (6) (6) (7) (7) (8) (8) (9) (10) 
line 414: insert (8)
line 415: inorderTraversal
(1) (3) (3) (4) (5) (5) (5) (6) (6) (6) (7) (7) (8) (8) (8) (9) (10) 
line 416: nodeCount_height_leafCount
nodeCount=17;height=6;leafCount=6
line 417: inorderTraversal
(1) (3) (3) (4) (5) (5) (5) (6) (6) (6) (7) (7) (8) (8) (8) (9) (10) 
line 418: preorderTraversal
(6) (4) (1) (3) (3) (5) (5) (5) (9) (7) (6) (6) (8) (7) (8) (8) (10) 
line 419: postorderTraversal
(3) (3) (1) (5) (5) (5) (4) (6) (6) (7) (8) (8) (8) (7) (10) (9) (6) 
line 420: clear
