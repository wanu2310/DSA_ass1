line 1: k=1
line 2: remove (8)
line 3: inorderTraversal

line 4: insert (1)
line 5: inorderTraversal
(1) 
line 6: kNearestNeighbour 7 (1)
(1) 
line 7: inorderTraversal
(1) 
line 8: remove (3)
line 9: inorderTraversal
(1) 
line 10: insert (8)
line 11: inorderTraversal
(1) (8) 
line 12: kNearestNeighbour 10 (10)
(1) (8) 
line 13: inorderTraversal
(1) (8) 
line 14: insert (10)
line 15: inorderTraversal
(1) (8) (10) 
line 16: nearestNeighbour (10)
(10) 
line 17: inorderTraversal
(1) (8) (10) 
line 18: insert (4)
line 19: inorderTraversal
(1) (4) (8) (10) 
line 20: insert (9)
line 21: inorderTraversal
(1) (4) (8) (9) (10) 
line 22: insert (9)
line 23: inorderTraversal
(1) (4) (8) (9) (9) (10) 
line 24: kNearestNeighbour 5 (5)
(1) (4) (8) (9) (9) 
line 25: inorderTraversal
(1) (4) (8) (9) (9) (10) 
line 26: preorderTraversal
(1) (8) (4) (10) (9) (9) 
line 27: inorderTraversal
(1) (4) (8) (9) (9) (10) 
line 28: insert (5)
line 29: inorderTraversal
(1) (4) (5) (8) (9) (9) (10) 
line 30: search (8)
TRUE
line 31: inorderTraversal
(1) (4) (5) (8) (9) (9) (10) 
line 32: kNearestNeighbour 7 (7)
(1) (4) (5) (8) (9) (9) (10) 
line 33: inorderTraversal
(1) (4) (5) (8) (9) (9) (10) 
line 34: insert (3)
line 35: inorderTraversal
(1) (3) (4) (5) (8) (9) (9) (10) 
line 36: nearestNeighbour (4)
(4) 
line 37: inorderTraversal
(1) (3) (4) (5) (8) (9) (9) (10) 
line 38: postorderTraversal
(3) (5) (4) (9) (9) (10) (8) (1) 
line 39: inorderTraversal
(1) (3) (4) (5) (8) (9) (9) (10) 
line 40: insert (7)
line 41: inorderTraversal
(1) (3) (4) (5) (7) (8) (9) (9) (10) 
line 42: kNearestNeighbour 7 (2)
(1) (3) (4) (5) (7) (8) (9) 
line 43: inorderTraversal
(1) (3) (4) (5) (7) (8) (9) (9) (10) 
line 44: insert (5)
line 45: inorderTraversal
(1) (3) (4) (5) (5) (7) (8) (9) (9) (10) 
line 46: remove (9)
line 47: inorderTraversal
(1) (3) (4) (5) (5) (7) (8) (9) (10) 
line 48: insert (8)
line 49: inorderTraversal
(1) (3) (4) (5) (5) (7) (8) (8) (9) (10) 
line 50: preorderTraversal
(1) (8) (4) (3) (5) (7) (5) (10) (9) (8) 
line 51: inorderTraversal
(1) (3) (4) (5) (5) (7) (8) (8) (9) (10) 
line 52: nearestNeighbour (10)
(10) 
line 53: inorderTraversal
(1) (3) (4) (5) (5) (7) (8) (8) (9) (10) 
line 54: postorderTraversal
(3) (5) (7) (5) (4) (8) (9) (10) (8) (1) 
line 55: inorderTraversal
(1) (3) (4) (5) (5) (7) (8) (8) (9) (10) 
line 56: nearestNeighbour (8)
(8) 
line 57: inorderTraversal
(1) (3) (4) (5) (5) (7) (8) (8) (9) (10) 
line 58: clear
line 59: buildTree 14
(2) (1) (4) (10) (9) (2) (10) (8) (1) (8) (1) (10) (6) (4) 
line 60: inorderTraversal
(1) (1) (1) (2) (2) (4) (4) (6) (8) (8) (9) (10) (10) (10) 
line 61: insert (3)
line 62: inorderTraversal
(1) (1) (1) (2) (2) (3) (4) (4) (6) (8) (8) (9) (10) (10) (10) 
line 63: insert (1)
line 64: inorderTraversal
(1) (1) (1) (1) (2) (2) (3) (4) (4) (6) (8) (8) (9) (10) (10) (10) 
line 65: remove (4)
line 66: inorderTraversal
(1) (1) (1) (1) (2) (2) (3) (4) (6) (8) (8) (9) (10) (10) (10) 
line 67: kNearestNeighbour 2 (4)
(3) (4) 
line 68: inorderTraversal
(1) (1) (1) (1) (2) (2) (3) (4) (6) (8) (8) (9) (10) (10) (10) 
line 69: clear
line 70: buildTree 13
(1) (9) (1) (7) (8) (2) (4) (2) (8) (7) (1) (6) (4) 
line 71: inorderTraversal
(1) (1) (1) (2) (2) (4) (4) (6) (7) (7) (8) (8) (9) 
line 72: remove (9)
line 73: inorderTraversal
(1) (1) (1) (2) (2) (4) (4) (6) (7) (7) (8) (8) 
line 74: kNearestNeighbour 5 (4)
(2) (2) (4) (4) (6) 
line 75: inorderTraversal
(1) (1) (1) (2) (2) (4) (4) (6) (7) (7) (8) (8) 
line 76: clear
line 77: buildTree 20
(2) (10) (8) (2) (7) (5) (5) (2) (6) (2) (8) (4) (1) (10) (5) (1) (9) (2) (9) (5) 
line 78: inorderTraversal
(1) (1) (2) (2) (2) (2) (2) (4) (5) (5) (5) (5) (6) (7) (8) (8) (9) (9) (10) (10) 
line 79: remove (8)
line 80: inorderTraversal
(1) (1) (2) (2) (2) (2) (2) (4) (5) (5) (5) (5) (6) (7) (8) (9) (9) (10) (10) 
line 81: insert (10)
line 82: inorderTraversal
(1) (1) (2) (2) (2) (2) (2) (4) (5) (5) (5) (5) (6) (7) (8) (9) (9) (10) (10) (10) 
line 83: nearestNeighbour (10)
(10) 
line 84: inorderTraversal
(1) (1) (2) (2) (2) (2) (2) (4) (5) (5) (5) (5) (6) (7) (8) (9) (9) (10) (10) (10) 
line 85: insert (5)
line 86: inorderTraversal
(1) (1) (2) (2) (2) (2) (2) (4) (5) (5) (5) (5) (5) (6) (7) (8) (9) (9) (10) (10) (10) 
line 87: insert (5)
line 88: inorderTraversal
(1) (1) (2) (2) (2) (2) (2) (4) (5) (5) (5) (5) (5) (5) (6) (7) (8) (9) (9) (10) (10) (10) 
line 89: kNearestNeighbour 8 (8)
(6) (7) (8) (9) (9) (10) (10) (10) 
line 90: inorderTraversal
(1) (1) (2) (2) (2) (2) (2) (4) (5) (5) (5) (5) (5) (5) (6) (7) (8) (9) (9) (10) (10) (10) 
line 91: nearestNeighbour (2)
(2) 
line 92: inorderTraversal
(1) (1) (2) (2) (2) (2) (2) (4) (5) (5) (5) (5) (5) (5) (6) (7) (8) (9) (9) (10) (10) (10) 
line 93: remove (6)
line 94: inorderTraversal
(1) (1) (2) (2) (2) (2) (2) (4) (5) (5) (5) (5) (5) (5) (7) (8) (9) (9) (10) (10) (10) 
line 95: nearestNeighbour (2)
(2) 
line 96: inorderTraversal
(1) (1) (2) (2) (2) (2) (2) (4) (5) (5) (5) (5) (5) (5) (7) (8) (9) (9) (10) (10) (10) 
line 97: preorderTraversal
(5) (2) (1) (1) (2) (2) (2) (2) (4) (8) (5) (5) (7) (5) (5) (5) (9) (10) (9) (10) (10) 
line 98: inorderTraversal
(1) (1) (2) (2) (2) (2) (2) (4) (5) (5) (5) (5) (5) (5) (7) (8) (9) (9) (10) (10) (10) 
line 99: clear
line 100: buildTree 3
(6) (10) (2) 
line 101: inorderTraversal
(2) (6) (10) 
line 102: search (6)
TRUE
line 103: inorderTraversal
(2) (6) (10) 
line 104: insert (7)
line 105: inorderTraversal
(2) (6) (7) (10) 
line 106: remove (2)
line 107: inorderTraversal
(6) (7) (10) 
line 108: insert (6)
line 109: inorderTraversal
(6) (6) (7) (10) 
line 110: kNearestNeighbour 6 (9)
(6) (6) (7) (10) 
line 111: inorderTraversal
(6) (6) (7) (10) 
line 112: clear
line 113: buildTree 10
(4) (1) (1) (5) (7) (4) (6) (7) (10) (2) 
line 114: inorderTraversal
(1) (1) (2) (4) (4) (5) (6) (7) (7) (10) 
line 115: postorderTraversal
(2) (1) (1) (5) (4) (10) (7) (7) (6) (4) 
line 116: inorderTraversal
(1) (1) (2) (4) (4) (5) (6) (7) (7) (10) 
line 117: clear
line 118: buildTree 12
(5) (6) (6) (3) (7) (6) (3) (9) (5) (5) (10) (1) 
line 119: inorderTraversal
(1) (3) (3) (5) (5) (5) (6) (6) (6) (7) (9) (10) 
line 120: nearestNeighbour (2)
(1) 
line 121: inorderTraversal
(1) (3) (3) (5) (5) (5) (6) (6) (6) (7) (9) (10) 
line 122: insert (8)
line 123: inorderTraversal
(1) (3) (3) (5) (5) (5) (6) (6) (6) (7) (8) (9) (10) 
line 124: search (10)
TRUE
line 125: inorderTraversal
(1) (3) (3) (5) (5) (5) (6) (6) (6) (7) (8) (9) (10) 
line 126: insert (3)
line 127: inorderTraversal
(1) (3) (3) (3) (5) (5) (5) (6) (6) (6) (7) (8) (9) (10) 
line 128: nearestNeighbour (5)
(5) 
line 129: inorderTraversal
(1) (3) (3) (3) (5) (5) (5) (6) (6) (6) (7) (8) (9) (10) 
line 130: kNearestNeighbour 9 (8)
(5) (5) (6) (6) (6) (7) (8) (9) (10) 
line 131: inorderTraversal
(1) (3) (3) (3) (5) (5) (5) (6) (6) (6) (7) (8) (9) (10) 
line 132: insert (6)
line 133: inorderTraversal
(1) (3) (3) (3) (5) (5) (5) (6) (6) (6) (6) (7) (8) (9) (10) 
line 134: insert (5)
line 135: inorderTraversal
(1) (3) (3) (3) (5) (5) (5) (5) (6) (6) (6) (6) (7) (8) (9) (10) 
line 136: nearestNeighbour (9)
(9) 
line 137: inorderTraversal
(1) (3) (3) (3) (5) (5) (5) (5) (6) (6) (6) (6) (7) (8) (9) (10) 
line 138: insert (9)
line 139: inorderTraversal
(1) (3) (3) (3) (5) (5) (5) (5) (6) (6) (6) (6) (7) (8) (9) (9) (10) 
line 140: nodeCount_height_leafCount
nodeCount=17;height=6;leafCount=6
line 141: inorderTraversal
(1) (3) (3) (3) (5) (5) (5) (5) (6) (6) (6) (6) (7) (8) (9) (9) (10) 
line 142: insert (8)
line 143: inorderTraversal
(1) (3) (3) (3) (5) (5) (5) (5) (6) (6) (6) (6) (7) (8) (8) (9) (9) (10) 
line 144: nearestNeighbour (1)
(1) 
line 145: inorderTraversal
(1) (3) (3) (3) (5) (5) (5) (5) (6) (6) (6) (6) (7) (8) (8) (9) (9) (10) 
line 146: search (6)
TRUE
line 147: inorderTraversal
(1) (3) (3) (3) (5) (5) (5) (5) (6) (6) (6) (6) (7) (8) (8) (9) (9) (10) 
line 148: nearestNeighbour (1)
(1) 
line 149: inorderTraversal
(1) (3) (3) (3) (5) (5) (5) (5) (6) (6) (6) (6) (7) (8) (8) (9) (9) (10) 
line 150: insert (1)
line 151: inorderTraversal
(1) (1) (3) (3) (3) (5) (5) (5) (5) (6) (6) (6) (6) (7) (8) (8) (9) (9) (10) 
line 152: kNearestNeighbour 3 (1)
(1) (1) (3) 
line 153: inorderTraversal
(1) (1) (3) (3) (3) (5) (5) (5) (5) (6) (6) (6) (6) (7) (8) (8) (9) (9) (10) 
line 154: kNearestNeighbour 3 (6)
(6) (6) (6) 
line 155: inorderTraversal
(1) (1) (3) (3) (3) (5) (5) (5) (5) (6) (6) (6) (6) (7) (8) (8) (9) (9) (10) 
line 156: kNearestNeighbour 5 (8)
(7) (8) (8) (9) (9) 
line 157: inorderTraversal
(1) (1) (3) (3) (3) (5) (5) (5) (5) (6) (6) (6) (6) (7) (8) (8) (9) (9) (10) 
line 158: nearestNeighbour (2)
(1) 
line 159: inorderTraversal
(1) (1) (3) (3) (3) (5) (5) (5) (5) (6) (6) (6) (6) (7) (8) (8) (9) (9) (10) 
line 160: insert (8)
line 161: inorderTraversal
(1) (1) (3) (3) (3) (5) (5) (5) (5) (6) (6) (6) (6) (7) (8) (8) (8) (9) (9) (10) 
line 162: remove (7)
line 163: inorderTraversal
(1) (1) (3) (3) (3) (5) (5) (5) (5) (6) (6) (6) (6) (8) (8) (8) (9) (9) (10) 
line 164: insert (6)
line 165: inorderTraversal
(1) (1) (3) (3) (3) (5) (5) (5) (5) (6) (6) (6) (6) (6) (8) (8) (8) (9) (9) (10) 
line 166: nearestNeighbour (5)
(5) 
line 167: inorderTraversal
(1) (1) (3) (3) (3) (5) (5) (5) (5) (6) (6) (6) (6) (6) (8) (8) (8) (9) (9) (10) 
line 168: remove (10)
line 169: inorderTraversal
(1) (1) (3) (3) (3) (5) (5) (5) (5) (6) (6) (6) (6) (6) (8) (8) (8) (9) (9) 
line 170: insert (3)
line 171: inorderTraversal
(1) (1) (3) (3) (3) (3) (5) (5) (5) (5) (6) (6) (6) (6) (6) (8) (8) (8) (9) (9) 
line 172: clear
line 173: buildTree 3
(3) (7) (1) 
line 174: inorderTraversal
(1) (3) (7) 
line 175: clear
line 176: buildTree 13
(8) (9) (7) (6) (2) (7) (10) (1) (7) (7) (5) (6) (2) 
line 177: inorderTraversal
(1) (2) (2) (5) (6) (6) (7) (7) (7) (7) (8) (9) (10) 
line 178: insert (3)
line 179: inorderTraversal
(1) (2) (2) (3) (5) (6) (6) (7) (7) (7) (7) (8) (9) (10) 
line 180: insert (5)
line 181: inorderTraversal
(1) (2) (2) (3) (5) (5) (6) (6) (7) (7) (7) (7) (8) (9) (10) 
line 182: preorderTraversal
(7) (2) (1) (5) (2) (3) (6) (5) (6) (7) (8) (7) (7) (9) (10) 
line 183: inorderTraversal
(1) (2) (2) (3) (5) (5) (6) (6) (7) (7) (7) (7) (8) (9) (10) 
line 184: remove (7)
line 185: inorderTraversal
(1) (2) (2) (3) (5) (5) (6) (6) (7) (7) (7) (8) (9) (10) 
line 186: kNearestNeighbour 8 (2)
(1) (2) (2) (3) (5) (5) (6) (6) 
line 187: inorderTraversal
(1) (2) (2) (3) (5) (5) (6) (6) (7) (7) (7) (8) (9) (10) 
line 188: kNearestNeighbour 7 (6)
(5) (5) (6) (6) (7) (7) (7) 
line 189: inorderTraversal
(1) (2) (2) (3) (5) (5) (6) (6) (7) (7) (7) (8) (9) (10) 
line 190: insert (10)
line 191: inorderTraversal
(1) (2) (2) (3) (5) (5) (6) (6) (7) (7) (7) (8) (9) (10) (10) 
line 192: insert (3)
line 193: inorderTraversal
(1) (2) (2) (3) (3) (5) (5) (6) (6) (7) (7) (7) (8) (9) (10) (10) 
line 194: search (2)
TRUE
line 195: inorderTraversal
(1) (2) (2) (3) (3) (5) (5) (6) (6) (7) (7) (7) (8) (9) (10) (10) 
line 196: remove (10)
line 197: inorderTraversal
(1) (2) (2) (3) (3) (5) (5) (6) (6) (7) (7) (7) (8) (9) (10) 
line 198: nearestNeighbour (2)
(2) 
line 199: inorderTraversal
(1) (2) (2) (3) (3) (5) (5) (6) (6) (7) (7) (7) (8) (9) (10) 
line 200: insert (9)
line 201: inorderTraversal
(1) (2) (2) (3) (3) (5) (5) (6) (6) (7) (7) (7) (8) (9) (9) (10) 
line 202: nearestNeighbour (10)
(10) 
line 203: inorderTraversal
(1) (2) (2) (3) (3) (5) (5) (6) (6) (7) (7) (7) (8) (9) (9) (10) 
line 204: insert (6)
line 205: inorderTraversal
(1) (2) (2) (3) (3) (5) (5) (6) (6) (6) (7) (7) (7) (8) (9) (9) (10) 
line 206: search (1)
TRUE
line 207: inorderTraversal
(1) (2) (2) (3) (3) (5) (5) (6) (6) (6) (7) (7) (7) (8) (9) (9) (10) 
line 208: insert (7)
line 209: inorderTraversal
(1) (2) (2) (3) (3) (5) (5) (6) (6) (6) (7) (7) (7) (7) (8) (9) (9) (10) 
line 210: nearestNeighbour (9)
(9) 
line 211: inorderTraversal
(1) (2) (2) (3) (3) (5) (5) (6) (6) (6) (7) (7) (7) (7) (8) (9) (9) (10) 
line 212: remove (6)
line 213: inorderTraversal
(1) (2) (2) (3) (3) (5) (5) (6) (6) (7) (7) (7) (7) (8) (9) (9) (10) 
line 214: nearestNeighbour (8)
(8) 
line 215: inorderTraversal
(1) (2) (2) (3) (3) (5) (5) (6) (6) (7) (7) (7) (7) (8) (9) (9) (10) 
line 216: insert (5)
line 217: inorderTraversal
(1) (2) (2) (3) (3) (5) (5) (5) (6) (6) (7) (7) (7) (7) (8) (9) (9) (10) 
line 218: clear
line 219: buildTree 16
(4) (9) (8) (4) (9) (2) (4) (4) (7) (2) (9) (7) (9) (9) (1) (7) 
line 220: inorderTraversal
(1) (2) (2) (4) (4) (4) (4) (7) (7) (7) (8) (9) (9) (9) (9) (9) 
line 221: kNearestNeighbour 3 (10)
(9) (9) (9) 
line 222: inorderTraversal
(1) (2) (2) (4) (4) (4) (4) (7) (7) (7) (8) (9) (9) (9) (9) (9) 
line 223: insert (7)
line 224: inorderTraversal
(1) (2) (2) (4) (4) (4) (4) (7) (7) (7) (7) (8) (9) (9) (9) (9) (9) 
line 225: clear
line 226: buildTree 7
(2) (1) (9) (2) (2) (8) (5) 
line 227: inorderTraversal
(1) (2) (2) (2) (5) (8) (9) 
line 228: insert (8)
line 229: inorderTraversal
(1) (2) (2) (2) (5) (8) (8) (9) 
line 230: remove (2)
line 231: inorderTraversal
(1) (2) (2) (5) (8) (8) (9) 
line 232: nearestNeighbour (9)
(9) 
line 233: inorderTraversal
(1) (2) (2) (5) (8) (8) (9) 
line 234: insert (4)
line 235: inorderTraversal
(1) (2) (2) (4) (5) (8) (8) (9) 
line 236: kNearestNeighbour 8 (2)
(1) (2) (2) (4) (5) (8) (8) (9) 
line 237: inorderTraversal
(1) (2) (2) (4) (5) (8) (8) (9) 
line 238: kNearestNeighbour 10 (2)
(1) (2) (2) (4) (5) (8) (8) (9) 
line 239: inorderTraversal
(1) (2) (2) (4) (5) (8) (8) (9) 
line 240: nearestNeighbour (10)
(9) 
line 241: inorderTraversal
(1) (2) (2) (4) (5) (8) (8) (9) 
line 242: search (8)
TRUE
line 243: inorderTraversal
(1) (2) (2) (4) (5) (8) (8) (9) 
line 244: insert (10)
line 245: inorderTraversal
(1) (2) (2) (4) (5) (8) (8) (9) (10) 
line 246: insert (5)
line 247: inorderTraversal
(1) (2) (2) (4) (5) (5) (8) (8) (9) (10) 
line 248: insert (5)
line 249: inorderTraversal
(1) (2) (2) (4) (5) (5) (5) (8) (8) (9) (10) 
line 250: clear
line 251: buildTree 14
(5) (6) (9) (2) (7) (5) (7) (6) (1) (7) (6) (5) (10) (7) 
line 252: inorderTraversal
(1) (2) (5) (5) (5) (6) (6) (6) (7) (7) (7) (7) (9) (10) 
line 253: search (7)
TRUE
line 254: inorderTraversal
(1) (2) (5) (5) (5) (6) (6) (6) (7) (7) (7) (7) (9) (10) 
line 255: insert (10)
line 256: inorderTraversal
(1) (2) (5) (5) (5) (6) (6) (6) (7) (7) (7) (7) (9) (10) (10) 
line 257: kNearestNeighbour 4 (8)
(7) (7) (7) (9) 
line 258: inorderTraversal
(1) (2) (5) (5) (5) (6) (6) (6) (7) (7) (7) (7) (9) (10) (10) 
line 259: nearestNeighbour (4)
(5) 
line 260: inorderTraversal
(1) (2) (5) (5) (5) (6) (6) (6) (7) (7) (7) (7) (9) (10) (10) 
line 261: insert (7)
line 262: inorderTraversal
(1) (2) (5) (5) (5) (6) (6) (6) (7) (7) (7) (7) (7) (9) (10) (10) 
line 263: kNearestNeighbour 2 (6)
(6) (6) 
line 264: inorderTraversal
(1) (2) (5) (5) (5) (6) (6) (6) (7) (7) (7) (7) (7) (9) (10) (10) 
line 265: kNearestNeighbour 7 (7)
(6) (6) (7) (7) (7) (7) (7) 
line 266: inorderTraversal
(1) (2) (5) (5) (5) (6) (6) (6) (7) (7) (7) (7) (7) (9) (10) (10) 
line 267: clear
line 268: buildTree 10
(2) (8) (6) (5) (7) (4) (5) (5) (7) (3) 
line 269: inorderTraversal
(2) (3) (4) (5) (5) (5) (6) (7) (7) (8) 
line 270: insert (7)
line 271: inorderTraversal
(2) (3) (4) (5) (5) (5) (6) (7) (7) (7) (8) 
line 272: clear
line 273: buildTree 16
(7) (6) (4) (10) (7) (10) (3) (10) (6) (3) (9) (10) (7) (10) (3) (2) 
line 274: inorderTraversal
(2) (3) (3) (3) (4) (6) (6) (7) (7) (7) (9) (10) (10) (10) (10) (10) 
line 275: insert (3)
line 276: inorderTraversal
(2) (3) (3) (3) (3) (4) (6) (6) (7) (7) (7) (9) (10) (10) (10) (10) (10) 
line 277: nearestNeighbour (6)
(6) 
line 278: inorderTraversal
(2) (3) (3) (3) (3) (4) (6) (6) (7) (7) (7) (9) (10) (10) (10) (10) (10) 
line 279: kNearestNeighbour 4 (1)
(2) (3) (3) (3) 
line 280: inorderTraversal
(2) (3) (3) (3) (3) (4) (6) (6) (7) (7) (7) (9) (10) (10) (10) (10) (10) 
line 281: insert (6)
line 282: inorderTraversal
(2) (3) (3) (3) (3) (4) (6) (6) (6) (7) (7) (7) (9) (10) (10) (10) (10) (10) 
line 283: kNearestNeighbour 4 (1)
(2) (3) (3) (3) 
line 284: inorderTraversal
(2) (3) (3) (3) (3) (4) (6) (6) (6) (7) (7) (7) (9) (10) (10) (10) (10) (10) 
line 285: kNearestNeighbour 5 (5)
(3) (4) (6) (6) (6) 
line 286: inorderTraversal
(2) (3) (3) (3) (3) (4) (6) (6) (6) (7) (7) (7) (9) (10) (10) (10) (10) (10) 
line 287: insert (4)
line 288: inorderTraversal
(2) (3) (3) (3) (3) (4) (4) (6) (6) (6) (7) (7) (7) (9) (10) (10) (10) (10) (10) 
line 289: clear
line 290: buildTree 7
(8) (3) (1) (3) (4) (3) (2) 
line 291: inorderTraversal
(1) (2) (3) (3) (3) (4) (8) 
line 292: nearestNeighbour (8)
(8) 
line 293: inorderTraversal
(1) (2) (3) (3) (3) (4) (8) 
line 294: nearestNeighbour (2)
(2) 
line 295: inorderTraversal
(1) (2) (3) (3) (3) (4) (8) 
line 296: kNearestNeighbour 1 (9)
(8) 
line 297: inorderTraversal
(1) (2) (3) (3) (3) (4) (8) 
line 298: clear
line 299: buildTree 6
(9) (10) (4) (6) (5) (6) 
line 300: inorderTraversal
(4) (5) (6) (6) (9) (10) 
line 301: clear
line 302: buildTree 9
(1) (1) (2) (6) (2) (7) (7) (8) (3) 
line 303: inorderTraversal
(1) (1) (2) (2) (3) (6) (7) (7) (8) 
line 304: remove (6)
line 305: inorderTraversal
(1) (1) (2) (2) (3) (7) (7) (8) 
line 306: nearestNeighbour (1)
(1) 
line 307: inorderTraversal
(1) (1) (2) (2) (3) (7) (7) (8) 
line 308: search (6)
FALSE
line 309: inorderTraversal
(1) (1) (2) (2) (3) (7) (7) (8) 
line 310: insert (1)
line 311: inorderTraversal
(1) (1) (1) (2) (2) (3) (7) (7) (8) 
line 312: kNearestNeighbour 7 (3)
(1) (1) (1) (2) (2) (3) (7) 
line 313: inorderTraversal
(1) (1) (1) (2) (2) (3) (7) (7) (8) 
line 314: nearestNeighbour (9)
(8) 
line 315: inorderTraversal
(1) (1) (1) (2) (2) (3) (7) (7) (8) 
line 316: search (7)
TRUE
line 317: inorderTraversal
(1) (1) (1) (2) (2) (3) (7) (7) (8) 
line 318: insert (5)
line 319: inorderTraversal
(1) (1) (1) (2) (2) (3) (5) (7) (7) (8) 
line 320: search (6)
FALSE
line 321: inorderTraversal
(1) (1) (1) (2) (2) (3) (5) (7) (7) (8) 
line 322: insert (6)
line 323: inorderTraversal
(1) (1) (1) (2) (2) (3) (5) (6) (7) (7) (8) 
line 324: search (1)
TRUE
line 325: inorderTraversal
(1) (1) (1) (2) (2) (3) (5) (6) (7) (7) (8) 
line 326: search (1)
TRUE
line 327: inorderTraversal
(1) (1) (1) (2) (2) (3) (5) (6) (7) (7) (8) 
line 328: clear
line 329: buildTree 15
(1) (3) (2) (5) (9) (5) (2) (1) (6) (10) (10) (3) (8) (2) (7) 
line 330: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (5) (5) (6) (7) (8) (9) (10) (10) 
line 331: insert (2)
line 332: inorderTraversal
(1) (1) (2) (2) (2) (2) (3) (3) (5) (5) (6) (7) (8) (9) (10) (10) 
line 333: remove (5)
line 334: inorderTraversal
(1) (1) (2) (2) (2) (2) (3) (3) (5) (6) (7) (8) (9) (10) (10) 
line 335: insert (9)
line 336: inorderTraversal
(1) (1) (2) (2) (2) (2) (3) (3) (5) (6) (7) (8) (9) (9) (10) (10) 
line 337: insert (7)
line 338: inorderTraversal
(1) (1) (2) (2) (2) (2) (3) (3) (5) (6) (7) (7) (8) (9) (9) (10) (10) 
line 339: remove (8)
line 340: inorderTraversal
(1) (1) (2) (2) (2) (2) (3) (3) (5) (6) (7) (7) (9) (9) (10) (10) 
line 341: insert (4)
line 342: inorderTraversal
(1) (1) (2) (2) (2) (2) (3) (3) (4) (5) (6) (7) (7) (9) (9) (10) (10) 
line 343: nodeCount_height_leafCount
nodeCount=17;height=6;leafCount=6
line 344: inorderTraversal
(1) (1) (2) (2) (2) (2) (3) (3) (4) (5) (6) (7) (7) (9) (9) (10) (10) 
line 345: insert (9)
line 346: inorderTraversal
(1) (1) (2) (2) (2) (2) (3) (3) (4) (5) (6) (7) (7) (9) (9) (9) (10) (10) 
line 347: insert (3)
line 348: inorderTraversal
(1) (1) (2) (2) (2) (2) (3) (3) (3) (4) (5) (6) (7) (7) (9) (9) (9) (10) (10) 
line 349: insert (2)
line 350: inorderTraversal
(1) (1) (2) (2) (2) (2) (2) (3) (3) (3) (4) (5) (6) (7) (7) (9) (9) (9) (10) (10) 
line 351: insert (6)
line 352: inorderTraversal
(1) (1) (2) (2) (2) (2) (2) (3) (3) (3) (4) (5) (6) (6) (7) (7) (9) (9) (9) (10) (10) 
line 353: postorderTraversal
(1) (1) (2) (2) (2) (3) (4) (3) (3) (2) (2) (6) (7) (7) (6) (9) (9) (10) (10) (9) (5) 
line 354: inorderTraversal
(1) (1) (2) (2) (2) (2) (2) (3) (3) (3) (4) (5) (6) (6) (7) (7) (9) (9) (9) (10) (10) 
line 355: kNearestNeighbour 4 (2)
(2) (2) (2) (2) 
line 356: inorderTraversal
(1) (1) (2) (2) (2) (2) (2) (3) (3) (3) (4) (5) (6) (6) (7) (7) (9) (9) (9) (10) (10) 
line 357: nearestNeighbour (9)
(9) 
line 358: inorderTraversal
(1) (1) (2) (2) (2) (2) (2) (3) (3) (3) (4) (5) (6) (6) (7) (7) (9) (9) (9) (10) (10) 
line 359: kNearestNeighbour 10 (1)
(1) (1) (2) (2) (2) (2) (2) (3) (3) (3) 
line 360: inorderTraversal
(1) (1) (2) (2) (2) (2) (2) (3) (3) (3) (4) (5) (6) (6) (7) (7) (9) (9) (9) (10) (10) 
line 361: kNearestNeighbour 7 (3)
(2) (2) (2) (3) (3) (3) (4) 
line 362: inorderTraversal
(1) (1) (2) (2) (2) (2) (2) (3) (3) (3) (4) (5) (6) (6) (7) (7) (9) (9) (9) (10) (10) 
line 363: insert (9)
line 364: inorderTraversal
(1) (1) (2) (2) (2) (2) (2) (3) (3) (3) (4) (5) (6) (6) (7) (7) (9) (9) (9) (9) (10) (10) 
line 365: insert (6)
line 366: inorderTraversal
(1) (1) (2) (2) (2) (2) (2) (3) (3) (3) (4) (5) (6) (6) (6) (7) (7) (9) (9) (9) (9) (10) (10) 
line 367: insert (4)
line 368: inorderTraversal
(1) (1) (2) (2) (2) (2) (2) (3) (3) (3) (4) (4) (5) (6) (6) (6) (7) (7) (9) (9) (9) (9) (10) (10) 
line 369: insert (7)
line 370: inorderTraversal
(1) (1) (2) (2) (2) (2) (2) (3) (3) (3) (4) (4) (5) (6) (6) (6) (7) (7) (7) (9) (9) (9) (9) (10) (10) 
line 371: insert (1)
line 372: inorderTraversal
(1) (1) (1) (2) (2) (2) (2) (2) (3) (3) (3) (4) (4) (5) (6) (6) (6) (7) (7) (7) (9) (9) (9) (9) (10) (10) 
line 373: remove (9)
line 374: inorderTraversal
(1) (1) (1) (2) (2) (2) (2) (2) (3) (3) (3) (4) (4) (5) (6) (6) (6) (7) (7) (7) (9) (9) (9) (10) (10) 
line 375: insert (9)
line 376: inorderTraversal
(1) (1) (1) (2) (2) (2) (2) (2) (3) (3) (3) (4) (4) (5) (6) (6) (6) (7) (7) (7) (9) (9) (9) (9) (10) (10) 
line 377: insert (4)
line 378: inorderTraversal
(1) (1) (1) (2) (2) (2) (2) (2) (3) (3) (3) (4) (4) (4) (5) (6) (6) (6) (7) (7) (7) (9) (9) (9) (9) (10) (10) 
line 379: clear
line 380: buildTree 9
(8) (5) (10) (6) (2) (1) (3) (7) (4) 
line 381: inorderTraversal
(1) (2) (3) (4) (5) (6) (7) (8) (10) 
line 382: postorderTraversal
(1) (4) (3) (2) (6) (10) (8) (7) (5) 
line 383: inorderTraversal
(1) (2) (3) (4) (5) (6) (7) (8) (10) 
line 384: insert (6)
line 385: inorderTraversal
(1) (2) (3) (4) (5) (6) (6) (7) (8) (10) 
line 386: clear
line 387: buildTree 16
(4) (6) (3) (4) (10) (10) (2) (5) (4) (6) (3) (5) (3) (2) (2) (4) 
line 388: inorderTraversal
(2) (2) (2) (3) (3) (3) (4) (4) (4) (4) (5) (5) (6) (6) (10) (10) 
line 389: search (2)
TRUE
line 390: inorderTraversal
(2) (2) (2) (3) (3) (3) (4) (4) (4) (4) (5) (5) (6) (6) (10) (10) 
line 391: insert (9)
line 392: inorderTraversal
(2) (2) (2) (3) (3) (3) (4) (4) (4) (4) (5) (5) (6) (6) (9) (10) (10) 
line 393: kNearestNeighbour 4 (10)
(6) (9) (10) (10) 
line 394: inorderTraversal
(2) (2) (2) (3) (3) (3) (4) (4) (4) (4) (5) (5) (6) (6) (9) (10) (10) 
line 395: nearestNeighbour (8)
(9) 
line 396: inorderTraversal
(2) (2) (2) (3) (3) (3) (4) (4) (4) (4) (5) (5) (6) (6) (9) (10) (10) 
line 397: insert (9)
line 398: inorderTraversal
(2) (2) (2) (3) (3) (3) (4) (4) (4) (4) (5) (5) (6) (6) (9) (9) (10) (10) 
line 399: kNearestNeighbour 8 (8)
(5) (5) (6) (6) (9) (9) (10) (10) 
line 400: inorderTraversal
(2) (2) (2) (3) (3) (3) (4) (4) (4) (4) (5) (5) (6) (6) (9) (9) (10) (10) 
line 401: insert (9)
line 402: inorderTraversal
(2) (2) (2) (3) (3) (3) (4) (4) (4) (4) (5) (5) (6) (6) (9) (9) (9) (10) (10) 
line 403: remove (4)
line 404: inorderTraversal
(2) (2) (2) (3) (3) (3) (4) (4) (4) (5) (5) (6) (6) (9) (9) (9) (10) (10) 
line 405: insert (8)
line 406: inorderTraversal
(2) (2) (2) (3) (3) (3) (4) (4) (4) (5) (5) (6) (6) (8) (9) (9) (9) (10) (10) 
line 407: kNearestNeighbour 5 (3)
(2) (2) (3) (3) (3) 
line 408: inorderTraversal
(2) (2) (2) (3) (3) (3) (4) (4) (4) (5) (5) (6) (6) (8) (9) (9) (9) (10) (10) 
line 409: clear
line 410: buildTree 12
(5) (3) (3) (7) (10) (5) (2) (7) (2) (8) (4) (10) 
line 411: inorderTraversal
(2) (2) (3) (3) (4) (5) (5) (7) (7) (8) (10) (10) 
line 412: nearestNeighbour (8)
(8) 
line 413: inorderTraversal
(2) (2) (3) (3) (4) (5) (5) (7) (7) (8) (10) (10) 
line 414: insert (1)
line 415: inorderTraversal
(1) (2) (2) (3) (3) (4) (5) (5) (7) (7) (8) (10) (10) 
line 416: kNearestNeighbour 5 (6)
(5) (5) (7) (7) (8) 
line 417: inorderTraversal
(1) (2) (2) (3) (3) (4) (5) (5) (7) (7) (8) (10) (10) 
line 418: nearestNeighbour (6)
(5) 
line 419: inorderTraversal
(1) (2) (2) (3) (3) (4) (5) (5) (7) (7) (8) (10) (10) 
line 420: kNearestNeighbour 5 (2)
(1) (2) (2) (3) (3) 
line 421: inorderTraversal
(1) (2) (2) (3) (3) (4) (5) (5) (7) (7) (8) (10) (10) 
line 422: nodeCount_height_leafCount
nodeCount=13;height=5;leafCount=6
line 423: inorderTraversal
(1) (2) (2) (3) (3) (4) (5) (5) (7) (7) (8) (10) (10) 
line 424: preorderTraversal
(5) (3) (2) (1) (2) (3) (4) (7) (5) (8) (7) (10) (10) 
line 425: postorderTraversal
(1) (2) (2) (4) (3) (3) (5) (7) (10) (10) (8) (7) (5) 
line 426: clear
