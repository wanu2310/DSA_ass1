line 1: k=1
line 2: search (5)
FALSE
line 3: inorderTraversal

line 4: remove (10)
line 5: inorderTraversal

line 6: insert (4)
line 7: inorderTraversal
(4) 
line 8: kNearestNeighbour 9 (4)
(4) 
line 9: inorderTraversal
(4) 
line 10: preorderTraversal
(4) 
line 11: inorderTraversal
(4) 
line 12: insert (4)
line 13: inorderTraversal
(4) (4) 
line 14: insert (8)
line 15: inorderTraversal
(4) (4) (8) 
line 16: insert (9)
line 17: inorderTraversal
(4) (4) (8) (9) 
line 18: remove (8)
line 19: inorderTraversal
(4) (4) (9) 
line 20: kNearestNeighbour 4 (2)
(4) (4) (9) 
line 21: inorderTraversal
(4) (4) (9) 
line 22: nearestNeighbour (2)
(4) 
line 23: inorderTraversal
(4) (4) (9) 
line 24: insert (10)
line 25: inorderTraversal
(4) (4) (9) (10) 
line 26: nearestNeighbour (2)
(4) 
line 27: inorderTraversal
(4) (4) (9) (10) 
line 28: kNearestNeighbour 7 (1)
(4) (4) (9) (10) 
line 29: inorderTraversal
(4) (4) (9) (10) 
line 30: nearestNeighbour (5)
(4) 
line 31: inorderTraversal
(4) (4) (9) (10) 
line 32: kNearestNeighbour 1 (4)
(4) 
line 33: inorderTraversal
(4) (4) (9) (10) 
line 34: insert (2)
line 35: inorderTraversal
(2) (4) (4) (9) (10) 
line 36: kNearestNeighbour 9 (6)
(2) (4) (4) (9) (10) 
line 37: inorderTraversal
(2) (4) (4) (9) (10) 
line 38: search (2)
TRUE
line 39: inorderTraversal
(2) (4) (4) (9) (10) 
line 40: insert (7)
line 41: inorderTraversal
(2) (4) (4) (7) (9) (10) 
line 42: remove (4)
line 43: inorderTraversal
(2) (4) (7) (9) (10) 
line 44: postorderTraversal
(2) (10) (9) (7) (4) 
line 45: inorderTraversal
(2) (4) (7) (9) (10) 
line 46: insert (3)
line 47: inorderTraversal
(2) (3) (4) (7) (9) (10) 
line 48: insert (6)
line 49: inorderTraversal
(2) (3) (4) (6) (7) (9) (10) 
line 50: kNearestNeighbour 6 (5)
(2) (3) (4) (6) (7) (9) 
line 51: inorderTraversal
(2) (3) (4) (6) (7) (9) (10) 
line 52: clear
line 53: buildTree 6
(6) (8) (1) (9) (2) (9) 
line 54: inorderTraversal
(1) (2) (6) (8) (9) (9) 
line 55: nearestNeighbour (10)
(9) 
line 56: inorderTraversal
(1) (2) (6) (8) (9) (9) 
line 57: kNearestNeighbour 2 (5)
(2) (6) 
line 58: inorderTraversal
(1) (2) (6) (8) (9) (9) 
line 59: clear
line 60: buildTree 3
(3) (3) (8) 
line 61: inorderTraversal
(3) (3) (8) 
line 62: insert (4)
line 63: inorderTraversal
(3) (3) (4) (8) 
line 64: insert (5)
line 65: inorderTraversal
(3) (3) (4) (5) (8) 
line 66: kNearestNeighbour 2 (5)
(4) (5) 
line 67: inorderTraversal
(3) (3) (4) (5) (8) 
line 68: insert (8)
line 69: inorderTraversal
(3) (3) (4) (5) (8) (8) 
line 70: remove (8)
line 71: inorderTraversal
(3) (3) (4) (5) (8) 
line 72: postorderTraversal
(5) (4) (8) (3) (3) 
line 73: inorderTraversal
(3) (3) (4) (5) (8) 
line 74: insert (1)
line 75: inorderTraversal
(1) (3) (3) (4) (5) (8) 
line 76: clear
line 77: buildTree 19
(4) (8) (6) (6) (6) (5) (2) (6) (7) (7) (3) (10) (7) (7) (9) (9) (1) (5) (4) 
line 78: inorderTraversal
(1) (2) (3) (4) (4) (5) (5) (6) (6) (6) (6) (7) (7) (7) (7) (8) (9) (9) (10) 
line 79: insert (7)
line 80: inorderTraversal
(1) (2) (3) (4) (4) (5) (5) (6) (6) (6) (6) (7) (7) (7) (7) (7) (8) (9) (9) (10) 
line 81: insert (3)
line 82: inorderTraversal
(1) (2) (3) (3) (4) (4) (5) (5) (6) (6) (6) (6) (7) (7) (7) (7) (7) (8) (9) (9) (10) 
line 83: remove (7)
line 84: inorderTraversal
(1) (2) (3) (3) (4) (4) (5) (5) (6) (6) (6) (6) (7) (7) (7) (7) (8) (9) (9) (10) 
line 85: nodeCount_height_leafCount
nodeCount=20;height=6;leafCount=7
line 86: inorderTraversal
(1) (2) (3) (3) (4) (4) (5) (5) (6) (6) (6) (6) (7) (7) (7) (7) (8) (9) (9) (10) 
line 87: insert (6)
line 88: inorderTraversal
(1) (2) (3) (3) (4) (4) (5) (5) (6) (6) (6) (6) (6) (7) (7) (7) (7) (8) (9) (9) (10) 
line 89: kNearestNeighbour 6 (2)
(1) (2) (3) (3) (4) (4) 
line 90: inorderTraversal
(1) (2) (3) (3) (4) (4) (5) (5) (6) (6) (6) (6) (6) (7) (7) (7) (7) (8) (9) (9) (10) 
line 91: kNearestNeighbour 3 (9)
(9) (9) (10) 
line 92: inorderTraversal
(1) (2) (3) (3) (4) (4) (5) (5) (6) (6) (6) (6) (6) (7) (7) (7) (7) (8) (9) (9) (10) 
line 93: insert (8)
line 94: inorderTraversal
(1) (2) (3) (3) (4) (4) (5) (5) (6) (6) (6) (6) (6) (7) (7) (7) (7) (8) (8) (9) (9) (10) 
line 95: remove (3)
line 96: inorderTraversal
(1) (2) (3) (4) (4) (5) (5) (6) (6) (6) (6) (6) (7) (7) (7) (7) (8) (8) (9) (9) (10) 
line 97: nearestNeighbour (3)
(3) 
line 98: inorderTraversal
(1) (2) (3) (4) (4) (5) (5) (6) (6) (6) (6) (6) (7) (7) (7) (7) (8) (8) (9) (9) (10) 
line 99: insert (8)
line 100: inorderTraversal
(1) (2) (3) (4) (4) (5) (5) (6) (6) (6) (6) (6) (7) (7) (7) (7) (8) (8) (8) (9) (9) (10) 
line 101: nodeCount_height_leafCount
nodeCount=22;height=6;leafCount=8
line 102: inorderTraversal
(1) (2) (3) (4) (4) (5) (5) (6) (6) (6) (6) (6) (7) (7) (7) (7) (8) (8) (8) (9) (9) (10) 
line 103: remove (2)
line 104: inorderTraversal
(1) (3) (4) (4) (5) (5) (6) (6) (6) (6) (6) (7) (7) (7) (7) (8) (8) (8) (9) (9) (10) 
line 105: postorderTraversal
(1) (3) (4) (5) (5) (4) (6) (6) (6) (6) (7) (7) (7) (8) (8) (10) (9) (9) (8) (7) (6) 
line 106: inorderTraversal
(1) (3) (4) (4) (5) (5) (6) (6) (6) (6) (6) (7) (7) (7) (7) (8) (8) (8) (9) (9) (10) 
line 107: remove (3)
line 108: inorderTraversal
(1) (4) (4) (5) (5) (6) (6) (6) (6) (6) (7) (7) (7) (7) (8) (8) (8) (9) (9) (10) 
line 109: remove (6)
line 110: inorderTraversal
(1) (4) (4) (5) (5) (6) (6) (6) (6) (7) (7) (7) (7) (8) (8) (8) (9) (9) (10) 
line 111: search (5)
TRUE
line 112: inorderTraversal
(1) (4) (4) (5) (5) (6) (6) (6) (6) (7) (7) (7) (7) (8) (8) (8) (9) (9) (10) 
line 113: nearestNeighbour (4)
(4) 
line 114: inorderTraversal
(1) (4) (4) (5) (5) (6) (6) (6) (6) (7) (7) (7) (7) (8) (8) (8) (9) (9) (10) 
line 115: clear
line 116: buildTree 9
(2) (8) (10) (7) (3) (1) (3) (10) (2) 
line 117: inorderTraversal
(1) (2) (2) (3) (3) (7) (8) (10) (10) 
line 118: nearestNeighbour (4)
(3) 
line 119: inorderTraversal
(1) (2) (2) (3) (3) (7) (8) (10) (10) 
line 120: kNearestNeighbour 9 (4)
(1) (2) (2) (3) (3) (7) (8) (10) (10) 
line 121: inorderTraversal
(1) (2) (2) (3) (3) (7) (8) (10) (10) 
line 122: search (2)
TRUE
line 123: inorderTraversal
(1) (2) (2) (3) (3) (7) (8) (10) (10) 
line 124: clear
line 125: buildTree 14
(6) (10) (10) (5) (5) (6) (2) (4) (5) (5) (10) (5) (9) (3) 
line 126: inorderTraversal
(2) (3) (4) (5) (5) (5) (5) (5) (6) (6) (9) (10) (10) (10) 
line 127: nearestNeighbour (10)
(10) 
line 128: inorderTraversal
(2) (3) (4) (5) (5) (5) (5) (5) (6) (6) (9) (10) (10) (10) 
line 129: kNearestNeighbour 1 (3)
(3) 
line 130: inorderTraversal
(2) (3) (4) (5) (5) (5) (5) (5) (6) (6) (9) (10) (10) (10) 
line 131: insert (10)
line 132: inorderTraversal
(2) (3) (4) (5) (5) (5) (5) (5) (6) (6) (9) (10) (10) (10) (10) 
line 133: kNearestNeighbour 6 (4)
(3) (4) (5) (5) (5) (5) 
line 134: inorderTraversal
(2) (3) (4) (5) (5) (5) (5) (5) (6) (6) (9) (10) (10) (10) (10) 
line 135: insert (8)
line 136: inorderTraversal
(2) (3) (4) (5) (5) (5) (5) (5) (6) (6) (8) (9) (10) (10) (10) (10) 
line 137: kNearestNeighbour 9 (4)
(2) (3) (4) (5) (5) (5) (5) (5) (6) 
line 138: inorderTraversal
(2) (3) (4) (5) (5) (5) (5) (5) (6) (6) (8) (9) (10) (10) (10) (10) 
line 139: postorderTraversal
(2) (4) (3) (5) (5) (5) (5) (8) (9) (6) (10) (10) (10) (10) (6) (5) 
line 140: inorderTraversal
(2) (3) (4) (5) (5) (5) (5) (5) (6) (6) (8) (9) (10) (10) (10) (10) 
line 141: kNearestNeighbour 1 (6)
(6) 
line 142: inorderTraversal
(2) (3) (4) (5) (5) (5) (5) (5) (6) (6) (8) (9) (10) (10) (10) (10) 
line 143: nearestNeighbour (6)
(6) 
line 144: inorderTraversal
(2) (3) (4) (5) (5) (5) (5) (5) (6) (6) (8) (9) (10) (10) (10) (10) 
line 145: kNearestNeighbour 10 (10)
(5) (5) (6) (6) (8) (9) (10) (10) (10) (10) 
line 146: inorderTraversal
(2) (3) (4) (5) (5) (5) (5) (5) (6) (6) (8) (9) (10) (10) (10) (10) 
line 147: clear
line 148: buildTree 11
(2) (8) (5) (7) (9) (7) (6) (9) (4) (4) (3) 
line 149: inorderTraversal
(2) (3) (4) (4) (5) (6) (7) (7) (8) (9) (9) 
line 150: kNearestNeighbour 10 (1)
(2) (3) (4) (4) (5) (6) (7) (7) (8) (9) 
line 151: inorderTraversal
(2) (3) (4) (4) (5) (6) (7) (7) (8) (9) (9) 
line 152: search (9)
TRUE
line 153: inorderTraversal
(2) (3) (4) (4) (5) (6) (7) (7) (8) (9) (9) 
line 154: search (9)
TRUE
line 155: inorderTraversal
(2) (3) (4) (4) (5) (6) (7) (7) (8) (9) (9) 
line 156: insert (6)
line 157: inorderTraversal
(2) (3) (4) (4) (5) (6) (6) (7) (7) (8) (9) (9) 
line 158: clear
line 159: buildTree 8
(5) (4) (6) (3) (2) (3) (10) (3) 
line 160: inorderTraversal
(2) (3) (3) (3) (4) (5) (6) (10) 
line 161: remove (6)
line 162: inorderTraversal
(2) (3) (3) (3) (4) (5) (10) 
line 163: nearestNeighbour (9)
(10) 
line 164: inorderTraversal
(2) (3) (3) (3) (4) (5) (10) 
line 165: kNearestNeighbour 5 (7)
(3) (3) (4) (5) (10) 
line 166: inorderTraversal
(2) (3) (3) (3) (4) (5) (10) 
line 167: preorderTraversal
(3) (2) (4) (3) (3) (10) (5) 
line 168: inorderTraversal
(2) (3) (3) (3) (4) (5) (10) 
line 169: nearestNeighbour (3)
(3) 
line 170: inorderTraversal
(2) (3) (3) (3) (4) (5) (10) 
line 171: clear
line 172: buildTree 10
(7) (3) (4) (1) (3) (6) (7) (7) (7) (5) 
line 173: inorderTraversal
(1) (3) (3) (4) (5) (6) (7) (7) (7) (7) 
line 174: insert (2)
line 175: inorderTraversal
(1) (2) (3) (3) (4) (5) (6) (7) (7) (7) (7) 
line 176: search (7)
TRUE
line 177: inorderTraversal
(1) (2) (3) (3) (4) (5) (6) (7) (7) (7) (7) 
line 178: insert (7)
line 179: inorderTraversal
(1) (2) (3) (3) (4) (5) (6) (7) (7) (7) (7) (7) 
line 180: nearestNeighbour (4)
(4) 
line 181: inorderTraversal
(1) (2) (3) (3) (4) (5) (6) (7) (7) (7) (7) (7) 
line 182: insert (2)
line 183: inorderTraversal
(1) (2) (2) (3) (3) (4) (5) (6) (7) (7) (7) (7) (7) 
line 184: kNearestNeighbour 7 (4)
(2) (2) (3) (3) (4) (5) (6) 
line 185: inorderTraversal
(1) (2) (2) (3) (3) (4) (5) (6) (7) (7) (7) (7) (7) 
line 186: insert (9)
line 187: inorderTraversal
(1) (2) (2) (3) (3) (4) (5) (6) (7) (7) (7) (7) (7) (9) 
line 188: clear
line 189: buildTree 9
(7) (1) (10) (7) (5) (6) (3) (9) (8) 
line 190: inorderTraversal
(1) (3) (5) (6) (7) (7) (8) (9) (10) 
line 191: insert (6)
line 192: inorderTraversal
(1) (3) (5) (6) (6) (7) (7) (8) (9) (10) 
line 193: kNearestNeighbour 7 (3)
(1) (3) (5) (6) (6) (7) (7) 
line 194: inorderTraversal
(1) (3) (5) (6) (6) (7) (7) (8) (9) (10) 
line 195: insert (7)
line 196: inorderTraversal
(1) (3) (5) (6) (6) (7) (7) (7) (8) (9) (10) 
line 197: preorderTraversal
(7) (3) (1) (5) (6) (6) (8) (7) (7) (9) (10) 
line 198: inorderTraversal
(1) (3) (5) (6) (6) (7) (7) (7) (8) (9) (10) 
line 199: insert (8)
line 200: inorderTraversal
(1) (3) (5) (6) (6) (7) (7) (7) (8) (8) (9) (10) 
line 201: kNearestNeighbour 9 (8)
(6) (6) (7) (7) (7) (8) (8) (9) (10) 
line 202: inorderTraversal
(1) (3) (5) (6) (6) (7) (7) (7) (8) (8) (9) (10) 
line 203: remove (7)
line 204: inorderTraversal
(1) (3) (5) (6) (6) (7) (7) (8) (8) (9) (10) 
line 205: remove (7)
line 206: inorderTraversal
(1) (3) (5) (6) (6) (7) (8) (8) (9) (10) 
line 207: insert (9)
line 208: inorderTraversal
(1) (3) (5) (6) (6) (7) (8) (8) (9) (9) (10) 
line 209: nearestNeighbour (5)
(5) 
line 210: inorderTraversal
(1) (3) (5) (6) (6) (7) (8) (8) (9) (9) (10) 
line 211: nearestNeighbour (9)
(9) 
line 212: inorderTraversal
(1) (3) (5) (6) (6) (7) (8) (8) (9) (9) (10) 
line 213: insert (4)
line 214: inorderTraversal
(1) (3) (4) (5) (6) (6) (7) (8) (8) (9) (9) (10) 
line 215: nearestNeighbour (10)
(10) 
line 216: inorderTraversal
(1) (3) (4) (5) (6) (6) (7) (8) (8) (9) (9) (10) 
line 217: kNearestNeighbour 6 (5)
(3) (4) (5) (6) (6) (7) 
line 218: inorderTraversal
(1) (3) (4) (5) (6) (6) (7) (8) (8) (9) (9) (10) 
line 219: search (8)
TRUE
line 220: inorderTraversal
(1) (3) (4) (5) (6) (6) (7) (8) (8) (9) (9) (10) 
line 221: nearestNeighbour (4)
(4) 
line 222: inorderTraversal
(1) (3) (4) (5) (6) (6) (7) (8) (8) (9) (9) (10) 
line 223: clear
line 224: buildTree 15
(5) (8) (9) (8) (4) (8) (6) (1) (4) (2) (6) (3) (6) (6) (8) 
line 225: inorderTraversal
(1) (2) (3) (4) (4) (5) (6) (6) (6) (6) (8) (8) (8) (8) (9) 
line 226: search (6)
TRUE
line 227: inorderTraversal
(1) (2) (3) (4) (4) (5) (6) (6) (6) (6) (8) (8) (8) (8) (9) 
line 228: nearestNeighbour (7)
(6) 
line 229: inorderTraversal
(1) (2) (3) (4) (4) (5) (6) (6) (6) (6) (8) (8) (8) (8) (9) 
line 230: insert (5)
line 231: inorderTraversal
(1) (2) (3) (4) (4) (5) (5) (6) (6) (6) (6) (8) (8) (8) (8) (9) 
line 232: clear
line 233: buildTree 14
(3) (10) (5) (4) (7) (5) (10) (2) (2) (7) (3) (3) (3) (4) 
line 234: inorderTraversal
(2) (2) (3) (3) (3) (3) (4) (4) (5) (5) (7) (7) (10) (10) 
line 235: clear
line 236: buildTree 11
(7) (7) (5) (4) (7) (6) (1) (10) (6) (6) (8) 
line 237: inorderTraversal
(1) (4) (5) (6) (6) (6) (7) (7) (7) (8) (10) 
line 238: insert (3)
line 239: inorderTraversal
(1) (3) (4) (5) (6) (6) (6) (7) (7) (7) (8) (10) 
line 240: kNearestNeighbour 9 (2)
(1) (3) (4) (5) (6) (6) (6) (7) (7) 
line 241: inorderTraversal
(1) (3) (4) (5) (6) (6) (6) (7) (7) (7) (8) (10) 
line 242: insert (4)
line 243: inorderTraversal
(1) (3) (4) (4) (5) (6) (6) (6) (7) (7) (7) (8) (10) 
line 244: nearestNeighbour (3)
(3) 
line 245: inorderTraversal
(1) (3) (4) (4) (5) (6) (6) (6) (7) (7) (7) (8) (10) 
line 246: kNearestNeighbour 7 (9)
(6) (6) (7) (7) (7) (8) (10) 
line 247: inorderTraversal
(1) (3) (4) (4) (5) (6) (6) (6) (7) (7) (7) (8) (10) 
line 248: search (10)
TRUE
line 249: inorderTraversal
(1) (3) (4) (4) (5) (6) (6) (6) (7) (7) (7) (8) (10) 
line 250: search (6)
TRUE
line 251: inorderTraversal
(1) (3) (4) (4) (5) (6) (6) (6) (7) (7) (7) (8) (10) 
line 252: clear
line 253: buildTree 1
(8) 
line 254: inorderTraversal
(8) 
line 255: nearestNeighbour (8)
(8) 
line 256: inorderTraversal
(8) 
line 257: preorderTraversal
(8) 
line 258: inorderTraversal
(8) 
line 259: preorderTraversal
(8) 
line 260: inorderTraversal
(8) 
line 261: insert (7)
line 262: inorderTraversal
(7) (8) 
line 263: insert (1)
line 264: inorderTraversal
(1) (7) (8) 
line 265: kNearestNeighbour 4 (2)
(1) (7) (8) 
line 266: inorderTraversal
(1) (7) (8) 
line 267: search (1)
TRUE
line 268: inorderTraversal
(1) (7) (8) 
line 269: nearestNeighbour (2)
(1) 
line 270: inorderTraversal
(1) (7) (8) 
line 271: insert (1)
line 272: inorderTraversal
(1) (1) (7) (8) 
line 273: remove (5)
line 274: inorderTraversal
(1) (1) (7) (8) 
line 275: insert (7)
line 276: inorderTraversal
(1) (1) (7) (7) (8) 
line 277: kNearestNeighbour 8 (8)
(1) (1) (7) (7) (8) 
line 278: inorderTraversal
(1) (1) (7) (7) (8) 
line 279: insert (2)
line 280: inorderTraversal
(1) (1) (2) (7) (7) (8) 
line 281: clear
line 282: buildTree 19
(9) (2) (7) (7) (4) (5) (2) (4) (3) (10) (10) (4) (7) (4) (6) (3) (9) (1) (4) 
line 283: inorderTraversal
(1) (2) (2) (3) (3) (4) (4) (4) (4) (4) (5) (6) (7) (7) (7) (9) (9) (10) (10) 
line 284: insert (5)
line 285: inorderTraversal
(1) (2) (2) (3) (3) (4) (4) (4) (4) (4) (5) (5) (6) (7) (7) (7) (9) (9) (10) (10) 
line 286: remove (5)
line 287: inorderTraversal
(1) (2) (2) (3) (3) (4) (4) (4) (4) (4) (5) (6) (7) (7) (7) (9) (9) (10) (10) 
line 288: nodeCount_height_leafCount
nodeCount=19;height=7;leafCount=8
line 289: inorderTraversal
(1) (2) (2) (3) (3) (4) (4) (4) (4) (4) (5) (6) (7) (7) (7) (9) (9) (10) (10) 
line 290: clear
line 291: buildTree 15
(5) (8) (5) (7) (3) (7) (3) (7) (6) (2) (1) (2) (4) (8) (2) 
line 292: inorderTraversal
(1) (2) (2) (2) (3) (3) (4) (5) (5) (6) (7) (7) (7) (8) (8) 
line 293: nearestNeighbour (2)
(2) 
line 294: inorderTraversal
(1) (2) (2) (2) (3) (3) (4) (5) (5) (6) (7) (7) (7) (8) (8) 
line 295: kNearestNeighbour 2 (6)
(5) (6) 
line 296: inorderTraversal
(1) (2) (2) (2) (3) (3) (4) (5) (5) (6) (7) (7) (7) (8) (8) 
line 297: insert (1)
line 298: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (4) (5) (5) (6) (7) (7) (7) (8) (8) 
line 299: search (2)
TRUE
line 300: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (4) (5) (5) (6) (7) (7) (7) (8) (8) 
line 301: kNearestNeighbour 5 (9)
(7) (7) (7) (8) (8) 
line 302: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (4) (5) (5) (6) (7) (7) (7) (8) (8) 
line 303: nodeCount_height_leafCount
nodeCount=16;height=5;leafCount=6
line 304: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (4) (5) (5) (6) (7) (7) (7) (8) (8) 
line 305: nearestNeighbour (3)
(3) 
line 306: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (4) (5) (5) (6) (7) (7) (7) (8) (8) 
line 307: nodeCount_height_leafCount
nodeCount=16;height=5;leafCount=6
line 308: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (4) (5) (5) (6) (7) (7) (7) (8) (8) 
line 309: kNearestNeighbour 5 (9)
(7) (7) (7) (8) (8) 
line 310: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (4) (5) (5) (6) (7) (7) (7) (8) (8) 
line 311: nearestNeighbour (9)
(8) 
line 312: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (4) (5) (5) (6) (7) (7) (7) (8) (8) 
line 313: insert (6)
line 314: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (4) (5) (5) (6) (6) (7) (7) (7) (8) (8) 
line 315: insert (6)
line 316: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (4) (5) (5) (6) (6) (6) (7) (7) (7) (8) (8) 
line 317: nearestNeighbour (4)
(4) 
line 318: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (4) (5) (5) (6) (6) (6) (7) (7) (7) (8) (8) 
line 319: remove (1)
line 320: inorderTraversal
(1) (2) (2) (2) (3) (3) (4) (5) (5) (6) (6) (6) (7) (7) (7) (8) (8) 
line 321: remove (1)
line 322: inorderTraversal
(2) (2) (2) (3) (3) (4) (5) (5) (6) (6) (6) (7) (7) (7) (8) (8) 
line 323: kNearestNeighbour 4 (3)
(2) (3) (3) (4) 
line 324: inorderTraversal
(2) (2) (2) (3) (3) (4) (5) (5) (6) (6) (6) (7) (7) (7) (8) (8) 
line 325: kNearestNeighbour 5 (10)
(7) (7) (7) (8) (8) 
line 326: inorderTraversal
(2) (2) (2) (3) (3) (4) (5) (5) (6) (6) (6) (7) (7) (7) (8) (8) 
line 327: insert (2)
line 328: inorderTraversal
(2) (2) (2) (2) (3) (3) (4) (5) (5) (6) (6) (6) (7) (7) (7) (8) (8) 
line 329: clear
line 330: buildTree 8
(9) (1) (3) (4) (4) (4) (5) (8) 
line 331: inorderTraversal
(1) (3) (4) (4) (4) (5) (8) (9) 
line 332: nearestNeighbour (1)
(1) 
line 333: inorderTraversal
(1) (3) (4) (4) (4) (5) (8) (9) 
line 334: kNearestNeighbour 10 (4)
(1) (3) (4) (4) (4) (5) (8) (9) 
line 335: inorderTraversal
(1) (3) (4) (4) (4) (5) (8) (9) 
line 336: insert (2)
line 337: inorderTraversal
(1) (2) (3) (4) (4) (4) (5) (8) (9) 
line 338: insert (3)
line 339: inorderTraversal
(1) (2) (3) (3) (4) (4) (4) (5) (8) (9) 
line 340: nearestNeighbour (5)
(5) 
line 341: inorderTraversal
(1) (2) (3) (3) (4) (4) (4) (5) (8) (9) 
line 342: kNearestNeighbour 10 (3)
(1) (2) (3) (3) (4) (4) (4) (5) (8) (9) 
line 343: inorderTraversal
(1) (2) (3) (3) (4) (4) (4) (5) (8) (9) 
line 344: insert (8)
line 345: inorderTraversal
(1) (2) (3) (3) (4) (4) (4) (5) (8) (8) (9) 
line 346: insert (8)
line 347: inorderTraversal
(1) (2) (3) (3) (4) (4) (4) (5) (8) (8) (8) (9) 
line 348: nearestNeighbour (5)
(5) 
line 349: inorderTraversal
(1) (2) (3) (3) (4) (4) (4) (5) (8) (8) (8) (9) 
line 350: nearestNeighbour (5)
(5) 
line 351: inorderTraversal
(1) (2) (3) (3) (4) (4) (4) (5) (8) (8) (8) (9) 
line 352: insert (5)
line 353: inorderTraversal
(1) (2) (3) (3) (4) (4) (4) (5) (5) (8) (8) (8) (9) 
line 354: insert (7)
line 355: inorderTraversal
(1) (2) (3) (3) (4) (4) (4) (5) (5) (7) (8) (8) (8) (9) 
line 356: nearestNeighbour (8)
(8) 
line 357: inorderTraversal
(1) (2) (3) (3) (4) (4) (4) (5) (5) (7) (8) (8) (8) (9) 
line 358: kNearestNeighbour 9 (5)
(3) (3) (4) (4) (4) (5) (5) (7) (8) 
line 359: inorderTraversal
(1) (2) (3) (3) (4) (4) (4) (5) (5) (7) (8) (8) (8) (9) 
line 360: insert (6)
line 361: inorderTraversal
(1) (2) (3) (3) (4) (4) (4) (5) (5) (6) (7) (8) (8) (8) (9) 
line 362: nodeCount_height_leafCount
nodeCount=15;height=6;leafCount=5
line 363: inorderTraversal
(1) (2) (3) (3) (4) (4) (4) (5) (5) (6) (7) (8) (8) (8) (9) 
line 364: insert (10)
line 365: inorderTraversal
(1) (2) (3) (3) (4) (4) (4) (5) (5) (6) (7) (8) (8) (8) (9) (10) 
line 366: insert (8)
line 367: inorderTraversal
(1) (2) (3) (3) (4) (4) (4) (5) (5) (6) (7) (8) (8) (8) (8) (9) (10) 
line 368: nearestNeighbour (8)
(8) 
line 369: inorderTraversal
(1) (2) (3) (3) (4) (4) (4) (5) (5) (6) (7) (8) (8) (8) (8) (9) (10) 
line 370: search (6)
TRUE
line 371: inorderTraversal
(1) (2) (3) (3) (4) (4) (4) (5) (5) (6) (7) (8) (8) (8) (8) (9) (10) 
line 372: insert (7)
line 373: inorderTraversal
(1) (2) (3) (3) (4) (4) (4) (5) (5) (6) (7) (7) (8) (8) (8) (8) (9) (10) 
line 374: remove (10)
line 375: inorderTraversal
(1) (2) (3) (3) (4) (4) (4) (5) (5) (6) (7) (7) (8) (8) (8) (8) (9) 
line 376: nearestNeighbour (2)
(2) 
line 377: inorderTraversal
(1) (2) (3) (3) (4) (4) (4) (5) (5) (6) (7) (7) (8) (8) (8) (8) (9) 
line 378: nearestNeighbour (1)
(1) 
line 379: inorderTraversal
(1) (2) (3) (3) (4) (4) (4) (5) (5) (6) (7) (7) (8) (8) (8) (8) (9) 
line 380: clear
line 381: buildTree 8
(6) (4) (10) (4) (9) (3) (10) (3) 
line 382: inorderTraversal
(3) (3) (4) (4) (6) (9) (10) (10) 
line 383: nodeCount_height_leafCount
nodeCount=8;height=4;leafCount=3
line 384: inorderTraversal
(3) (3) (4) (4) (6) (9) (10) (10) 
line 385: nearestNeighbour (4)
(4) 
line 386: inorderTraversal
(3) (3) (4) (4) (6) (9) (10) (10) 
line 387: postorderTraversal
(3) (3) (6) (4) (10) (10) (9) (4) 
line 388: inorderTraversal
(3) (3) (4) (4) (6) (9) (10) (10) 
line 389: kNearestNeighbour 6 (5)
(3) (3) (4) (4) (6) (9) 
line 390: inorderTraversal
(3) (3) (4) (4) (6) (9) (10) (10) 
line 391: insert (7)
line 392: inorderTraversal
(3) (3) (4) (4) (6) (7) (9) (10) (10) 
line 393: nearestNeighbour (8)
(7) 
line 394: inorderTraversal
(3) (3) (4) (4) (6) (7) (9) (10) (10) 
line 395: remove (9)
line 396: inorderTraversal
(3) (3) (4) (4) (6) (7) (10) (10) 
line 397: nearestNeighbour (8)
(7) 
line 398: inorderTraversal
(3) (3) (4) (4) (6) (7) (10) (10) 
line 399: insert (2)
line 400: inorderTraversal
(2) (3) (3) (4) (4) (6) (7) (10) (10) 
line 401: kNearestNeighbour 5 (4)
(3) (3) (4) (4) (6) 
line 402: inorderTraversal
(2) (3) (3) (4) (4) (6) (7) (10) (10) 
line 403: insert (2)
line 404: inorderTraversal
(2) (2) (3) (3) (4) (4) (6) (7) (10) (10) 
line 405: remove (3)
line 406: inorderTraversal
(2) (2) (3) (4) (4) (6) (7) (10) (10) 
line 407: insert (5)
line 408: inorderTraversal
(2) (2) (3) (4) (4) (5) (6) (7) (10) (10) 
line 409: nearestNeighbour (6)
(6) 
line 410: inorderTraversal
(2) (2) (3) (4) (4) (5) (6) (7) (10) (10) 
line 411: insert (5)
line 412: inorderTraversal
(2) (2) (3) (4) (4) (5) (5) (6) (7) (10) (10) 
line 413: nearestNeighbour (7)
(7) 
line 414: inorderTraversal
(2) (2) (3) (4) (4) (5) (5) (6) (7) (10) (10) 
line 415: remove (2)
line 416: inorderTraversal
(2) (3) (4) (4) (5) (5) (6) (7) (10) (10) 
line 417: insert (1)
line 418: inorderTraversal
(1) (2) (3) (4) (4) (5) (5) (6) (7) (10) (10) 
line 419: nodeCount_height_leafCount
nodeCount=11;height=6;leafCount=4
line 420: inorderTraversal
(1) (2) (3) (4) (4) (5) (5) (6) (7) (10) (10) 
line 421: preorderTraversal
(4) (3) (2) (1) (10) (4) (6) (5) (5) (7) (10) 
line 422: postorderTraversal
(1) (2) (3) (5) (5) (7) (6) (4) (10) (10) (4) 
line 423: clear
