line 1: k=1
line 2: insert (2)
line 3: inorderTraversal
(2) 
line 4: insert (5)
line 5: inorderTraversal
(2) (5) 
line 6: kNearestNeighbour 1 (4)
(5) 
line 7: inorderTraversal
(2) (5) 
line 8: nearestNeighbour (9)
(5) 
line 9: inorderTraversal
(2) (5) 
line 10: kNearestNeighbour 2 (2)
(2) (5) 
line 11: inorderTraversal
(2) (5) 
line 12: insert (5)
line 13: inorderTraversal
(2) (5) (5) 
line 14: kNearestNeighbour 8 (7)
(2) (5) (5) 
line 15: inorderTraversal
(2) (5) (5) 
line 16: insert (8)
line 17: inorderTraversal
(2) (5) (5) (8) 
line 18: remove (5)
line 19: inorderTraversal
(2) (5) (8) 
line 20: insert (6)
line 21: inorderTraversal
(2) (5) (6) (8) 
line 22: nearestNeighbour (3)
(2) 
line 23: inorderTraversal
(2) (5) (6) (8) 
line 24: clear
line 25: buildTree 8
(9) (10) (3) (4) (1) (5) (9) (10) 
line 26: inorderTraversal
(1) (3) (4) (5) (9) (9) (10) (10) 
line 27: insert (3)
line 28: inorderTraversal
(1) (3) (3) (4) (5) (9) (9) (10) (10) 
line 29: insert (8)
line 30: inorderTraversal
(1) (3) (3) (4) (5) (8) (9) (9) (10) (10) 
line 31: insert (10)
line 32: inorderTraversal
(1) (3) (3) (4) (5) (8) (9) (9) (10) (10) (10) 
line 33: insert (5)
line 34: inorderTraversal
(1) (3) (3) (4) (5) (5) (8) (9) (9) (10) (10) (10) 
line 35: insert (1)
line 36: inorderTraversal
(1) (1) (3) (3) (4) (5) (5) (8) (9) (9) (10) (10) (10) 
line 37: insert (7)
line 38: inorderTraversal
(1) (1) (3) (3) (4) (5) (5) (7) (8) (9) (9) (10) (10) (10) 
line 39: nearestNeighbour (2)
(1) 
line 40: inorderTraversal
(1) (1) (3) (3) (4) (5) (5) (7) (8) (9) (9) (10) (10) (10) 
line 41: kNearestNeighbour 3 (8)
(7) (8) (9) 
line 42: inorderTraversal
(1) (1) (3) (3) (4) (5) (5) (7) (8) (9) (9) (10) (10) (10) 
line 43: search (10)
TRUE
line 44: inorderTraversal
(1) (1) (3) (3) (4) (5) (5) (7) (8) (9) (9) (10) (10) (10) 
line 45: nearestNeighbour (7)
(7) 
line 46: inorderTraversal
(1) (1) (3) (3) (4) (5) (5) (7) (8) (9) (9) (10) (10) (10) 
line 47: remove (4)
line 48: inorderTraversal
(1) (1) (3) (3) (5) (5) (7) (8) (9) (9) (10) (10) (10) 
line 49: insert (5)
line 50: inorderTraversal
(1) (1) (3) (3) (5) (5) (5) (7) (8) (9) (9) (10) (10) (10) 
line 51: clear
line 52: buildTree 20
(6) (6) (4) (5) (9) (6) (2) (1) (8) (1) (6) (1) (1) (4) (2) (10) (2) (10) (8) (3) 
line 53: inorderTraversal
(1) (1) (1) (1) (2) (2) (2) (3) (4) (4) (5) (6) (6) (6) (6) (8) (8) (9) (10) (10) 
line 54: kNearestNeighbour 8 (5)
(3) (4) (4) (5) (6) (6) (6) (6) 
line 55: inorderTraversal
(1) (1) (1) (1) (2) (2) (2) (3) (4) (4) (5) (6) (6) (6) (6) (8) (8) (9) (10) (10) 
line 56: nearestNeighbour (2)
(2) 
line 57: inorderTraversal
(1) (1) (1) (1) (2) (2) (2) (3) (4) (4) (5) (6) (6) (6) (6) (8) (8) (9) (10) (10) 
line 58: clear
line 59: buildTree 3
(2) (8) (9) 
line 60: inorderTraversal
(2) (8) (9) 
line 61: nearestNeighbour (2)
(2) 
line 62: inorderTraversal
(2) (8) (9) 
line 63: insert (9)
line 64: inorderTraversal
(2) (8) (9) (9) 
line 65: insert (7)
line 66: inorderTraversal
(2) (7) (8) (9) (9) 
line 67: nearestNeighbour (8)
(8) 
line 68: inorderTraversal
(2) (7) (8) (9) (9) 
line 69: preorderTraversal
(8) (2) (7) (9) (9) 
line 70: inorderTraversal
(2) (7) (8) (9) (9) 
line 71: insert (7)
line 72: inorderTraversal
(2) (7) (7) (8) (9) (9) 
line 73: search (7)
TRUE
line 74: inorderTraversal
(2) (7) (7) (8) (9) (9) 
line 75: nearestNeighbour (3)
(2) 
line 76: inorderTraversal
(2) (7) (7) (8) (9) (9) 
line 77: nearestNeighbour (8)
(8) 
line 78: inorderTraversal
(2) (7) (7) (8) (9) (9) 
line 79: nearestNeighbour (6)
(7) 
line 80: inorderTraversal
(2) (7) (7) (8) (9) (9) 
line 81: insert (2)
line 82: inorderTraversal
(2) (2) (7) (7) (8) (9) (9) 
line 83: insert (3)
line 84: inorderTraversal
(2) (2) (3) (7) (7) (8) (9) (9) 
line 85: clear
line 86: buildTree 9
(8) (5) (6) (7) (8) (7) (9) (7) (6) 
line 87: inorderTraversal
(5) (6) (6) (7) (7) (7) (8) (8) (9) 
line 88: search (7)
TRUE
line 89: inorderTraversal
(5) (6) (6) (7) (7) (7) (8) (8) (9) 
line 90: insert (1)
line 91: inorderTraversal
(1) (5) (6) (6) (7) (7) (7) (8) (8) (9) 
line 92: clear
line 93: buildTree 3
(2) (1) (4) 
line 94: inorderTraversal
(1) (2) (4) 
line 95: nearestNeighbour (10)
(4) 
line 96: inorderTraversal
(1) (2) (4) 
line 97: clear
line 98: buildTree 17
(3) (5) (8) (6) (6) (6) (3) (1) (4) (3) (5) (2) (7) (7) (2) (5) (1) 
line 99: inorderTraversal
(1) (1) (2) (2) (3) (3) (3) (4) (5) (5) (5) (6) (6) (6) (7) (7) (8) 
line 100: insert (1)
line 101: inorderTraversal
(1) (1) (1) (2) (2) (3) (3) (3) (4) (5) (5) (5) (6) (6) (6) (7) (7) (8) 
line 102: insert (5)
line 103: inorderTraversal
(1) (1) (1) (2) (2) (3) (3) (3) (4) (5) (5) (5) (5) (6) (6) (6) (7) (7) (8) 
line 104: insert (2)
line 105: inorderTraversal
(1) (1) (1) (2) (2) (2) (3) (3) (3) (4) (5) (5) (5) (5) (6) (6) (6) (7) (7) (8) 
line 106: insert (1)
line 107: inorderTraversal
(1) (1) (1) (1) (2) (2) (2) (3) (3) (3) (4) (5) (5) (5) (5) (6) (6) (6) (7) (7) (8) 
line 108: insert (5)
line 109: inorderTraversal
(1) (1) (1) (1) (2) (2) (2) (3) (3) (3) (4) (5) (5) (5) (5) (5) (6) (6) (6) (7) (7) (8) 
line 110: nearestNeighbour (4)
(4) 
line 111: inorderTraversal
(1) (1) (1) (1) (2) (2) (2) (3) (3) (3) (4) (5) (5) (5) (5) (5) (6) (6) (6) (7) (7) (8) 
line 112: insert (10)
line 113: inorderTraversal
(1) (1) (1) (1) (2) (2) (2) (3) (3) (3) (4) (5) (5) (5) (5) (5) (6) (6) (6) (7) (7) (8) (10) 
line 114: clear
line 115: buildTree 1
(7) 
line 116: inorderTraversal
(7) 
line 117: remove (7)
line 118: inorderTraversal

line 119: nodeCount_height_leafCount
nodeCount=0;height=0;leafCount=0
line 120: inorderTraversal

line 121: insert (9)
line 122: inorderTraversal
(9) 
line 123: kNearestNeighbour 3 (7)
(9) 
line 124: inorderTraversal
(9) 
line 125: nearestNeighbour (10)
(9) 
line 126: inorderTraversal
(9) 
line 127: clear
line 128: buildTree 1
(3) 
line 129: inorderTraversal
(3) 
line 130: insert (9)
line 131: inorderTraversal
(3) (9) 
line 132: search (3)
TRUE
line 133: inorderTraversal
(3) (9) 
line 134: search (10)
FALSE
line 135: inorderTraversal
(3) (9) 
line 136: insert (3)
line 137: inorderTraversal
(3) (3) (9) 
line 138: nearestNeighbour (2)
(3) 
line 139: inorderTraversal
(3) (3) (9) 
line 140: nearestNeighbour (3)
(3) 
line 141: inorderTraversal
(3) (3) (9) 
line 142: kNearestNeighbour 3 (9)
(3) (3) (9) 
line 143: inorderTraversal
(3) (3) (9) 
line 144: insert (9)
line 145: inorderTraversal
(3) (3) (9) (9) 
line 146: insert (1)
line 147: inorderTraversal
(1) (3) (3) (9) (9) 
line 148: insert (7)
line 149: inorderTraversal
(1) (3) (3) (7) (9) (9) 
line 150: remove (7)
line 151: inorderTraversal
(1) (3) (3) (9) (9) 
line 152: nodeCount_height_leafCount
nodeCount=5;height=3;leafCount=3
line 153: inorderTraversal
(1) (3) (3) (9) (9) 
line 154: insert (6)
line 155: inorderTraversal
(1) (3) (3) (6) (9) (9) 
line 156: remove (2)
line 157: inorderTraversal
(1) (3) (3) (6) (9) (9) 
line 158: clear
line 159: buildTree 3
(2) (8) (4) 
line 160: inorderTraversal
(2) (4) (8) 
line 161: clear
line 162: buildTree 3
(8) (10) (9) 
line 163: inorderTraversal
(8) (9) (10) 
line 164: preorderTraversal
(9) (8) (10) 
line 165: inorderTraversal
(8) (9) (10) 
line 166: remove (9)
line 167: inorderTraversal
(8) (10) 
line 168: search (10)
TRUE
line 169: inorderTraversal
(8) (10) 
line 170: kNearestNeighbour 9 (2)
(8) (10) 
line 171: inorderTraversal
(8) (10) 
line 172: nearestNeighbour (8)
(8) 
line 173: inorderTraversal
(8) (10) 
line 174: insert (3)
line 175: inorderTraversal
(3) (8) (10) 
line 176: insert (5)
line 177: inorderTraversal
(3) (5) (8) (10) 
line 178: search (9)
FALSE
line 179: inorderTraversal
(3) (5) (8) (10) 
line 180: clear
line 181: buildTree 1
(5) 
line 182: inorderTraversal
(5) 
line 183: remove (5)
line 184: inorderTraversal

line 185: insert (4)
line 186: inorderTraversal
(4) 
line 187: insert (6)
line 188: inorderTraversal
(4) (6) 
line 189: remove (4)
line 190: inorderTraversal
(6) 
line 191: kNearestNeighbour 10 (9)
(6) 
line 192: inorderTraversal
(6) 
line 193: clear
line 194: buildTree 16
(10) (3) (5) (4) (2) (9) (6) (2) (7) (7) (9) (1) (3) (7) (7) (2) 
line 195: inorderTraversal
(1) (2) (2) (2) (3) (3) (4) (5) (6) (7) (7) (7) (7) (9) (9) (10) 
line 196: insert (5)
line 197: inorderTraversal
(1) (2) (2) (2) (3) (3) (4) (5) (5) (6) (7) (7) (7) (7) (9) (9) (10) 
line 198: kNearestNeighbour 2 (5)
(5) (5) 
line 199: inorderTraversal
(1) (2) (2) (2) (3) (3) (4) (5) (5) (6) (7) (7) (7) (7) (9) (9) (10) 
line 200: insert (5)
line 201: inorderTraversal
(1) (2) (2) (2) (3) (3) (4) (5) (5) (5) (6) (7) (7) (7) (7) (9) (9) (10) 
line 202: insert (7)
line 203: inorderTraversal
(1) (2) (2) (2) (3) (3) (4) (5) (5) (5) (6) (7) (7) (7) (7) (7) (9) (9) (10) 
line 204: search (9)
TRUE
line 205: inorderTraversal
(1) (2) (2) (2) (3) (3) (4) (5) (5) (5) (6) (7) (7) (7) (7) (7) (9) (9) (10) 
line 206: kNearestNeighbour 10 (9)
(5) (6) (7) (7) (7) (7) (7) (9) (9) (10) 
line 207: inorderTraversal
(1) (2) (2) (2) (3) (3) (4) (5) (5) (5) (6) (7) (7) (7) (7) (7) (9) (9) (10) 
line 208: clear
line 209: buildTree 10
(5) (10) (5) (10) (5) (10) (6) (6) (6) (2) 
line 210: inorderTraversal
(2) (5) (5) (5) (6) (6) (6) (10) (10) (10) 
line 211: nearestNeighbour (9)
(10) 
line 212: inorderTraversal
(2) (5) (5) (5) (6) (6) (6) (10) (10) (10) 
line 213: nearestNeighbour (8)
(6) 
line 214: inorderTraversal
(2) (5) (5) (5) (6) (6) (6) (10) (10) (10) 
line 215: kNearestNeighbour 4 (9)
(6) (10) (10) (10) 
line 216: inorderTraversal
(2) (5) (5) (5) (6) (6) (6) (10) (10) (10) 
line 217: nearestNeighbour (9)
(10) 
line 218: inorderTraversal
(2) (5) (5) (5) (6) (6) (6) (10) (10) (10) 
line 219: clear
line 220: buildTree 10
(9) (7) (2) (4) (2) (8) (10) (9) (2) (9) 
line 221: inorderTraversal
(2) (2) (2) (4) (7) (8) (9) (9) (9) (10) 
line 222: kNearestNeighbour 1 (4)
(4) 
line 223: inorderTraversal
(2) (2) (2) (4) (7) (8) (9) (9) (9) (10) 
line 224: kNearestNeighbour 4 (5)
(2) (2) (4) (7) 
line 225: inorderTraversal
(2) (2) (2) (4) (7) (8) (9) (9) (9) (10) 
line 226: remove (6)
line 227: inorderTraversal
(2) (2) (2) (4) (7) (8) (9) (9) (9) (10) 
line 228: kNearestNeighbour 4 (6)
(4) (7) (8) (9) 
line 229: inorderTraversal
(2) (2) (2) (4) (7) (8) (9) (9) (9) (10) 
line 230: search (2)
TRUE
line 231: inorderTraversal
(2) (2) (2) (4) (7) (8) (9) (9) (9) (10) 
line 232: insert (1)
line 233: inorderTraversal
(1) (2) (2) (2) (4) (7) (8) (9) (9) (9) (10) 
line 234: insert (5)
line 235: inorderTraversal
(1) (2) (2) (2) (4) (5) (7) (8) (9) (9) (9) (10) 
line 236: kNearestNeighbour 5 (4)
(2) (2) (2) (4) (5) 
line 237: inorderTraversal
(1) (2) (2) (2) (4) (5) (7) (8) (9) (9) (9) (10) 
line 238: nearestNeighbour (7)
(7) 
line 239: inorderTraversal
(1) (2) (2) (2) (4) (5) (7) (8) (9) (9) (9) (10) 
line 240: insert (4)
line 241: inorderTraversal
(1) (2) (2) (2) (4) (4) (5) (7) (8) (9) (9) (9) (10) 
line 242: insert (5)
line 243: inorderTraversal
(1) (2) (2) (2) (4) (4) (5) (5) (7) (8) (9) (9) (9) (10) 
line 244: insert (7)
line 245: inorderTraversal
(1) (2) (2) (2) (4) (4) (5) (5) (7) (7) (8) (9) (9) (9) (10) 
line 246: remove (7)
line 247: inorderTraversal
(1) (2) (2) (2) (4) (4) (5) (5) (7) (8) (9) (9) (9) (10) 
line 248: nearestNeighbour (3)
(4) 
line 249: inorderTraversal
(1) (2) (2) (2) (4) (4) (5) (5) (7) (8) (9) (9) (9) (10) 
line 250: kNearestNeighbour 3 (10)
(9) (9) (10) 
line 251: inorderTraversal
(1) (2) (2) (2) (4) (4) (5) (5) (7) (8) (9) (9) (9) (10) 
line 252: insert (10)
line 253: inorderTraversal
(1) (2) (2) (2) (4) (4) (5) (5) (7) (8) (9) (9) (9) (10) (10) 
line 254: remove (9)
line 255: inorderTraversal
(1) (2) (2) (2) (4) (4) (5) (5) (7) (8) (9) (9) (10) (10) 
line 256: insert (8)
line 257: inorderTraversal
(1) (2) (2) (2) (4) (4) (5) (5) (7) (8) (8) (9) (9) (10) (10) 
line 258: insert (8)
line 259: inorderTraversal
(1) (2) (2) (2) (4) (4) (5) (5) (7) (8) (8) (8) (9) (9) (10) (10) 
line 260: kNearestNeighbour 2 (10)
(10) (10) 
line 261: inorderTraversal
(1) (2) (2) (2) (4) (4) (5) (5) (7) (8) (8) (8) (9) (9) (10) (10) 
line 262: nearestNeighbour (5)
(5) 
line 263: inorderTraversal
(1) (2) (2) (2) (4) (4) (5) (5) (7) (8) (8) (8) (9) (9) (10) (10) 
line 264: search (10)
TRUE
line 265: inorderTraversal
(1) (2) (2) (2) (4) (4) (5) (5) (7) (8) (8) (8) (9) (9) (10) (10) 
line 266: remove (9)
line 267: inorderTraversal
(1) (2) (2) (2) (4) (4) (5) (5) (7) (8) (8) (8) (9) (10) (10) 
line 268: kNearestNeighbour 4 (1)
(1) (2) (2) (2) 
line 269: inorderTraversal
(1) (2) (2) (2) (4) (4) (5) (5) (7) (8) (8) (8) (9) (10) (10) 
line 270: insert (6)
line 271: inorderTraversal
(1) (2) (2) (2) (4) (4) (5) (5) (6) (7) (8) (8) (8) (9) (10) (10) 
line 272: nearestNeighbour (5)
(5) 
line 273: inorderTraversal
(1) (2) (2) (2) (4) (4) (5) (5) (6) (7) (8) (8) (8) (9) (10) (10) 
line 274: clear
line 275: buildTree 6
(4) (1) (8) (1) (2) (3) 
line 276: inorderTraversal
(1) (1) (2) (3) (4) (8) 
line 277: insert (7)
line 278: inorderTraversal
(1) (1) (2) (3) (4) (7) (8) 
line 279: insert (8)
line 280: inorderTraversal
(1) (1) (2) (3) (4) (7) (8) (8) 
line 281: insert (3)
line 282: inorderTraversal
(1) (1) (2) (3) (3) (4) (7) (8) (8) 
line 283: insert (3)
line 284: inorderTraversal
(1) (1) (2) (3) (3) (3) (4) (7) (8) (8) 
line 285: postorderTraversal
(1) (1) (3) (3) (3) (7) (8) (8) (4) (2) 
line 286: inorderTraversal
(1) (1) (2) (3) (3) (3) (4) (7) (8) (8) 
line 287: nodeCount_height_leafCount
nodeCount=10;height=5;leafCount=4
line 288: inorderTraversal
(1) (1) (2) (3) (3) (3) (4) (7) (8) (8) 
line 289: nearestNeighbour (1)
(1) 
line 290: inorderTraversal
(1) (1) (2) (3) (3) (3) (4) (7) (8) (8) 
line 291: insert (4)
line 292: inorderTraversal
(1) (1) (2) (3) (3) (3) (4) (4) (7) (8) (8) 
line 293: remove (7)
line 294: inorderTraversal
(1) (1) (2) (3) (3) (3) (4) (4) (8) (8) 
line 295: search (8)
TRUE
line 296: inorderTraversal
(1) (1) (2) (3) (3) (3) (4) (4) (8) (8) 
line 297: nearestNeighbour (5)
(4) 
line 298: inorderTraversal
(1) (1) (2) (3) (3) (3) (4) (4) (8) (8) 
line 299: remove (3)
line 300: inorderTraversal
(1) (1) (2) (3) (3) (4) (4) (8) (8) 
line 301: kNearestNeighbour 6 (4)
(1) (2) (3) (3) (4) (4) 
line 302: inorderTraversal
(1) (1) (2) (3) (3) (4) (4) (8) (8) 
line 303: insert (10)
line 304: inorderTraversal
(1) (1) (2) (3) (3) (4) (4) (8) (8) (10) 
line 305: nearestNeighbour (9)
(10) 
line 306: inorderTraversal
(1) (1) (2) (3) (3) (4) (4) (8) (8) (10) 
line 307: insert (9)
line 308: inorderTraversal
(1) (1) (2) (3) (3) (4) (4) (8) (8) (9) (10) 
line 309: kNearestNeighbour 2 (8)
(8) (8) 
line 310: inorderTraversal
(1) (1) (2) (3) (3) (4) (4) (8) (8) (9) (10) 
line 311: nearestNeighbour (8)
(8) 
line 312: inorderTraversal
(1) (1) (2) (3) (3) (4) (4) (8) (8) (9) (10) 
line 313: nodeCount_height_leafCount
nodeCount=11;height=6;leafCount=4
line 314: inorderTraversal
(1) (1) (2) (3) (3) (4) (4) (8) (8) (9) (10) 
line 315: insert (7)
line 316: inorderTraversal
(1) (1) (2) (3) (3) (4) (4) (7) (8) (8) (9) (10) 
line 317: clear
line 318: buildTree 9
(3) (9) (4) (10) (7) (6) (10) (7) (9) 
line 319: inorderTraversal
(3) (4) (6) (7) (7) (9) (9) (10) (10) 
line 320: remove (7)
line 321: inorderTraversal
(3) (4) (6) (7) (9) (9) (10) (10) 
line 322: clear
line 323: buildTree 2
(5) (5) 
line 324: inorderTraversal
(5) (5) 
line 325: insert (9)
line 326: inorderTraversal
(5) (5) (9) 
line 327: nearestNeighbour (3)
(5) 
line 328: inorderTraversal
(5) (5) (9) 
line 329: kNearestNeighbour 1 (1)
(5) 
line 330: inorderTraversal
(5) (5) (9) 
line 331: insert (9)
line 332: inorderTraversal
(5) (5) (9) (9) 
line 333: insert (5)
line 334: inorderTraversal
(5) (5) (5) (9) (9) 
line 335: insert (1)
line 336: inorderTraversal
(1) (5) (5) (5) (9) (9) 
line 337: insert (10)
line 338: inorderTraversal
(1) (5) (5) (5) (9) (9) (10) 
line 339: kNearestNeighbour 8 (7)
(1) (5) (5) (5) (9) (9) (10) 
line 340: inorderTraversal
(1) (5) (5) (5) (9) (9) (10) 
line 341: insert (8)
line 342: inorderTraversal
(1) (5) (5) (5) (8) (9) (9) (10) 
line 343: nearestNeighbour (10)
(10) 
line 344: inorderTraversal
(1) (5) (5) (5) (8) (9) (9) (10) 
line 345: insert (9)
line 346: inorderTraversal
(1) (5) (5) (5) (8) (9) (9) (9) (10) 
line 347: insert (6)
line 348: inorderTraversal
(1) (5) (5) (5) (6) (8) (9) (9) (9) (10) 
line 349: remove (5)
line 350: inorderTraversal
(1) (5) (5) (6) (8) (9) (9) (9) (10) 
line 351: insert (5)
line 352: inorderTraversal
(1) (5) (5) (5) (6) (8) (9) (9) (9) (10) 
line 353: remove (9)
line 354: inorderTraversal
(1) (5) (5) (5) (6) (8) (9) (9) (10) 
line 355: postorderTraversal
(1) (5) (8) (6) (10) (9) (9) (5) (5) 
line 356: inorderTraversal
(1) (5) (5) (5) (6) (8) (9) (9) (10) 
line 357: nearestNeighbour (10)
(10) 
line 358: inorderTraversal
(1) (5) (5) (5) (6) (8) (9) (9) (10) 
line 359: insert (6)
line 360: inorderTraversal
(1) (5) (5) (5) (6) (6) (8) (9) (9) (10) 
line 361: nearestNeighbour (2)
(1) 
line 362: inorderTraversal
(1) (5) (5) (5) (6) (6) (8) (9) (9) (10) 
line 363: nearestNeighbour (6)
(6) 
line 364: inorderTraversal
(1) (5) (5) (5) (6) (6) (8) (9) (9) (10) 
line 365: kNearestNeighbour 8 (3)
(1) (5) (5) (5) (6) (6) (8) (9) 
line 366: inorderTraversal
(1) (5) (5) (5) (6) (6) (8) (9) (9) (10) 
line 367: clear
line 368: buildTree 5
(9) (4) (5) (9) (2) 
line 369: inorderTraversal
(2) (4) (5) (9) (9) 
line 370: insert (8)
line 371: inorderTraversal
(2) (4) (5) (8) (9) (9) 
line 372: insert (1)
line 373: inorderTraversal
(1) (2) (4) (5) (8) (9) (9) 
line 374: kNearestNeighbour 1 (2)
(2) 
line 375: inorderTraversal
(1) (2) (4) (5) (8) (9) (9) 
line 376: kNearestNeighbour 9 (5)
(1) (2) (4) (5) (8) (9) (9) 
line 377: inorderTraversal
(1) (2) (4) (5) (8) (9) (9) 
line 378: nearestNeighbour (8)
(8) 
line 379: inorderTraversal
(1) (2) (4) (5) (8) (9) (9) 
line 380: insert (9)
line 381: inorderTraversal
(1) (2) (4) (5) (8) (9) (9) (9) 
line 382: insert (4)
line 383: inorderTraversal
(1) (2) (4) (4) (5) (8) (9) (9) (9) 
line 384: nearestNeighbour (1)
(1) 
line 385: inorderTraversal
(1) (2) (4) (4) (5) (8) (9) (9) (9) 
line 386: insert (1)
line 387: inorderTraversal
(1) (1) (2) (4) (4) (5) (8) (9) (9) (9) 
line 388: clear
line 389: buildTree 8
(9) (4) (4) (9) (6) (4) (10) (4) 
line 390: inorderTraversal
(4) (4) (4) (4) (6) (9) (9) (10) 
line 391: postorderTraversal
(4) (4) (4) (10) (9) (9) (6) (4) 
line 392: inorderTraversal
(4) (4) (4) (4) (6) (9) (9) (10) 
line 393: kNearestNeighbour 3 (1)
(4) (4) (4) 
line 394: inorderTraversal
(4) (4) (4) (4) (6) (9) (9) (10) 
line 395: nearestNeighbour (5)
(4) 
line 396: inorderTraversal
(4) (4) (4) (4) (6) (9) (9) (10) 
line 397: nearestNeighbour (5)
(4) 
line 398: inorderTraversal
(4) (4) (4) (4) (6) (9) (9) (10) 
line 399: remove (4)
line 400: inorderTraversal
(4) (4) (4) (6) (9) (9) (10) 
line 401: insert (3)
line 402: inorderTraversal
(3) (4) (4) (4) (6) (9) (9) (10) 
line 403: remove (6)
line 404: inorderTraversal
(3) (4) (4) (4) (9) (9) (10) 
line 405: insert (2)
line 406: inorderTraversal
(2) (3) (4) (4) (4) (9) (9) (10) 
line 407: insert (1)
line 408: inorderTraversal
(1) (2) (3) (4) (4) (4) (9) (9) (10) 
line 409: insert (6)
line 410: inorderTraversal
(1) (2) (3) (4) (4) (4) (6) (9) (9) (10) 
line 411: insert (10)
line 412: inorderTraversal
(1) (2) (3) (4) (4) (4) (6) (9) (9) (10) (10) 
line 413: clear
line 414: buildTree 4
(5) (9) (3) (3) 
line 415: inorderTraversal
(3) (3) (5) (9) 
line 416: search (9)
TRUE
line 417: inorderTraversal
(3) (3) (5) (9) 
line 418: insert (9)
line 419: inorderTraversal
(3) (3) (5) (9) (9) 
line 420: kNearestNeighbour 10 (6)
(3) (3) (5) (9) (9) 
line 421: inorderTraversal
(3) (3) (5) (9) (9) 
line 422: nodeCount_height_leafCount
nodeCount=5;height=4;leafCount=2
line 423: inorderTraversal
(3) (3) (5) (9) (9) 
line 424: preorderTraversal
(3) (5) (3) (9) (9) 
line 425: postorderTraversal
(3) (9) (9) (5) (3) 
line 426: clear
