line 1: k=1
line 2: clear
line 3: buildTree 8
(9) (4) (7) (4) (2) (8) (8) (8) 
line 4: inorderTraversal
(2) (4) (4) (7) (8) (8) (8) (9) 
line 5: nearestNeighbour (5)
(4) 
line 6: inorderTraversal
(2) (4) (4) (7) (8) (8) (8) (9) 
line 7: kNearestNeighbour 5 (2)
(2) (4) (4) (7) (8) 
line 8: inorderTraversal
(2) (4) (4) (7) (8) (8) (8) (9) 
line 9: nearestNeighbour (8)
(8) 
line 10: inorderTraversal
(2) (4) (4) (7) (8) (8) (8) (9) 
line 11: nearestNeighbour (3)
(2) 
line 12: inorderTraversal
(2) (4) (4) (7) (8) (8) (8) (9) 
line 13: insert (4)
line 14: inorderTraversal
(2) (4) (4) (4) (7) (8) (8) (8) (9) 
line 15: nearestNeighbour (10)
(9) 
line 16: inorderTraversal
(2) (4) (4) (4) (7) (8) (8) (8) (9) 
line 17: remove (4)
line 18: inorderTraversal
(2) (4) (4) (7) (8) (8) (8) (9) 
line 19: remove (7)
line 20: inorderTraversal
(2) (4) (4) (8) (8) (8) (9) 
line 21: kNearestNeighbour 7 (5)
(2) (4) (4) (8) (8) (8) (9) 
line 22: inorderTraversal
(2) (4) (4) (8) (8) (8) (9) 
line 23: remove (2)
line 24: inorderTraversal
(4) (4) (8) (8) (8) (9) 
line 25: insert (7)
line 26: inorderTraversal
(4) (4) (7) (8) (8) (8) (9) 
line 27: kNearestNeighbour 2 (10)
(8) (9) 
line 28: inorderTraversal
(4) (4) (7) (8) (8) (8) (9) 
line 29: kNearestNeighbour 5 (5)
(4) (4) (7) (8) (8) 
line 30: inorderTraversal
(4) (4) (7) (8) (8) (8) (9) 
line 31: remove (4)
line 32: inorderTraversal
(4) (7) (8) (8) (8) (9) 
line 33: remove (8)
line 34: inorderTraversal
(4) (7) (8) (8) (9) 
line 35: insert (3)
line 36: inorderTraversal
(3) (4) (7) (8) (8) (9) 
line 37: insert (5)
line 38: inorderTraversal
(3) (4) (5) (7) (8) (8) (9) 
line 39: kNearestNeighbour 7 (9)
(3) (4) (5) (7) (8) (8) (9) 
line 40: inorderTraversal
(3) (4) (5) (7) (8) (8) (9) 
line 41: insert (3)
line 42: inorderTraversal
(3) (3) (4) (5) (7) (8) (8) (9) 
line 43: kNearestNeighbour 5 (5)
(3) (3) (4) (5) (7) 
line 44: inorderTraversal
(3) (3) (4) (5) (7) (8) (8) (9) 
line 45: kNearestNeighbour 3 (4)
(3) (4) (5) 
line 46: inorderTraversal
(3) (3) (4) (5) (7) (8) (8) (9) 
line 47: nearestNeighbour (6)
(5) 
line 48: inorderTraversal
(3) (3) (4) (5) (7) (8) (8) (9) 
line 49: kNearestNeighbour 10 (1)
(3) (3) (4) (5) (7) (8) (8) (9) 
line 50: inorderTraversal
(3) (3) (4) (5) (7) (8) (8) (9) 
line 51: insert (3)
line 52: inorderTraversal
(3) (3) (3) (4) (5) (7) (8) (8) (9) 
line 53: search (4)
TRUE
line 54: inorderTraversal
(3) (3) (3) (4) (5) (7) (8) (8) (9) 
line 55: insert (6)
line 56: inorderTraversal
(3) (3) (3) (4) (5) (6) (7) (8) (8) (9) 
line 57: insert (4)
line 58: inorderTraversal
(3) (3) (3) (4) (4) (5) (6) (7) (8) (8) (9) 
line 59: insert (1)
line 60: inorderTraversal
(1) (3) (3) (3) (4) (4) (5) (6) (7) (8) (8) (9) 
line 61: insert (6)
line 62: inorderTraversal
(1) (3) (3) (3) (4) (4) (5) (6) (6) (7) (8) (8) (9) 
line 63: insert (3)
line 64: inorderTraversal
(1) (3) (3) (3) (3) (4) (4) (5) (6) (6) (7) (8) (8) (9) 
line 65: insert (5)
line 66: inorderTraversal
(1) (3) (3) (3) (3) (4) (4) (5) (5) (6) (6) (7) (8) (8) (9) 
line 67: kNearestNeighbour 9 (8)
(4) (5) (5) (6) (6) (7) (8) (8) (9) 
line 68: inorderTraversal
(1) (3) (3) (3) (3) (4) (4) (5) (5) (6) (6) (7) (8) (8) (9) 
line 69: insert (3)
line 70: inorderTraversal
(1) (3) (3) (3) (3) (3) (4) (4) (5) (5) (6) (6) (7) (8) (8) (9) 
line 71: kNearestNeighbour 7 (5)
(4) (4) (5) (5) (6) (6) (7) 
line 72: inorderTraversal
(1) (3) (3) (3) (3) (3) (4) (4) (5) (5) (6) (6) (7) (8) (8) (9) 
line 73: remove (6)
line 74: inorderTraversal
(1) (3) (3) (3) (3) (3) (4) (4) (5) (5) (6) (7) (8) (8) (9) 
line 75: clear
line 76: buildTree 10
(9) (6) (7) (10) (5) (4) (1) (6) (4) (5) 
line 77: inorderTraversal
(1) (4) (4) (5) (5) (6) (6) (7) (9) (10) 
line 78: nearestNeighbour (2)
(1) 
line 79: inorderTraversal
(1) (4) (4) (5) (5) (6) (6) (7) (9) (10) 
line 80: insert (4)
line 81: inorderTraversal
(1) (4) (4) (4) (5) (5) (6) (6) (7) (9) (10) 
line 82: insert (6)
line 83: inorderTraversal
(1) (4) (4) (4) (5) (5) (6) (6) (6) (7) (9) (10) 
line 84: remove (7)
line 85: inorderTraversal
(1) (4) (4) (4) (5) (5) (6) (6) (6) (9) (10) 
line 86: postorderTraversal
(1) (4) (4) (4) (5) (6) (6) (10) (9) (6) (5) 
line 87: inorderTraversal
(1) (4) (4) (4) (5) (5) (6) (6) (6) (9) (10) 
line 88: nearestNeighbour (10)
(10) 
line 89: inorderTraversal
(1) (4) (4) (4) (5) (5) (6) (6) (6) (9) (10) 
line 90: insert (10)
line 91: inorderTraversal
(1) (4) (4) (4) (5) (5) (6) (6) (6) (9) (10) (10) 
line 92: clear
line 93: buildTree 1
(1) 
line 94: inorderTraversal
(1) 
line 95: clear
line 96: buildTree 12
(5) (1) (2) (9) (8) (4) (5) (2) (5) (6) (8) (1) 
line 97: inorderTraversal
(1) (1) (2) (2) (4) (5) (5) (5) (6) (8) (8) (9) 
line 98: clear
line 99: buildTree 4
(4) (9) (10) (8) 
line 100: inorderTraversal
(4) (8) (9) (10) 
line 101: insert (3)
line 102: inorderTraversal
(3) (4) (8) (9) (10) 
line 103: kNearestNeighbour 3 (3)
(3) (4) (8) 
line 104: inorderTraversal
(3) (4) (8) (9) (10) 
line 105: insert (3)
line 106: inorderTraversal
(3) (3) (4) (8) (9) (10) 
line 107: nearestNeighbour (10)
(10) 
line 108: inorderTraversal
(3) (3) (4) (8) (9) (10) 
line 109: nearestNeighbour (4)
(4) 
line 110: inorderTraversal
(3) (3) (4) (8) (9) (10) 
line 111: kNearestNeighbour 3 (7)
(4) (8) (9) 
line 112: inorderTraversal
(3) (3) (4) (8) (9) (10) 
line 113: remove (4)
line 114: inorderTraversal
(3) (3) (8) (9) (10) 
line 115: remove (3)
line 116: inorderTraversal
(3) (8) (9) (10) 
line 117: insert (4)
line 118: inorderTraversal
(3) (4) (8) (9) (10) 
line 119: insert (7)
line 120: inorderTraversal
(3) (4) (7) (8) (9) (10) 
line 121: search (4)
TRUE
line 122: inorderTraversal
(3) (4) (7) (8) (9) (10) 
line 123: postorderTraversal
(7) (4) (3) (10) (9) (8) 
line 124: inorderTraversal
(3) (4) (7) (8) (9) (10) 
line 125: insert (1)
line 126: inorderTraversal
(1) (3) (4) (7) (8) (9) (10) 
line 127: insert (10)
line 128: inorderTraversal
(1) (3) (4) (7) (8) (9) (10) (10) 
line 129: nearestNeighbour (1)
(1) 
line 130: inorderTraversal
(1) (3) (4) (7) (8) (9) (10) (10) 
line 131: clear
line 132: buildTree 13
(1) (2) (10) (8) (5) (6) (4) (4) (4) (1) (9) (2) (2) 
line 133: inorderTraversal
(1) (1) (2) (2) (2) (4) (4) (4) (5) (6) (8) (9) (10) 
line 134: insert (9)
line 135: inorderTraversal
(1) (1) (2) (2) (2) (4) (4) (4) (5) (6) (8) (9) (9) (10) 
line 136: nodeCount_height_leafCount
nodeCount=14;height=5;leafCount=5
line 137: inorderTraversal
(1) (1) (2) (2) (2) (4) (4) (4) (5) (6) (8) (9) (9) (10) 
line 138: insert (8)
line 139: inorderTraversal
(1) (1) (2) (2) (2) (4) (4) (4) (5) (6) (8) (8) (9) (9) (10) 
line 140: insert (6)
line 141: inorderTraversal
(1) (1) (2) (2) (2) (4) (4) (4) (5) (6) (6) (8) (8) (9) (9) (10) 
line 142: insert (9)
line 143: inorderTraversal
(1) (1) (2) (2) (2) (4) (4) (4) (5) (6) (6) (8) (8) (9) (9) (9) (10) 
line 144: insert (3)
line 145: inorderTraversal
(1) (1) (2) (2) (2) (3) (4) (4) (4) (5) (6) (6) (8) (8) (9) (9) (9) (10) 
line 146: kNearestNeighbour 10 (5)
(2) (3) (4) (4) (4) (5) (6) (6) (8) (8) 
line 147: inorderTraversal
(1) (1) (2) (2) (2) (3) (4) (4) (4) (5) (6) (6) (8) (8) (9) (9) (9) (10) 
line 148: kNearestNeighbour 6 (7)
(6) (6) (8) (8) (9) (9) 
line 149: inorderTraversal
(1) (1) (2) (2) (2) (3) (4) (4) (4) (5) (6) (6) (8) (8) (9) (9) (9) (10) 
line 150: remove (4)
line 151: inorderTraversal
(1) (1) (2) (2) (2) (3) (4) (4) (5) (6) (6) (8) (8) (9) (9) (9) (10) 
line 152: insert (6)
line 153: inorderTraversal
(1) (1) (2) (2) (2) (3) (4) (4) (5) (6) (6) (6) (8) (8) (9) (9) (9) (10) 
line 154: insert (3)
line 155: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (4) (4) (5) (6) (6) (6) (8) (8) (9) (9) (9) (10) 
line 156: kNearestNeighbour 7 (1)
(1) (1) (2) (2) (2) (3) (3) 
line 157: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (4) (4) (5) (6) (6) (6) (8) (8) (9) (9) (9) (10) 
line 158: insert (8)
line 159: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (4) (4) (5) (6) (6) (6) (8) (8) (8) (9) (9) (9) (10) 
line 160: nearestNeighbour (10)
(10) 
line 161: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (4) (4) (5) (6) (6) (6) (8) (8) (8) (9) (9) (9) (10) 
line 162: nearestNeighbour (7)
(6) 
line 163: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (4) (4) (5) (6) (6) (6) (8) (8) (8) (9) (9) (9) (10) 
line 164: insert (10)
line 165: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (4) (4) (5) (6) (6) (6) (8) (8) (8) (9) (9) (9) (10) (10) 
line 166: remove (6)
line 167: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (4) (4) (5) (6) (6) (8) (8) (8) (9) (9) (9) (10) (10) 
line 168: kNearestNeighbour 9 (7)
(5) (6) (6) (8) (8) (8) (9) (9) (9) 
line 169: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (4) (4) (5) (6) (6) (8) (8) (8) (9) (9) (9) (10) (10) 
line 170: remove (1)
line 171: inorderTraversal
(1) (2) (2) (2) (3) (3) (4) (4) (5) (6) (6) (8) (8) (8) (9) (9) (9) (10) (10) 
line 172: insert (1)
line 173: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (4) (4) (5) (6) (6) (8) (8) (8) (9) (9) (9) (10) (10) 
line 174: nearestNeighbour (1)
(1) 
line 175: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (4) (4) (5) (6) (6) (8) (8) (8) (9) (9) (9) (10) (10) 
line 176: remove (6)
line 177: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (4) (4) (5) (6) (8) (8) (8) (9) (9) (9) (10) (10) 
line 178: insert (6)
line 179: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (4) (4) (5) (6) (6) (8) (8) (8) (9) (9) (9) (10) (10) 
line 180: remove (4)
line 181: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (4) (5) (6) (6) (8) (8) (8) (9) (9) (9) (10) (10) 
line 182: nearestNeighbour (7)
(6) 
line 183: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (4) (5) (6) (6) (8) (8) (8) (9) (9) (9) (10) (10) 
line 184: kNearestNeighbour 2 (7)
(6) (8) 
line 185: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (4) (5) (6) (6) (8) (8) (8) (9) (9) (9) (10) (10) 
line 186: kNearestNeighbour 1 (7)
(6) 
line 187: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (4) (5) (6) (6) (8) (8) (8) (9) (9) (9) (10) (10) 
line 188: search (2)
TRUE
line 189: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (4) (5) (6) (6) (8) (8) (8) (9) (9) (9) (10) (10) 
line 190: insert (6)
line 191: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (4) (5) (6) (6) (6) (8) (8) (8) (9) (9) (9) (10) (10) 
line 192: remove (4)
line 193: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (5) (6) (6) (6) (8) (8) (8) (9) (9) (9) (10) (10) 
line 194: kNearestNeighbour 7 (9)
(8) (8) (9) (9) (9) (10) (10) 
line 195: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (5) (6) (6) (6) (8) (8) (8) (9) (9) (9) (10) (10) 
line 196: clear
line 197: buildTree 3
(6) (7) (5) 
line 198: inorderTraversal
(5) (6) (7) 
line 199: clear
line 200: buildTree 1
(10) 
line 201: inorderTraversal
(10) 
line 202: kNearestNeighbour 1 (1)
(10) 
line 203: inorderTraversal
(10) 
line 204: nearestNeighbour (5)
(10) 
line 205: inorderTraversal
(10) 
line 206: remove (10)
line 207: inorderTraversal

line 208: clear
line 209: buildTree 20
(5) (6) (3) (7) (3) (5) (2) (8) (9) (9) (7) (3) (9) (8) (3) (1) (6) (5) (10) (2) 
line 210: inorderTraversal
(1) (2) (2) (3) (3) (3) (3) (5) (5) (5) (6) (6) (7) (7) (8) (8) (9) (9) (9) (10) 
line 211: remove (6)
line 212: inorderTraversal
(1) (2) (2) (3) (3) (3) (3) (5) (5) (5) (6) (7) (7) (8) (8) (9) (9) (9) (10) 
line 213: insert (9)
line 214: inorderTraversal
(1) (2) (2) (3) (3) (3) (3) (5) (5) (5) (6) (7) (7) (8) (8) (9) (9) (9) (9) (10) 
line 215: insert (7)
line 216: inorderTraversal
(1) (2) (2) (3) (3) (3) (3) (5) (5) (5) (6) (7) (7) (7) (8) (8) (9) (9) (9) (9) (10) 
line 217: nearestNeighbour (6)
(6) 
line 218: inorderTraversal
(1) (2) (2) (3) (3) (3) (3) (5) (5) (5) (6) (7) (7) (7) (8) (8) (9) (9) (9) (9) (10) 
line 219: insert (5)
line 220: inorderTraversal
(1) (2) (2) (3) (3) (3) (3) (5) (5) (5) (5) (6) (7) (7) (7) (8) (8) (9) (9) (9) (9) (10) 
line 221: nearestNeighbour (9)
(9) 
line 222: inorderTraversal
(1) (2) (2) (3) (3) (3) (3) (5) (5) (5) (5) (6) (7) (7) (7) (8) (8) (9) (9) (9) (9) (10) 
line 223: kNearestNeighbour 6 (5)
(5) (5) (5) (5) (6) (7) 
line 224: inorderTraversal
(1) (2) (2) (3) (3) (3) (3) (5) (5) (5) (5) (6) (7) (7) (7) (8) (8) (9) (9) (9) (9) (10) 
line 225: clear
line 226: buildTree 5
(3) (3) (6) (6) (7) 
line 227: inorderTraversal
(3) (3) (6) (6) (7) 
line 228: postorderTraversal
(3) (3) (7) (6) (6) 
line 229: inorderTraversal
(3) (3) (6) (6) (7) 
line 230: insert (9)
line 231: inorderTraversal
(3) (3) (6) (6) (7) (9) 
line 232: kNearestNeighbour 9 (3)
(3) (3) (6) (6) (7) (9) 
line 233: inorderTraversal
(3) (3) (6) (6) (7) (9) 
line 234: nearestNeighbour (6)
(6) 
line 235: inorderTraversal
(3) (3) (6) (6) (7) (9) 
line 236: clear
line 237: buildTree 3
(7) (8) (6) 
line 238: inorderTraversal
(6) (7) (8) 
line 239: kNearestNeighbour 5 (7)
(6) (7) (8) 
line 240: inorderTraversal
(6) (7) (8) 
line 241: insert (1)
line 242: inorderTraversal
(1) (6) (7) (8) 
line 243: kNearestNeighbour 8 (10)
(1) (6) (7) (8) 
line 244: inorderTraversal
(1) (6) (7) (8) 
line 245: insert (10)
line 246: inorderTraversal
(1) (6) (7) (8) (10) 
line 247: kNearestNeighbour 6 (7)
(1) (6) (7) (8) (10) 
line 248: inorderTraversal
(1) (6) (7) (8) (10) 
line 249: remove (10)
line 250: inorderTraversal
(1) (6) (7) (8) 
line 251: nodeCount_height_leafCount
nodeCount=4;height=3;leafCount=2
line 252: inorderTraversal
(1) (6) (7) (8) 
line 253: insert (1)
line 254: inorderTraversal
(1) (1) (6) (7) (8) 
line 255: nearestNeighbour (6)
(6) 
line 256: inorderTraversal
(1) (1) (6) (7) (8) 
line 257: remove (1)
line 258: inorderTraversal
(1) (6) (7) (8) 
line 259: kNearestNeighbour 9 (7)
(1) (6) (7) (8) 
line 260: inorderTraversal
(1) (6) (7) (8) 
line 261: kNearestNeighbour 2 (6)
(6) (7) 
line 262: inorderTraversal
(1) (6) (7) (8) 
line 263: nearestNeighbour (3)
(1) 
line 264: inorderTraversal
(1) (6) (7) (8) 
line 265: insert (7)
line 266: inorderTraversal
(1) (6) (7) (7) (8) 
line 267: nearestNeighbour (4)
(6) 
line 268: inorderTraversal
(1) (6) (7) (7) (8) 
line 269: kNearestNeighbour 2 (2)
(1) (6) 
line 270: inorderTraversal
(1) (6) (7) (7) (8) 
line 271: nearestNeighbour (5)
(6) 
line 272: inorderTraversal
(1) (6) (7) (7) (8) 
line 273: kNearestNeighbour 9 (10)
(1) (6) (7) (7) (8) 
line 274: inorderTraversal
(1) (6) (7) (7) (8) 
line 275: kNearestNeighbour 3 (8)
(7) (7) (8) 
line 276: inorderTraversal
(1) (6) (7) (7) (8) 
line 277: kNearestNeighbour 3 (6)
(6) (7) (7) 
line 278: inorderTraversal
(1) (6) (7) (7) (8) 
line 279: insert (8)
line 280: inorderTraversal
(1) (6) (7) (7) (8) (8) 
line 281: clear
line 282: buildTree 16
(3) (5) (1) (3) (1) (4) (7) (7) (2) (3) (4) (9) (9) (6) (5) (1) 
line 283: inorderTraversal
(1) (1) (1) (2) (3) (3) (3) (4) (4) (5) (5) (6) (7) (7) (9) (9) 
line 284: clear
line 285: buildTree 6
(4) (4) (8) (4) (6) (8) 
line 286: inorderTraversal
(4) (4) (4) (6) (8) (8) 
line 287: insert (6)
line 288: inorderTraversal
(4) (4) (4) (6) (6) (8) (8) 
line 289: clear
line 290: buildTree 4
(1) (4) (1) (9) 
line 291: inorderTraversal
(1) (1) (4) (9) 
line 292: nearestNeighbour (1)
(1) 
line 293: inorderTraversal
(1) (1) (4) (9) 
line 294: nearestNeighbour (5)
(4) 
line 295: inorderTraversal
(1) (1) (4) (9) 
line 296: insert (1)
line 297: inorderTraversal
(1) (1) (1) (4) (9) 
line 298: nearestNeighbour (5)
(4) 
line 299: inorderTraversal
(1) (1) (1) (4) (9) 
line 300: insert (6)
line 301: inorderTraversal
(1) (1) (1) (4) (6) (9) 
line 302: remove (6)
line 303: inorderTraversal
(1) (1) (1) (4) (9) 
line 304: remove (6)
line 305: inorderTraversal
(1) (1) (1) (4) (9) 
line 306: kNearestNeighbour 4 (1)
(1) (1) (1) (4) 
line 307: inorderTraversal
(1) (1) (1) (4) (9) 
line 308: kNearestNeighbour 10 (10)
(1) (1) (1) (4) (9) 
line 309: inorderTraversal
(1) (1) (1) (4) (9) 
line 310: nearestNeighbour (5)
(4) 
line 311: inorderTraversal
(1) (1) (1) (4) (9) 
line 312: nearestNeighbour (8)
(9) 
line 313: inorderTraversal
(1) (1) (1) (4) (9) 
line 314: nearestNeighbour (3)
(4) 
line 315: inorderTraversal
(1) (1) (1) (4) (9) 
line 316: nearestNeighbour (7)
(9) 
line 317: inorderTraversal
(1) (1) (1) (4) (9) 
line 318: kNearestNeighbour 9 (3)
(1) (1) (1) (4) (9) 
line 319: inorderTraversal
(1) (1) (1) (4) (9) 
line 320: remove (1)
line 321: inorderTraversal
(1) (1) (4) (9) 
line 322: postorderTraversal
(1) (9) (4) (1) 
line 323: inorderTraversal
(1) (1) (4) (9) 
line 324: insert (9)
line 325: inorderTraversal
(1) (1) (4) (9) (9) 
line 326: insert (5)
line 327: inorderTraversal
(1) (1) (4) (5) (9) (9) 
line 328: kNearestNeighbour 2 (1)
(1) (1) 
line 329: inorderTraversal
(1) (1) (4) (5) (9) (9) 
line 330: kNearestNeighbour 9 (6)
(1) (1) (4) (5) (9) (9) 
line 331: inorderTraversal
(1) (1) (4) (5) (9) (9) 
line 332: nearestNeighbour (6)
(5) 
line 333: inorderTraversal
(1) (1) (4) (5) (9) (9) 
line 334: clear
line 335: buildTree 11
(3) (1) (5) (3) (8) (4) (5) (10) (9) (9) (10) 
line 336: inorderTraversal
(1) (3) (3) (4) (5) (5) (8) (9) (9) (10) (10) 
line 337: insert (2)
line 338: inorderTraversal
(1) (2) (3) (3) (4) (5) (5) (8) (9) (9) (10) (10) 
line 339: insert (9)
line 340: inorderTraversal
(1) (2) (3) (3) (4) (5) (5) (8) (9) (9) (9) (10) (10) 
line 341: insert (10)
line 342: inorderTraversal
(1) (2) (3) (3) (4) (5) (5) (8) (9) (9) (9) (10) (10) (10) 
line 343: nearestNeighbour (6)
(5) 
line 344: inorderTraversal
(1) (2) (3) (3) (4) (5) (5) (8) (9) (9) (9) (10) (10) (10) 
line 345: nearestNeighbour (6)
(5) 
line 346: inorderTraversal
(1) (2) (3) (3) (4) (5) (5) (8) (9) (9) (9) (10) (10) (10) 
line 347: insert (1)
line 348: inorderTraversal
(1) (1) (2) (3) (3) (4) (5) (5) (8) (9) (9) (9) (10) (10) (10) 
line 349: remove (10)
line 350: inorderTraversal
(1) (1) (2) (3) (3) (4) (5) (5) (8) (9) (9) (9) (10) (10) 
line 351: kNearestNeighbour 1 (3)
(3) 
line 352: inorderTraversal
(1) (1) (2) (3) (3) (4) (5) (5) (8) (9) (9) (9) (10) (10) 
line 353: nearestNeighbour (8)
(8) 
line 354: inorderTraversal
(1) (1) (2) (3) (3) (4) (5) (5) (8) (9) (9) (9) (10) (10) 
line 355: nearestNeighbour (9)
(9) 
line 356: inorderTraversal
(1) (1) (2) (3) (3) (4) (5) (5) (8) (9) (9) (9) (10) (10) 
line 357: search (2)
TRUE
line 358: inorderTraversal
(1) (1) (2) (3) (3) (4) (5) (5) (8) (9) (9) (9) (10) (10) 
line 359: kNearestNeighbour 7 (2)
(1) (1) (2) (3) (3) (4) (5) 
line 360: inorderTraversal
(1) (1) (2) (3) (3) (4) (5) (5) (8) (9) (9) (9) (10) (10) 
line 361: search (9)
TRUE
line 362: inorderTraversal
(1) (1) (2) (3) (3) (4) (5) (5) (8) (9) (9) (9) (10) (10) 
line 363: search (10)
TRUE
line 364: inorderTraversal
(1) (1) (2) (3) (3) (4) (5) (5) (8) (9) (9) (9) (10) (10) 
line 365: nearestNeighbour (2)
(2) 
line 366: inorderTraversal
(1) (1) (2) (3) (3) (4) (5) (5) (8) (9) (9) (9) (10) (10) 
line 367: nearestNeighbour (10)
(10) 
line 368: inorderTraversal
(1) (1) (2) (3) (3) (4) (5) (5) (8) (9) (9) (9) (10) (10) 
line 369: kNearestNeighbour 3 (2)
(1) (1) (2) 
line 370: inorderTraversal
(1) (1) (2) (3) (3) (4) (5) (5) (8) (9) (9) (9) (10) (10) 
line 371: nearestNeighbour (5)
(5) 
line 372: inorderTraversal
(1) (1) (2) (3) (3) (4) (5) (5) (8) (9) (9) (9) (10) (10) 
line 373: insert (2)
line 374: inorderTraversal
(1) (1) (2) (2) (3) (3) (4) (5) (5) (8) (9) (9) (9) (10) (10) 
line 375: insert (1)
line 376: inorderTraversal
(1) (1) (1) (2) (2) (3) (3) (4) (5) (5) (8) (9) (9) (9) (10) (10) 
line 377: search (9)
TRUE
line 378: inorderTraversal
(1) (1) (1) (2) (2) (3) (3) (4) (5) (5) (8) (9) (9) (9) (10) (10) 
line 379: clear
line 380: buildTree 10
(6) (8) (10) (9) (10) (5) (1) (5) (5) (7) 
line 381: inorderTraversal
(1) (5) (5) (5) (6) (7) (8) (9) (10) (10) 
line 382: remove (7)
line 383: inorderTraversal
(1) (5) (5) (5) (6) (8) (9) (10) (10) 
line 384: insert (10)
line 385: inorderTraversal
(1) (5) (5) (5) (6) (8) (9) (10) (10) (10) 
line 386: kNearestNeighbour 2 (5)
(5) (5) 
line 387: inorderTraversal
(1) (5) (5) (5) (6) (8) (9) (10) (10) (10) 
line 388: clear
line 389: buildTree 15
(5) (9) (6) (7) (10) (4) (1) (4) (3) (10) (2) (10) (7) (6) (4) 
line 390: inorderTraversal
(1) (2) (3) (4) (4) (4) (5) (6) (6) (7) (7) (9) (10) (10) (10) 
line 391: nearestNeighbour (1)
(1) 
line 392: inorderTraversal
(1) (2) (3) (4) (4) (4) (5) (6) (6) (7) (7) (9) (10) (10) (10) 
line 393: kNearestNeighbour 8 (5)
(3) (4) (4) (4) (5) (6) (6) (7) 
line 394: inorderTraversal
(1) (2) (3) (4) (4) (4) (5) (6) (6) (7) (7) (9) (10) (10) (10) 
line 395: kNearestNeighbour 2 (4)
(4) (4) 
line 396: inorderTraversal
(1) (2) (3) (4) (4) (4) (5) (6) (6) (7) (7) (9) (10) (10) (10) 
line 397: nearestNeighbour (6)
(6) 
line 398: inorderTraversal
(1) (2) (3) (4) (4) (4) (5) (6) (6) (7) (7) (9) (10) (10) (10) 
line 399: nearestNeighbour (4)
(4) 
line 400: inorderTraversal
(1) (2) (3) (4) (4) (4) (5) (6) (6) (7) (7) (9) (10) (10) (10) 
line 401: insert (6)
line 402: inorderTraversal
(1) (2) (3) (4) (4) (4) (5) (6) (6) (6) (7) (7) (9) (10) (10) (10) 
line 403: kNearestNeighbour 6 (7)
(6) (6) (6) (7) (7) (9) 
line 404: inorderTraversal
(1) (2) (3) (4) (4) (4) (5) (6) (6) (6) (7) (7) (9) (10) (10) (10) 
line 405: kNearestNeighbour 7 (7)
(5) (6) (6) (6) (7) (7) (9) 
line 406: inorderTraversal
(1) (2) (3) (4) (4) (4) (5) (6) (6) (6) (7) (7) (9) (10) (10) (10) 
line 407: search (7)
TRUE
line 408: inorderTraversal
(1) (2) (3) (4) (4) (4) (5) (6) (6) (6) (7) (7) (9) (10) (10) (10) 
line 409: insert (7)
line 410: inorderTraversal
(1) (2) (3) (4) (4) (4) (5) (6) (6) (6) (7) (7) (7) (9) (10) (10) (10) 
line 411: insert (7)
line 412: inorderTraversal
(1) (2) (3) (4) (4) (4) (5) (6) (6) (6) (7) (7) (7) (7) (9) (10) (10) (10) 
line 413: insert (6)
line 414: inorderTraversal
(1) (2) (3) (4) (4) (4) (5) (6) (6) (6) (6) (7) (7) (7) (7) (9) (10) (10) (10) 
line 415: nearestNeighbour (5)
(5) 
line 416: inorderTraversal
(1) (2) (3) (4) (4) (4) (5) (6) (6) (6) (6) (7) (7) (7) (7) (9) (10) (10) (10) 
line 417: clear
line 418: buildTree 11
(5) (6) (9) (4) (6) (7) (7) (2) (8) (10) (9) 
line 419: inorderTraversal
(2) (4) (5) (6) (6) (7) (7) (8) (9) (9) (10) 
line 420: nodeCount_height_leafCount
nodeCount=11;height=4;leafCount=4
line 421: inorderTraversal
(2) (4) (5) (6) (6) (7) (7) (8) (9) (9) (10) 
line 422: preorderTraversal
(7) (5) (2) (4) (6) (6) (9) (7) (8) (9) (10) 
line 423: postorderTraversal
(4) (2) (6) (6) (5) (8) (7) (10) (9) (9) (7) 
line 424: clear
