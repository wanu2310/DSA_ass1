line 1: k=1
line 2: insert (4)
line 3: inorderTraversal
(4) 
line 4: kNearestNeighbour 5 (10)
(4) 
line 5: inorderTraversal
(4) 
line 6: remove (4)
line 7: inorderTraversal

line 8: nodeCount_height_leafCount
nodeCount=0;height=0;leafCount=0
line 9: inorderTraversal

line 10: kNearestNeighbour 7 (4)

line 11: inorderTraversal

line 12: insert (7)
line 13: inorderTraversal
(7) 
line 14: kNearestNeighbour 3 (5)
(7) 
line 15: inorderTraversal
(7) 
line 16: insert (10)
line 17: inorderTraversal
(7) (10) 
line 18: kNearestNeighbour 3 (1)
(7) (10) 
line 19: inorderTraversal
(7) (10) 
line 20: preorderTraversal
(7) (10) 
line 21: inorderTraversal
(7) (10) 
line 22: kNearestNeighbour 7 (1)
(7) (10) 
line 23: inorderTraversal
(7) (10) 
line 24: nearestNeighbour (5)
(7) 
line 25: inorderTraversal
(7) (10) 
line 26: nearestNeighbour (7)
(7) 
line 27: inorderTraversal
(7) (10) 
line 28: postorderTraversal
(10) (7) 
line 29: inorderTraversal
(7) (10) 
line 30: kNearestNeighbour 6 (5)
(7) (10) 
line 31: inorderTraversal
(7) (10) 
line 32: nearestNeighbour (8)
(7) 
line 33: inorderTraversal
(7) (10) 
line 34: kNearestNeighbour 2 (1)
(7) (10) 
line 35: inorderTraversal
(7) (10) 
line 36: clear
line 37: buildTree 10
(10) (8) (2) (9) (9) (10) (10) (1) (2) (2) 
line 38: inorderTraversal
(1) (2) (2) (2) (8) (9) (9) (10) (10) (10) 
line 39: insert (2)
line 40: inorderTraversal
(1) (2) (2) (2) (2) (8) (9) (9) (10) (10) (10) 
line 41: insert (1)
line 42: inorderTraversal
(1) (1) (2) (2) (2) (2) (8) (9) (9) (10) (10) (10) 
line 43: kNearestNeighbour 5 (4)
(1) (2) (2) (2) (2) 
line 44: inorderTraversal
(1) (1) (2) (2) (2) (2) (8) (9) (9) (10) (10) (10) 
line 45: remove (2)
line 46: inorderTraversal
(1) (1) (2) (2) (2) (8) (9) (9) (10) (10) (10) 
line 47: kNearestNeighbour 2 (4)
(2) (2) 
line 48: inorderTraversal
(1) (1) (2) (2) (2) (8) (9) (9) (10) (10) (10) 
line 49: clear
line 50: buildTree 12
(4) (5) (3) (2) (6) (8) (9) (4) (1) (6) (3) (1) 
line 51: inorderTraversal
(1) (1) (2) (3) (3) (4) (4) (5) (6) (6) (8) (9) 
line 52: preorderTraversal
(4) (2) (1) (1) (3) (3) (6) (4) (5) (8) (6) (9) 
line 53: inorderTraversal
(1) (1) (2) (3) (3) (4) (4) (5) (6) (6) (8) (9) 
line 54: search (5)
TRUE
line 55: inorderTraversal
(1) (1) (2) (3) (3) (4) (4) (5) (6) (6) (8) (9) 
line 56: kNearestNeighbour 3 (10)
(6) (8) (9) 
line 57: inorderTraversal
(1) (1) (2) (3) (3) (4) (4) (5) (6) (6) (8) (9) 
line 58: clear
line 59: buildTree 13
(6) (8) (5) (9) (1) (4) (7) (3) (9) (8) (1) (4) (8) 
line 60: inorderTraversal
(1) (1) (3) (4) (4) (5) (6) (7) (8) (8) (8) (9) (9) 
line 61: insert (1)
line 62: inorderTraversal
(1) (1) (1) (3) (4) (4) (5) (6) (7) (8) (8) (8) (9) (9) 
line 63: insert (5)
line 64: inorderTraversal
(1) (1) (1) (3) (4) (4) (5) (5) (6) (7) (8) (8) (8) (9) (9) 
line 65: insert (8)
line 66: inorderTraversal
(1) (1) (1) (3) (4) (4) (5) (5) (6) (7) (8) (8) (8) (8) (9) (9) 
line 67: insert (6)
line 68: inorderTraversal
(1) (1) (1) (3) (4) (4) (5) (5) (6) (6) (7) (8) (8) (8) (8) (9) (9) 
line 69: insert (7)
line 70: inorderTraversal
(1) (1) (1) (3) (4) (4) (5) (5) (6) (6) (7) (7) (8) (8) (8) (8) (9) (9) 
line 71: kNearestNeighbour 7 (8)
(7) (8) (8) (8) (8) (9) (9) 
line 72: inorderTraversal
(1) (1) (1) (3) (4) (4) (5) (5) (6) (6) (7) (7) (8) (8) (8) (8) (9) (9) 
line 73: kNearestNeighbour 4 (2)
(1) (1) (1) (3) 
line 74: inorderTraversal
(1) (1) (1) (3) (4) (4) (5) (5) (6) (6) (7) (7) (8) (8) (8) (8) (9) (9) 
line 75: insert (2)
line 76: inorderTraversal
(1) (1) (1) (2) (3) (4) (4) (5) (5) (6) (6) (7) (7) (8) (8) (8) (8) (9) (9) 
line 77: nearestNeighbour (4)
(4) 
line 78: inorderTraversal
(1) (1) (1) (2) (3) (4) (4) (5) (5) (6) (6) (7) (7) (8) (8) (8) (8) (9) (9) 
line 79: nearestNeighbour (2)
(2) 
line 80: inorderTraversal
(1) (1) (1) (2) (3) (4) (4) (5) (5) (6) (6) (7) (7) (8) (8) (8) (8) (9) (9) 
line 81: insert (10)
line 82: inorderTraversal
(1) (1) (1) (2) (3) (4) (4) (5) (5) (6) (6) (7) (7) (8) (8) (8) (8) (9) (9) (10) 
line 83: nearestNeighbour (3)
(3) 
line 84: inorderTraversal
(1) (1) (1) (2) (3) (4) (4) (5) (5) (6) (6) (7) (7) (8) (8) (8) (8) (9) (9) (10) 
line 85: clear
line 86: buildTree 9
(4) (2) (9) (2) (2) (9) (2) (8) (7) 
line 87: inorderTraversal
(2) (2) (2) (2) (4) (7) (8) (9) (9) 
line 88: insert (2)
line 89: inorderTraversal
(2) (2) (2) (2) (2) (4) (7) (8) (9) (9) 
line 90: insert (1)
line 91: inorderTraversal
(1) (2) (2) (2) (2) (2) (4) (7) (8) (9) (9) 
line 92: insert (10)
line 93: inorderTraversal
(1) (2) (2) (2) (2) (2) (4) (7) (8) (9) (9) (10) 
line 94: kNearestNeighbour 3 (8)
(8) (9) (9) 
line 95: inorderTraversal
(1) (2) (2) (2) (2) (2) (4) (7) (8) (9) (9) (10) 
line 96: insert (3)
line 97: inorderTraversal
(1) (2) (2) (2) (2) (2) (3) (4) (7) (8) (9) (9) (10) 
line 98: kNearestNeighbour 4 (7)
(7) (8) (9) (9) 
line 99: inorderTraversal
(1) (2) (2) (2) (2) (2) (3) (4) (7) (8) (9) (9) (10) 
line 100: clear
line 101: buildTree 11
(5) (10) (8) (9) (1) (1) (1) (6) (8) (2) (3) 
line 102: inorderTraversal
(1) (1) (1) (2) (3) (5) (6) (8) (8) (9) (10) 
line 103: clear
line 104: buildTree 20
(3) (6) (6) (2) (6) (2) (9) (6) (1) (8) (10) (10) (1) (3) (7) (4) (1) (7) (8) (3) 
line 105: inorderTraversal
(1) (1) (1) (2) (2) (3) (3) (3) (4) (6) (6) (6) (6) (7) (7) (8) (8) (9) (10) (10) 
line 106: nearestNeighbour (5)
(4) 
line 107: inorderTraversal
(1) (1) (1) (2) (2) (3) (3) (3) (4) (6) (6) (6) (6) (7) (7) (8) (8) (9) (10) (10) 
line 108: kNearestNeighbour 5 (10)
(8) (8) (9) (10) (10) 
line 109: inorderTraversal
(1) (1) (1) (2) (2) (3) (3) (3) (4) (6) (6) (6) (6) (7) (7) (8) (8) (9) (10) (10) 
line 110: nearestNeighbour (2)
(2) 
line 111: inorderTraversal
(1) (1) (1) (2) (2) (3) (3) (3) (4) (6) (6) (6) (6) (7) (7) (8) (8) (9) (10) (10) 
line 112: nearestNeighbour (5)
(4) 
line 113: inorderTraversal
(1) (1) (1) (2) (2) (3) (3) (3) (4) (6) (6) (6) (6) (7) (7) (8) (8) (9) (10) (10) 
line 114: nearestNeighbour (3)
(3) 
line 115: inorderTraversal
(1) (1) (1) (2) (2) (3) (3) (3) (4) (6) (6) (6) (6) (7) (7) (8) (8) (9) (10) (10) 
line 116: search (6)
TRUE
line 117: inorderTraversal
(1) (1) (1) (2) (2) (3) (3) (3) (4) (6) (6) (6) (6) (7) (7) (8) (8) (9) (10) (10) 
line 118: nodeCount_height_leafCount
nodeCount=20;height=6;leafCount=7
line 119: inorderTraversal
(1) (1) (1) (2) (2) (3) (3) (3) (4) (6) (6) (6) (6) (7) (7) (8) (8) (9) (10) (10) 
line 120: insert (6)
line 121: inorderTraversal
(1) (1) (1) (2) (2) (3) (3) (3) (4) (6) (6) (6) (6) (6) (7) (7) (8) (8) (9) (10) (10) 
line 122: preorderTraversal
(6) (2) (1) (1) (1) (3) (2) (3) (3) (4) (7) (6) (6) (6) (6) (8) (7) (9) (8) (10) (10) 
line 123: inorderTraversal
(1) (1) (1) (2) (2) (3) (3) (3) (4) (6) (6) (6) (6) (6) (7) (7) (8) (8) (9) (10) (10) 
line 124: insert (6)
line 125: inorderTraversal
(1) (1) (1) (2) (2) (3) (3) (3) (4) (6) (6) (6) (6) (6) (6) (7) (7) (8) (8) (9) (10) (10) 
line 126: nodeCount_height_leafCount
nodeCount=22;height=7;leafCount=7
line 127: inorderTraversal
(1) (1) (1) (2) (2) (3) (3) (3) (4) (6) (6) (6) (6) (6) (6) (7) (7) (8) (8) (9) (10) (10) 
line 128: insert (3)
line 129: inorderTraversal
(1) (1) (1) (2) (2) (3) (3) (3) (3) (4) (6) (6) (6) (6) (6) (6) (7) (7) (8) (8) (9) (10) (10) 
line 130: remove (6)
line 131: inorderTraversal
(1) (1) (1) (2) (2) (3) (3) (3) (3) (4) (6) (6) (6) (6) (6) (7) (7) (8) (8) (9) (10) (10) 
line 132: postorderTraversal
(1) (1) (1) (2) (3) (4) (3) (3) (3) (2) (6) (6) (6) (6) (7) (8) (10) (10) (9) (8) (7) (6) 
line 133: inorderTraversal
(1) (1) (1) (2) (2) (3) (3) (3) (3) (4) (6) (6) (6) (6) (6) (7) (7) (8) (8) (9) (10) (10) 
line 134: clear
line 135: buildTree 2
(3) (2) 
line 136: inorderTraversal
(2) (3) 
line 137: insert (3)
line 138: inorderTraversal
(2) (3) (3) 
line 139: insert (9)
line 140: inorderTraversal
(2) (3) (3) (9) 
line 141: clear
line 142: buildTree 15
(10) (1) (9) (10) (6) (3) (5) (3) (3) (5) (6) (10) (9) (3) (8) 
line 143: inorderTraversal
(1) (3) (3) (3) (3) (5) (5) (6) (6) (8) (9) (9) (10) (10) (10) 
line 144: nearestNeighbour (10)
(10) 
line 145: inorderTraversal
(1) (3) (3) (3) (3) (5) (5) (6) (6) (8) (9) (9) (10) (10) (10) 
line 146: kNearestNeighbour 3 (9)
(9) (9) (10) 
line 147: inorderTraversal
(1) (3) (3) (3) (3) (5) (5) (6) (6) (8) (9) (9) (10) (10) (10) 
line 148: nearestNeighbour (8)
(8) 
line 149: inorderTraversal
(1) (3) (3) (3) (3) (5) (5) (6) (6) (8) (9) (9) (10) (10) (10) 
line 150: kNearestNeighbour 7 (10)
(6) (8) (9) (9) (10) (10) (10) 
line 151: inorderTraversal
(1) (3) (3) (3) (3) (5) (5) (6) (6) (8) (9) (9) (10) (10) (10) 
line 152: insert (9)
line 153: inorderTraversal
(1) (3) (3) (3) (3) (5) (5) (6) (6) (8) (9) (9) (9) (10) (10) (10) 
line 154: insert (9)
line 155: inorderTraversal
(1) (3) (3) (3) (3) (5) (5) (6) (6) (8) (9) (9) (9) (9) (10) (10) (10) 
line 156: nearestNeighbour (8)
(8) 
line 157: inorderTraversal
(1) (3) (3) (3) (3) (5) (5) (6) (6) (8) (9) (9) (9) (9) (10) (10) (10) 
line 158: kNearestNeighbour 7 (5)
(3) (3) (3) (5) (5) (6) (6) 
line 159: inorderTraversal
(1) (3) (3) (3) (3) (5) (5) (6) (6) (8) (9) (9) (9) (9) (10) (10) (10) 
line 160: insert (10)
line 161: inorderTraversal
(1) (3) (3) (3) (3) (5) (5) (6) (6) (8) (9) (9) (9) (9) (10) (10) (10) (10) 
line 162: kNearestNeighbour 2 (10)
(10) (10) 
line 163: inorderTraversal
(1) (3) (3) (3) (3) (5) (5) (6) (6) (8) (9) (9) (9) (9) (10) (10) (10) (10) 
line 164: remove (6)
line 165: inorderTraversal
(1) (3) (3) (3) (3) (5) (5) (6) (8) (9) (9) (9) (9) (10) (10) (10) (10) 
line 166: preorderTraversal
(6) (3) (1) (3) (3) (5) (3) (5) (9) (8) (10) (9) (9) (9) (10) (10) (10) 
line 167: inorderTraversal
(1) (3) (3) (3) (3) (5) (5) (6) (8) (9) (9) (9) (9) (10) (10) (10) (10) 
line 168: insert (2)
line 169: inorderTraversal
(1) (2) (3) (3) (3) (3) (5) (5) (6) (8) (9) (9) (9) (9) (10) (10) (10) (10) 
line 170: remove (10)
line 171: inorderTraversal
(1) (2) (3) (3) (3) (3) (5) (5) (6) (8) (9) (9) (9) (9) (10) (10) (10) 
line 172: remove (3)
line 173: inorderTraversal
(1) (2) (3) (3) (3) (5) (5) (6) (8) (9) (9) (9) (9) (10) (10) (10) 
line 174: nearestNeighbour (9)
(9) 
line 175: inorderTraversal
(1) (2) (3) (3) (3) (5) (5) (6) (8) (9) (9) (9) (9) (10) (10) (10) 
line 176: kNearestNeighbour 3 (2)
(1) (2) (3) 
line 177: inorderTraversal
(1) (2) (3) (3) (3) (5) (5) (6) (8) (9) (9) (9) (9) (10) (10) (10) 
line 178: nodeCount_height_leafCount
nodeCount=16;height=6;leafCount=5
line 179: inorderTraversal
(1) (2) (3) (3) (3) (5) (5) (6) (8) (9) (9) (9) (9) (10) (10) (10) 
line 180: postorderTraversal
(2) (1) (5) (5) (3) (3) (3) (8) (9) (9) (9) (10) (10) (10) (9) (6) 
line 181: inorderTraversal
(1) (2) (3) (3) (3) (5) (5) (6) (8) (9) (9) (9) (9) (10) (10) (10) 
line 182: nearestNeighbour (2)
(2) 
line 183: inorderTraversal
(1) (2) (3) (3) (3) (5) (5) (6) (8) (9) (9) (9) (9) (10) (10) (10) 
line 184: kNearestNeighbour 1 (2)
(2) 
line 185: inorderTraversal
(1) (2) (3) (3) (3) (5) (5) (6) (8) (9) (9) (9) (9) (10) (10) (10) 
line 186: nearestNeighbour (3)
(3) 
line 187: inorderTraversal
(1) (2) (3) (3) (3) (5) (5) (6) (8) (9) (9) (9) (9) (10) (10) (10) 
line 188: kNearestNeighbour 2 (6)
(5) (6) 
line 189: inorderTraversal
(1) (2) (3) (3) (3) (5) (5) (6) (8) (9) (9) (9) (9) (10) (10) (10) 
line 190: nearestNeighbour (7)
(8) 
line 191: inorderTraversal
(1) (2) (3) (3) (3) (5) (5) (6) (8) (9) (9) (9) (9) (10) (10) (10) 
line 192: kNearestNeighbour 8 (9)
(8) (9) (9) (9) (9) (10) (10) (10) 
line 193: inorderTraversal
(1) (2) (3) (3) (3) (5) (5) (6) (8) (9) (9) (9) (9) (10) (10) (10) 
line 194: clear
line 195: buildTree 16
(7) (6) (7) (2) (10) (4) (3) (5) (1) (9) (7) (6) (6) (10) (1) (6) 
line 196: inorderTraversal
(1) (1) (2) (3) (4) (5) (6) (6) (6) (6) (7) (7) (7) (9) (10) (10) 
line 197: insert (6)
line 198: inorderTraversal
(1) (1) (2) (3) (4) (5) (6) (6) (6) (6) (6) (7) (7) (7) (9) (10) (10) 
line 199: clear
line 200: buildTree 13
(8) (8) (10) (2) (3) (2) (3) (10) (8) (6) (5) (2) (1) 
line 201: inorderTraversal
(1) (2) (2) (2) (3) (3) (5) (6) (8) (8) (8) (10) (10) 
line 202: search (3)
TRUE
line 203: inorderTraversal
(1) (2) (2) (2) (3) (3) (5) (6) (8) (8) (8) (10) (10) 
line 204: kNearestNeighbour 10 (3)
(1) (2) (2) (2) (3) (3) (5) (6) (8) (8) 
line 205: inorderTraversal
(1) (2) (2) (2) (3) (3) (5) (6) (8) (8) (8) (10) (10) 
line 206: kNearestNeighbour 2 (3)
(3) (3) 
line 207: inorderTraversal
(1) (2) (2) (2) (3) (3) (5) (6) (8) (8) (8) (10) (10) 
line 208: remove (3)
line 209: inorderTraversal
(1) (2) (2) (2) (3) (5) (6) (8) (8) (8) (10) (10) 
line 210: nearestNeighbour (4)
(3) 
line 211: inorderTraversal
(1) (2) (2) (2) (3) (5) (6) (8) (8) (8) (10) (10) 
line 212: insert (10)
line 213: inorderTraversal
(1) (2) (2) (2) (3) (5) (6) (8) (8) (8) (10) (10) (10) 
line 214: remove (2)
line 215: inorderTraversal
(1) (2) (2) (3) (5) (6) (8) (8) (8) (10) (10) (10) 
line 216: search (2)
TRUE
line 217: inorderTraversal
(1) (2) (2) (3) (5) (6) (8) (8) (8) (10) (10) (10) 
line 218: insert (3)
line 219: inorderTraversal
(1) (2) (2) (3) (3) (5) (6) (8) (8) (8) (10) (10) (10) 
line 220: insert (10)
line 221: inorderTraversal
(1) (2) (2) (3) (3) (5) (6) (8) (8) (8) (10) (10) (10) (10) 
line 222: insert (2)
line 223: inorderTraversal
(1) (2) (2) (2) (3) (3) (5) (6) (8) (8) (8) (10) (10) (10) (10) 
line 224: insert (10)
line 225: inorderTraversal
(1) (2) (2) (2) (3) (3) (5) (6) (8) (8) (8) (10) (10) (10) (10) (10) 
line 226: insert (8)
line 227: inorderTraversal
(1) (2) (2) (2) (3) (3) (5) (6) (8) (8) (8) (8) (10) (10) (10) (10) (10) 
line 228: insert (2)
line 229: inorderTraversal
(1) (2) (2) (2) (2) (3) (3) (5) (6) (8) (8) (8) (8) (10) (10) (10) (10) (10) 
line 230: clear
line 231: buildTree 9
(10) (9) (5) (6) (10) (7) (4) (10) (1) 
line 232: inorderTraversal
(1) (4) (5) (6) (7) (9) (10) (10) (10) 
line 233: insert (1)
line 234: inorderTraversal
(1) (1) (4) (5) (6) (7) (9) (10) (10) (10) 
line 235: kNearestNeighbour 1 (6)
(6) 
line 236: inorderTraversal
(1) (1) (4) (5) (6) (7) (9) (10) (10) (10) 
line 237: kNearestNeighbour 8 (1)
(1) (1) (4) (5) (6) (7) (9) (10) 
line 238: inorderTraversal
(1) (1) (4) (5) (6) (7) (9) (10) (10) (10) 
line 239: clear
line 240: buildTree 19
(3) (6) (4) (8) (1) (7) (5) (7) (3) (8) (7) (8) (1) (7) (9) (7) (3) (5) (4) 
line 241: inorderTraversal
(1) (1) (3) (3) (3) (4) (4) (5) (5) (6) (7) (7) (7) (7) (7) (8) (8) (8) (9) 
line 242: nearestNeighbour (2)
(1) 
line 243: inorderTraversal
(1) (1) (3) (3) (3) (4) (4) (5) (5) (6) (7) (7) (7) (7) (7) (8) (8) (8) (9) 
line 244: insert (1)
line 245: inorderTraversal
(1) (1) (1) (3) (3) (3) (4) (4) (5) (5) (6) (7) (7) (7) (7) (7) (8) (8) (8) (9) 
line 246: nearestNeighbour (10)
(9) 
line 247: inorderTraversal
(1) (1) (1) (3) (3) (3) (4) (4) (5) (5) (6) (7) (7) (7) (7) (7) (8) (8) (8) (9) 
line 248: remove (4)
line 249: inorderTraversal
(1) (1) (1) (3) (3) (3) (4) (5) (5) (6) (7) (7) (7) (7) (7) (8) (8) (8) (9) 
line 250: nearestNeighbour (7)
(7) 
line 251: inorderTraversal
(1) (1) (1) (3) (3) (3) (4) (5) (5) (6) (7) (7) (7) (7) (7) (8) (8) (8) (9) 
line 252: nearestNeighbour (3)
(3) 
line 253: inorderTraversal
(1) (1) (1) (3) (3) (3) (4) (5) (5) (6) (7) (7) (7) (7) (7) (8) (8) (8) (9) 
line 254: nearestNeighbour (5)
(5) 
line 255: inorderTraversal
(1) (1) (1) (3) (3) (3) (4) (5) (5) (6) (7) (7) (7) (7) (7) (8) (8) (8) (9) 
line 256: nearestNeighbour (6)
(6) 
line 257: inorderTraversal
(1) (1) (1) (3) (3) (3) (4) (5) (5) (6) (7) (7) (7) (7) (7) (8) (8) (8) (9) 
line 258: nearestNeighbour (1)
(1) 
line 259: inorderTraversal
(1) (1) (1) (3) (3) (3) (4) (5) (5) (6) (7) (7) (7) (7) (7) (8) (8) (8) (9) 
line 260: insert (1)
line 261: inorderTraversal
(1) (1) (1) (1) (3) (3) (3) (4) (5) (5) (6) (7) (7) (7) (7) (7) (8) (8) (8) (9) 
line 262: remove (5)
line 263: inorderTraversal
(1) (1) (1) (1) (3) (3) (3) (4) (5) (6) (7) (7) (7) (7) (7) (8) (8) (8) (9) 
line 264: kNearestNeighbour 8 (1)
(1) (1) (1) (1) (3) (3) (3) (4) 
line 265: inorderTraversal
(1) (1) (1) (1) (3) (3) (3) (4) (5) (6) (7) (7) (7) (7) (7) (8) (8) (8) (9) 
line 266: nearestNeighbour (2)
(1) 
line 267: inorderTraversal
(1) (1) (1) (1) (3) (3) (3) (4) (5) (6) (7) (7) (7) (7) (7) (8) (8) (8) (9) 
line 268: nearestNeighbour (9)
(9) 
line 269: inorderTraversal
(1) (1) (1) (1) (3) (3) (3) (4) (5) (6) (7) (7) (7) (7) (7) (8) (8) (8) (9) 
line 270: insert (3)
line 271: inorderTraversal
(1) (1) (1) (1) (3) (3) (3) (3) (4) (5) (6) (7) (7) (7) (7) (7) (8) (8) (8) (9) 
line 272: clear
line 273: buildTree 20
(2) (3) (9) (3) (8) (7) (3) (5) (3) (7) (3) (7) (5) (6) (7) (3) (5) (5) (8) (6) 
line 274: inorderTraversal
(2) (3) (3) (3) (3) (3) (3) (5) (5) (5) (5) (6) (6) (7) (7) (7) (7) (8) (8) (9) 
line 275: insert (3)
line 276: inorderTraversal
(2) (3) (3) (3) (3) (3) (3) (3) (5) (5) (5) (5) (6) (6) (7) (7) (7) (7) (8) (8) (9) 
line 277: nearestNeighbour (2)
(2) 
line 278: inorderTraversal
(2) (3) (3) (3) (3) (3) (3) (3) (5) (5) (5) (5) (6) (6) (7) (7) (7) (7) (8) (8) (9) 
line 279: insert (7)
line 280: inorderTraversal
(2) (3) (3) (3) (3) (3) (3) (3) (5) (5) (5) (5) (6) (6) (7) (7) (7) (7) (7) (8) (8) (9) 
line 281: kNearestNeighbour 3 (6)
(5) (6) (6) 
line 282: inorderTraversal
(2) (3) (3) (3) (3) (3) (3) (3) (5) (5) (5) (5) (6) (6) (7) (7) (7) (7) (7) (8) (8) (9) 
line 283: nearestNeighbour (1)
(2) 
line 284: inorderTraversal
(2) (3) (3) (3) (3) (3) (3) (3) (5) (5) (5) (5) (6) (6) (7) (7) (7) (7) (7) (8) (8) (9) 
line 285: nodeCount_height_leafCount
nodeCount=22;height=8;leafCount=6
line 286: inorderTraversal
(2) (3) (3) (3) (3) (3) (3) (3) (5) (5) (5) (5) (6) (6) (7) (7) (7) (7) (7) (8) (8) (9) 
line 287: kNearestNeighbour 2 (6)
(6) (6) 
line 288: inorderTraversal
(2) (3) (3) (3) (3) (3) (3) (3) (5) (5) (5) (5) (6) (6) (7) (7) (7) (7) (7) (8) (8) (9) 
line 289: insert (1)
line 290: inorderTraversal
(1) (2) (3) (3) (3) (3) (3) (3) (3) (5) (5) (5) (5) (6) (6) (7) (7) (7) (7) (7) (8) (8) (9) 
line 291: kNearestNeighbour 3 (6)
(5) (6) (6) 
line 292: inorderTraversal
(1) (2) (3) (3) (3) (3) (3) (3) (3) (5) (5) (5) (5) (6) (6) (7) (7) (7) (7) (7) (8) (8) (9) 
line 293: remove (3)
line 294: inorderTraversal
(1) (2) (3) (3) (3) (3) (3) (3) (5) (5) (5) (5) (6) (6) (7) (7) (7) (7) (7) (8) (8) (9) 
line 295: nearestNeighbour (10)
(9) 
line 296: inorderTraversal
(1) (2) (3) (3) (3) (3) (3) (3) (5) (5) (5) (5) (6) (6) (7) (7) (7) (7) (7) (8) (8) (9) 
line 297: insert (3)
line 298: inorderTraversal
(1) (2) (3) (3) (3) (3) (3) (3) (3) (5) (5) (5) (5) (6) (6) (7) (7) (7) (7) (7) (8) (8) (9) 
line 299: search (6)
TRUE
line 300: inorderTraversal
(1) (2) (3) (3) (3) (3) (3) (3) (3) (5) (5) (5) (5) (6) (6) (7) (7) (7) (7) (7) (8) (8) (9) 
line 301: remove (3)
line 302: inorderTraversal
(1) (2) (3) (3) (3) (3) (3) (3) (5) (5) (5) (5) (6) (6) (7) (7) (7) (7) (7) (8) (8) (9) 
line 303: insert (2)
line 304: inorderTraversal
(1) (2) (2) (3) (3) (3) (3) (3) (3) (5) (5) (5) (5) (6) (6) (7) (7) (7) (7) (7) (8) (8) (9) 
line 305: insert (4)
line 306: inorderTraversal
(1) (2) (2) (3) (3) (3) (3) (3) (3) (4) (5) (5) (5) (5) (6) (6) (7) (7) (7) (7) (7) (8) (8) (9) 
line 307: kNearestNeighbour 2 (10)
(8) (9) 
line 308: inorderTraversal
(1) (2) (2) (3) (3) (3) (3) (3) (3) (4) (5) (5) (5) (5) (6) (6) (7) (7) (7) (7) (7) (8) (8) (9) 
line 309: nearestNeighbour (1)
(1) 
line 310: inorderTraversal
(1) (2) (2) (3) (3) (3) (3) (3) (3) (4) (5) (5) (5) (5) (6) (6) (7) (7) (7) (7) (7) (8) (8) (9) 
line 311: insert (2)
line 312: inorderTraversal
(1) (2) (2) (2) (3) (3) (3) (3) (3) (3) (4) (5) (5) (5) (5) (6) (6) (7) (7) (7) (7) (7) (8) (8) (9) 
line 313: insert (6)
line 314: inorderTraversal
(1) (2) (2) (2) (3) (3) (3) (3) (3) (3) (4) (5) (5) (5) (5) (6) (6) (6) (7) (7) (7) (7) (7) (8) (8) (9) 
line 315: nearestNeighbour (9)
(9) 
line 316: inorderTraversal
(1) (2) (2) (2) (3) (3) (3) (3) (3) (3) (4) (5) (5) (5) (5) (6) (6) (6) (7) (7) (7) (7) (7) (8) (8) (9) 
line 317: insert (9)
line 318: inorderTraversal
(1) (2) (2) (2) (3) (3) (3) (3) (3) (3) (4) (5) (5) (5) (5) (6) (6) (6) (7) (7) (7) (7) (7) (8) (8) (9) (9) 
line 319: kNearestNeighbour 4 (2)
(1) (2) (2) (2) 
line 320: inorderTraversal
(1) (2) (2) (2) (3) (3) (3) (3) (3) (3) (4) (5) (5) (5) (5) (6) (6) (6) (7) (7) (7) (7) (7) (8) (8) (9) (9) 
line 321: remove (10)
line 322: inorderTraversal
(1) (2) (2) (2) (3) (3) (3) (3) (3) (3) (4) (5) (5) (5) (5) (6) (6) (6) (7) (7) (7) (7) (7) (8) (8) (9) (9) 
line 323: kNearestNeighbour 4 (10)
(8) (8) (9) (9) 
line 324: inorderTraversal
(1) (2) (2) (2) (3) (3) (3) (3) (3) (3) (4) (5) (5) (5) (5) (6) (6) (6) (7) (7) (7) (7) (7) (8) (8) (9) (9) 
line 325: clear
line 326: buildTree 6
(3) (3) (6) (1) (9) (1) 
line 327: inorderTraversal
(1) (1) (3) (3) (6) (9) 
line 328: clear
line 329: buildTree 1
(3) 
line 330: inorderTraversal
(3) 
line 331: nearestNeighbour (7)
(3) 
line 332: inorderTraversal
(3) 
line 333: insert (8)
line 334: inorderTraversal
(3) (8) 
line 335: nearestNeighbour (2)
(3) 
line 336: inorderTraversal
(3) (8) 
line 337: nearestNeighbour (4)
(3) 
line 338: inorderTraversal
(3) (8) 
line 339: insert (10)
line 340: inorderTraversal
(3) (8) (10) 
line 341: preorderTraversal
(3) (8) (10) 
line 342: inorderTraversal
(3) (8) (10) 
line 343: postorderTraversal
(10) (8) (3) 
line 344: inorderTraversal
(3) (8) (10) 
line 345: clear
line 346: buildTree 15
(7) (6) (9) (1) (9) (4) (8) (6) (6) (2) (9) (7) (2) (8) (2) 
line 347: inorderTraversal
(1) (2) (2) (2) (4) (6) (6) (6) (7) (7) (8) (8) (9) (9) (9) 
line 348: clear
line 349: buildTree 12
(5) (6) (8) (1) (8) (1) (1) (2) (7) (3) (8) (8) 
line 350: inorderTraversal
(1) (1) (1) (2) (3) (5) (6) (7) (8) (8) (8) (8) 
line 351: preorderTraversal
(5) (1) (1) (2) (1) (3) (8) (6) (7) (8) (8) (8) 
line 352: inorderTraversal
(1) (1) (1) (2) (3) (5) (6) (7) (8) (8) (8) (8) 
line 353: nearestNeighbour (10)
(8) 
line 354: inorderTraversal
(1) (1) (1) (2) (3) (5) (6) (7) (8) (8) (8) (8) 
line 355: kNearestNeighbour 4 (9)
(8) (8) (8) (8) 
line 356: inorderTraversal
(1) (1) (1) (2) (3) (5) (6) (7) (8) (8) (8) (8) 
line 357: nearestNeighbour (9)
(8) 
line 358: inorderTraversal
(1) (1) (1) (2) (3) (5) (6) (7) (8) (8) (8) (8) 
line 359: insert (7)
line 360: inorderTraversal
(1) (1) (1) (2) (3) (5) (6) (7) (7) (8) (8) (8) (8) 
line 361: insert (8)
line 362: inorderTraversal
(1) (1) (1) (2) (3) (5) (6) (7) (7) (8) (8) (8) (8) (8) 
line 363: clear
line 364: buildTree 16
(2) (4) (9) (2) (7) (8) (3) (9) (6) (2) (3) (7) (7) (3) (5) (4) 
line 365: inorderTraversal
(2) (2) (2) (3) (3) (3) (4) (4) (5) (6) (7) (7) (7) (8) (9) (9) 
line 366: insert (8)
line 367: inorderTraversal
(2) (2) (2) (3) (3) (3) (4) (4) (5) (6) (7) (7) (7) (8) (8) (9) (9) 
line 368: kNearestNeighbour 10 (2)
(2) (2) (2) (3) (3) (3) (4) (4) (5) (6) 
line 369: inorderTraversal
(2) (2) (2) (3) (3) (3) (4) (4) (5) (6) (7) (7) (7) (8) (8) (9) (9) 
line 370: insert (10)
line 371: inorderTraversal
(2) (2) (2) (3) (3) (3) (4) (4) (5) (6) (7) (7) (7) (8) (8) (9) (9) (10) 
line 372: kNearestNeighbour 6 (10)
(7) (8) (8) (9) (9) (10) 
line 373: inorderTraversal
(2) (2) (2) (3) (3) (3) (4) (4) (5) (6) (7) (7) (7) (8) (8) (9) (9) (10) 
line 374: nearestNeighbour (1)
(2) 
line 375: inorderTraversal
(2) (2) (2) (3) (3) (3) (4) (4) (5) (6) (7) (7) (7) (8) (8) (9) (9) (10) 
line 376: postorderTraversal
(2) (2) (3) (3) (3) (2) (4) (6) (5) (7) (7) (8) (10) (9) (9) (8) (7) (4) 
line 377: inorderTraversal
(2) (2) (2) (3) (3) (3) (4) (4) (5) (6) (7) (7) (7) (8) (8) (9) (9) (10) 
line 378: clear
line 379: buildTree 1
(10) 
line 380: inorderTraversal
(10) 
line 381: insert (10)
line 382: inorderTraversal
(10) (10) 
line 383: insert (7)
line 384: inorderTraversal
(7) (10) (10) 
line 385: nodeCount_height_leafCount
nodeCount=3;height=2;leafCount=2
line 386: inorderTraversal
(7) (10) (10) 
line 387: remove (10)
line 388: inorderTraversal
(7) (10) 
line 389: kNearestNeighbour 5 (4)
(7) (10) 
line 390: inorderTraversal
(7) (10) 
line 391: nearestNeighbour (9)
(10) 
line 392: inorderTraversal
(7) (10) 
line 393: insert (9)
line 394: inorderTraversal
(7) (9) (10) 
line 395: kNearestNeighbour 2 (4)
(7) (9) 
line 396: inorderTraversal
(7) (9) (10) 
line 397: clear
line 398: buildTree 1
(7) 
line 399: inorderTraversal
(7) 
line 400: insert (1)
line 401: inorderTraversal
(1) (7) 
line 402: insert (2)
line 403: inorderTraversal
(1) (2) (7) 
line 404: nearestNeighbour (8)
(7) 
line 405: inorderTraversal
(1) (2) (7) 
line 406: nearestNeighbour (7)
(7) 
line 407: inorderTraversal
(1) (2) (7) 
line 408: nearestNeighbour (10)
(7) 
line 409: inorderTraversal
(1) (2) (7) 
line 410: kNearestNeighbour 3 (4)
(1) (2) (7) 
line 411: inorderTraversal
(1) (2) (7) 
line 412: remove (7)
line 413: inorderTraversal
(1) (2) 
line 414: clear
line 415: buildTree 16
(6) (2) (1) (6) (7) (9) (10) (1) (8) (8) (2) (4) (9) (1) (6) (4) 
line 416: inorderTraversal
(1) (1) (1) (2) (2) (4) (4) (6) (6) (6) (7) (8) (8) (9) (9) (10) 
line 417: insert (1)
line 418: inorderTraversal
(1) (1) (1) (1) (2) (2) (4) (4) (6) (6) (6) (7) (8) (8) (9) (9) (10) 
line 419: kNearestNeighbour 6 (1)
(1) (1) (1) (1) (2) (2) 
line 420: inorderTraversal
(1) (1) (1) (1) (2) (2) (4) (4) (6) (6) (6) (7) (8) (8) (9) (9) (10) 
line 421: kNearestNeighbour 8 (7)
(6) (6) (6) (7) (8) (8) (9) (9) 
line 422: inorderTraversal
(1) (1) (1) (1) (2) (2) (4) (4) (6) (6) (6) (7) (8) (8) (9) (9) (10) 
line 423: nodeCount_height_leafCount
nodeCount=17;height=6;leafCount=6
line 424: inorderTraversal
(1) (1) (1) (1) (2) (2) (4) (4) (6) (6) (6) (7) (8) (8) (9) (9) (10) 
line 425: preorderTraversal
(6) (2) (1) (1) (1) (1) (4) (2) (4) (8) (6) (6) (7) (9) (8) (9) (10) 
line 426: postorderTraversal
(1) (1) (1) (1) (2) (4) (4) (2) (7) (6) (6) (8) (10) (9) (9) (8) (6) 
line 427: clear
