line 1: k=1
line 2: kNearestNeighbour 4 (1)

line 3: inorderTraversal

line 4: clear
line 5: buildTree 7
(9) (1) (1) (10) (6) (5) (3) 
line 6: inorderTraversal
(1) (1) (3) (5) (6) (9) (10) 
line 7: preorderTraversal
(5) (1) (1) (3) (9) (6) (10) 
line 8: inorderTraversal
(1) (1) (3) (5) (6) (9) (10) 
line 9: nearestNeighbour (10)
(10) 
line 10: inorderTraversal
(1) (1) (3) (5) (6) (9) (10) 
line 11: remove (1)
line 12: inorderTraversal
(1) (3) (5) (6) (9) (10) 
line 13: insert (10)
line 14: inorderTraversal
(1) (3) (5) (6) (9) (10) (10) 
line 15: insert (1)
line 16: inorderTraversal
(1) (1) (3) (5) (6) (9) (10) (10) 
line 17: remove (5)
line 18: inorderTraversal
(1) (1) (3) (6) (9) (10) (10) 
line 19: insert (5)
line 20: inorderTraversal
(1) (1) (3) (5) (6) (9) (10) (10) 
line 21: nearestNeighbour (2)
(1) 
line 22: inorderTraversal
(1) (1) (3) (5) (6) (9) (10) (10) 
line 23: remove (1)
line 24: inorderTraversal
(1) (3) (5) (6) (9) (10) (10) 
line 25: kNearestNeighbour 8 (4)
(1) (3) (5) (6) (9) (10) (10) 
line 26: inorderTraversal
(1) (3) (5) (6) (9) (10) (10) 
line 27: search (3)
TRUE
line 28: inorderTraversal
(1) (3) (5) (6) (9) (10) (10) 
line 29: kNearestNeighbour 4 (6)
(3) (5) (6) (9) 
line 30: inorderTraversal
(1) (3) (5) (6) (9) (10) (10) 
line 31: kNearestNeighbour 10 (3)
(1) (3) (5) (6) (9) (10) (10) 
line 32: inorderTraversal
(1) (3) (5) (6) (9) (10) (10) 
line 33: insert (1)
line 34: inorderTraversal
(1) (1) (3) (5) (6) (9) (10) (10) 
line 35: search (6)
TRUE
line 36: inorderTraversal
(1) (1) (3) (5) (6) (9) (10) (10) 
line 37: kNearestNeighbour 4 (10)
(6) (9) (10) (10) 
line 38: inorderTraversal
(1) (1) (3) (5) (6) (9) (10) (10) 
line 39: clear
line 40: buildTree 5
(2) (2) (9) (1) (9) 
line 41: inorderTraversal
(1) (2) (2) (9) (9) 
line 42: nearestNeighbour (6)
(9) 
line 43: inorderTraversal
(1) (2) (2) (9) (9) 
line 44: insert (5)
line 45: inorderTraversal
(1) (2) (2) (5) (9) (9) 
line 46: remove (3)
line 47: inorderTraversal
(1) (2) (2) (5) (9) (9) 
line 48: insert (4)
line 49: inorderTraversal
(1) (2) (2) (4) (5) (9) (9) 
line 50: remove (9)
line 51: inorderTraversal
(1) (2) (2) (4) (5) (9) 
line 52: nearestNeighbour (9)
(9) 
line 53: inorderTraversal
(1) (2) (2) (4) (5) (9) 
line 54: insert (2)
line 55: inorderTraversal
(1) (2) (2) (2) (4) (5) (9) 
line 56: remove (4)
line 57: inorderTraversal
(1) (2) (2) (2) (5) (9) 
line 58: insert (10)
line 59: inorderTraversal
(1) (2) (2) (2) (5) (9) (10) 
line 60: insert (10)
line 61: inorderTraversal
(1) (2) (2) (2) (5) (9) (10) (10) 
line 62: nearestNeighbour (6)
(5) 
line 63: inorderTraversal
(1) (2) (2) (2) (5) (9) (10) (10) 
line 64: clear
line 65: buildTree 14
(8) (1) (3) (7) (6) (10) (3) (9) (8) (1) (7) (4) (7) (7) 
line 66: inorderTraversal
(1) (1) (3) (3) (4) (6) (7) (7) (7) (7) (8) (8) (9) (10) 
line 67: remove (6)
line 68: inorderTraversal
(1) (1) (3) (3) (4) (7) (7) (7) (7) (8) (8) (9) (10) 
line 69: kNearestNeighbour 8 (9)
(7) (7) (7) (7) (8) (8) (9) (10) 
line 70: inorderTraversal
(1) (1) (3) (3) (4) (7) (7) (7) (7) (8) (8) (9) (10) 
line 71: insert (1)
line 72: inorderTraversal
(1) (1) (1) (3) (3) (4) (7) (7) (7) (7) (8) (8) (9) (10) 
line 73: kNearestNeighbour 1 (1)
(1) 
line 74: inorderTraversal
(1) (1) (1) (3) (3) (4) (7) (7) (7) (7) (8) (8) (9) (10) 
line 75: clear
line 76: buildTree 13
(9) (5) (4) (6) (10) (2) (4) (5) (3) (4) (10) (3) (9) 
line 77: inorderTraversal
(2) (3) (3) (4) (4) (4) (5) (5) (6) (9) (9) (10) (10) 
line 78: postorderTraversal
(2) (3) (4) (4) (4) (3) (6) (5) (9) (10) (10) (9) (5) 
line 79: inorderTraversal
(2) (3) (3) (4) (4) (4) (5) (5) (6) (9) (9) (10) (10) 
line 80: postorderTraversal
(2) (3) (4) (4) (4) (3) (6) (5) (9) (10) (10) (9) (5) 
line 81: inorderTraversal
(2) (3) (3) (4) (4) (4) (5) (5) (6) (9) (9) (10) (10) 
line 82: insert (5)
line 83: inorderTraversal
(2) (3) (3) (4) (4) (4) (5) (5) (5) (6) (9) (9) (10) (10) 
line 84: insert (1)
line 85: inorderTraversal
(1) (2) (3) (3) (4) (4) (4) (5) (5) (5) (6) (9) (9) (10) (10) 
line 86: nearestNeighbour (6)
(6) 
line 87: inorderTraversal
(1) (2) (3) (3) (4) (4) (4) (5) (5) (5) (6) (9) (9) (10) (10) 
line 88: kNearestNeighbour 8 (2)
(1) (2) (3) (3) (4) (4) (4) (5) 
line 89: inorderTraversal
(1) (2) (3) (3) (4) (4) (4) (5) (5) (5) (6) (9) (9) (10) (10) 
line 90: kNearestNeighbour 9 (7)
(4) (5) (5) (5) (6) (9) (9) (10) (10) 
line 91: inorderTraversal
(1) (2) (3) (3) (4) (4) (4) (5) (5) (5) (6) (9) (9) (10) (10) 
line 92: nearestNeighbour (3)
(3) 
line 93: inorderTraversal
(1) (2) (3) (3) (4) (4) (4) (5) (5) (5) (6) (9) (9) (10) (10) 
line 94: insert (3)
line 95: inorderTraversal
(1) (2) (3) (3) (3) (4) (4) (4) (5) (5) (5) (6) (9) (9) (10) (10) 
line 96: clear
line 97: buildTree 6
(8) (4) (5) (7) (4) (1) 
line 98: inorderTraversal
(1) (4) (4) (5) (7) (8) 
line 99: kNearestNeighbour 6 (5)
(1) (4) (4) (5) (7) (8) 
line 100: inorderTraversal
(1) (4) (4) (5) (7) (8) 
line 101: nearestNeighbour (5)
(5) 
line 102: inorderTraversal
(1) (4) (4) (5) (7) (8) 
line 103: search (8)
TRUE
line 104: inorderTraversal
(1) (4) (4) (5) (7) (8) 
line 105: insert (5)
line 106: inorderTraversal
(1) (4) (4) (5) (5) (7) (8) 
line 107: insert (5)
line 108: inorderTraversal
(1) (4) (4) (5) (5) (5) (7) (8) 
line 109: nearestNeighbour (7)
(7) 
line 110: inorderTraversal
(1) (4) (4) (5) (5) (5) (7) (8) 
line 111: insert (8)
line 112: inorderTraversal
(1) (4) (4) (5) (5) (5) (7) (8) (8) 
line 113: clear
line 114: buildTree 3
(4) (1) (8) 
line 115: inorderTraversal
(1) (4) (8) 
line 116: kNearestNeighbour 10 (1)
(1) (4) (8) 
line 117: inorderTraversal
(1) (4) (8) 
line 118: kNearestNeighbour 2 (4)
(1) (4) 
line 119: inorderTraversal
(1) (4) (8) 
line 120: insert (6)
line 121: inorderTraversal
(1) (4) (6) (8) 
line 122: kNearestNeighbour 1 (3)
(4) 
line 123: inorderTraversal
(1) (4) (6) (8) 
line 124: insert (5)
line 125: inorderTraversal
(1) (4) (5) (6) (8) 
line 126: remove (9)
line 127: inorderTraversal
(1) (4) (5) (6) (8) 
line 128: insert (9)
line 129: inorderTraversal
(1) (4) (5) (6) (8) (9) 
line 130: search (6)
TRUE
line 131: inorderTraversal
(1) (4) (5) (6) (8) (9) 
line 132: remove (6)
line 133: inorderTraversal
(1) (4) (5) (8) (9) 
line 134: kNearestNeighbour 1 (5)
(5) 
line 135: inorderTraversal
(1) (4) (5) (8) (9) 
line 136: search (1)
TRUE
line 137: inorderTraversal
(1) (4) (5) (8) (9) 
line 138: kNearestNeighbour 9 (3)
(1) (4) (5) (8) (9) 
line 139: inorderTraversal
(1) (4) (5) (8) (9) 
line 140: nearestNeighbour (4)
(4) 
line 141: inorderTraversal
(1) (4) (5) (8) (9) 
line 142: clear
line 143: buildTree 1
(9) 
line 144: inorderTraversal
(9) 
line 145: remove (9)
line 146: inorderTraversal

line 147: remove (9)
line 148: inorderTraversal

line 149: postorderTraversal

line 150: inorderTraversal

line 151: nearestNeighbour (7)

line 152: inorderTraversal

line 153: insert (8)
line 154: inorderTraversal
(8) 
line 155: insert (2)
line 156: inorderTraversal
(2) (8) 
line 157: kNearestNeighbour 8 (5)
(2) (8) 
line 158: inorderTraversal
(2) (8) 
line 159: postorderTraversal
(2) (8) 
line 160: inorderTraversal
(2) (8) 
line 161: insert (1)
line 162: inorderTraversal
(1) (2) (8) 
line 163: insert (10)
line 164: inorderTraversal
(1) (2) (8) (10) 
line 165: remove (1)
line 166: inorderTraversal
(2) (8) (10) 
line 167: nearestNeighbour (5)
(2) 
line 168: inorderTraversal
(2) (8) (10) 
line 169: insert (7)
line 170: inorderTraversal
(2) (7) (8) (10) 
line 171: insert (9)
line 172: inorderTraversal
(2) (7) (8) (9) (10) 
line 173: kNearestNeighbour 10 (6)
(2) (7) (8) (9) (10) 
line 174: inorderTraversal
(2) (7) (8) (9) (10) 
line 175: insert (7)
line 176: inorderTraversal
(2) (7) (7) (8) (9) (10) 
line 177: insert (2)
line 178: inorderTraversal
(2) (2) (7) (7) (8) (9) (10) 
line 179: remove (4)
line 180: inorderTraversal
(2) (2) (7) (7) (8) (9) (10) 
line 181: insert (2)
line 182: inorderTraversal
(2) (2) (2) (7) (7) (8) (9) (10) 
line 183: insert (5)
line 184: inorderTraversal
(2) (2) (2) (5) (7) (7) (8) (9) (10) 
line 185: insert (9)
line 186: inorderTraversal
(2) (2) (2) (5) (7) (7) (8) (9) (9) (10) 
line 187: nearestNeighbour (10)
(10) 
line 188: inorderTraversal
(2) (2) (2) (5) (7) (7) (8) (9) (9) (10) 
line 189: insert (5)
line 190: inorderTraversal
(2) (2) (2) (5) (5) (7) (7) (8) (9) (9) (10) 
line 191: insert (4)
line 192: inorderTraversal
(2) (2) (2) (4) (5) (5) (7) (7) (8) (9) (9) (10) 
line 193: insert (4)
line 194: inorderTraversal
(2) (2) (2) (4) (4) (5) (5) (7) (7) (8) (9) (9) (10) 
line 195: insert (1)
line 196: inorderTraversal
(1) (2) (2) (2) (4) (4) (5) (5) (7) (7) (8) (9) (9) (10) 
line 197: search (5)
TRUE
line 198: inorderTraversal
(1) (2) (2) (2) (4) (4) (5) (5) (7) (7) (8) (9) (9) (10) 
line 199: kNearestNeighbour 8 (6)
(4) (4) (5) (5) (7) (7) (8) (9) 
line 200: inorderTraversal
(1) (2) (2) (2) (4) (4) (5) (5) (7) (7) (8) (9) (9) (10) 
line 201: clear
line 202: buildTree 10
(8) (1) (7) (2) (3) (3) (7) (5) (10) (5) 
line 203: inorderTraversal
(1) (2) (3) (3) (5) (5) (7) (7) (8) (10) 
line 204: remove (10)
line 205: inorderTraversal
(1) (2) (3) (3) (5) (5) (7) (7) (8) 
line 206: nearestNeighbour (5)
(5) 
line 207: inorderTraversal
(1) (2) (3) (3) (5) (5) (7) (7) (8) 
line 208: insert (8)
line 209: inorderTraversal
(1) (2) (3) (3) (5) (5) (7) (7) (8) (8) 
line 210: kNearestNeighbour 4 (3)
(1) (2) (3) (3) 
line 211: inorderTraversal
(1) (2) (3) (3) (5) (5) (7) (7) (8) (8) 
line 212: postorderTraversal
(1) (3) (3) (2) (5) (7) (8) (8) (7) (5) 
line 213: inorderTraversal
(1) (2) (3) (3) (5) (5) (7) (7) (8) (8) 
line 214: insert (10)
line 215: inorderTraversal
(1) (2) (3) (3) (5) (5) (7) (7) (8) (8) (10) 
line 216: kNearestNeighbour 9 (5)
(2) (3) (3) (5) (5) (7) (7) (8) (8) 
line 217: inorderTraversal
(1) (2) (3) (3) (5) (5) (7) (7) (8) (8) (10) 
line 218: insert (5)
line 219: inorderTraversal
(1) (2) (3) (3) (5) (5) (5) (7) (7) (8) (8) (10) 
line 220: insert (7)
line 221: inorderTraversal
(1) (2) (3) (3) (5) (5) (5) (7) (7) (7) (8) (8) (10) 
line 222: remove (2)
line 223: inorderTraversal
(1) (3) (3) (5) (5) (5) (7) (7) (7) (8) (8) (10) 
line 224: preorderTraversal
(5) (3) (1) (3) (7) (5) (5) (8) (7) (7) (8) (10) 
line 225: inorderTraversal
(1) (3) (3) (5) (5) (5) (7) (7) (7) (8) (8) (10) 
line 226: insert (8)
line 227: inorderTraversal
(1) (3) (3) (5) (5) (5) (7) (7) (7) (8) (8) (8) (10) 
line 228: remove (8)
line 229: inorderTraversal
(1) (3) (3) (5) (5) (5) (7) (7) (7) (8) (8) (10) 
line 230: nearestNeighbour (3)
(3) 
line 231: inorderTraversal
(1) (3) (3) (5) (5) (5) (7) (7) (7) (8) (8) (10) 
line 232: nearestNeighbour (5)
(5) 
line 233: inorderTraversal
(1) (3) (3) (5) (5) (5) (7) (7) (7) (8) (8) (10) 
line 234: clear
line 235: buildTree 12
(6) (4) (7) (2) (1) (9) (9) (9) (8) (1) (9) (7) 
line 236: inorderTraversal
(1) (1) (2) (4) (6) (7) (7) (8) (9) (9) (9) (9) 
line 237: nearestNeighbour (8)
(8) 
line 238: inorderTraversal
(1) (1) (2) (4) (6) (7) (7) (8) (9) (9) (9) (9) 
line 239: nearestNeighbour (1)
(1) 
line 240: inorderTraversal
(1) (1) (2) (4) (6) (7) (7) (8) (9) (9) (9) (9) 
line 241: search (7)
TRUE
line 242: inorderTraversal
(1) (1) (2) (4) (6) (7) (7) (8) (9) (9) (9) (9) 
line 243: nearestNeighbour (3)
(4) 
line 244: inorderTraversal
(1) (1) (2) (4) (6) (7) (7) (8) (9) (9) (9) (9) 
line 245: nearestNeighbour (6)
(6) 
line 246: inorderTraversal
(1) (1) (2) (4) (6) (7) (7) (8) (9) (9) (9) (9) 
line 247: remove (4)
line 248: inorderTraversal
(1) (1) (2) (6) (7) (7) (8) (9) (9) (9) (9) 
line 249: insert (3)
line 250: inorderTraversal
(1) (1) (2) (3) (6) (7) (7) (8) (9) (9) (9) (9) 
line 251: insert (4)
line 252: inorderTraversal
(1) (1) (2) (3) (4) (6) (7) (7) (8) (9) (9) (9) (9) 
line 253: nearestNeighbour (3)
(3) 
line 254: inorderTraversal
(1) (1) (2) (3) (4) (6) (7) (7) (8) (9) (9) (9) (9) 
line 255: insert (2)
line 256: inorderTraversal
(1) (1) (2) (2) (3) (4) (6) (7) (7) (8) (9) (9) (9) (9) 
line 257: insert (6)
line 258: inorderTraversal
(1) (1) (2) (2) (3) (4) (6) (6) (7) (7) (8) (9) (9) (9) (9) 
line 259: clear
line 260: buildTree 11
(7) (7) (6) (9) (1) (3) (6) (10) (3) (1) (8) 
line 261: inorderTraversal
(1) (1) (3) (3) (6) (6) (7) (7) (8) (9) (10) 
line 262: preorderTraversal
(6) (1) (3) (1) (3) (7) (6) (8) (7) (9) (10) 
line 263: inorderTraversal
(1) (1) (3) (3) (6) (6) (7) (7) (8) (9) (10) 
line 264: nearestNeighbour (1)
(1) 
line 265: inorderTraversal
(1) (1) (3) (3) (6) (6) (7) (7) (8) (9) (10) 
line 266: postorderTraversal
(1) (3) (3) (1) (6) (7) (10) (9) (8) (7) (6) 
line 267: inorderTraversal
(1) (1) (3) (3) (6) (6) (7) (7) (8) (9) (10) 
line 268: kNearestNeighbour 3 (5)
(3) (6) (6) 
line 269: inorderTraversal
(1) (1) (3) (3) (6) (6) (7) (7) (8) (9) (10) 
line 270: kNearestNeighbour 9 (8)
(3) (3) (6) (6) (7) (7) (8) (9) (10) 
line 271: inorderTraversal
(1) (1) (3) (3) (6) (6) (7) (7) (8) (9) (10) 
line 272: kNearestNeighbour 7 (2)
(1) (1) (3) (3) (6) (6) (7) 
line 273: inorderTraversal
(1) (1) (3) (3) (6) (6) (7) (7) (8) (9) (10) 
line 274: insert (9)
line 275: inorderTraversal
(1) (1) (3) (3) (6) (6) (7) (7) (8) (9) (9) (10) 
line 276: insert (8)
line 277: inorderTraversal
(1) (1) (3) (3) (6) (6) (7) (7) (8) (8) (9) (9) (10) 
line 278: insert (10)
line 279: inorderTraversal
(1) (1) (3) (3) (6) (6) (7) (7) (8) (8) (9) (9) (10) (10) 
line 280: insert (3)
line 281: inorderTraversal
(1) (1) (3) (3) (3) (6) (6) (7) (7) (8) (8) (9) (9) (10) (10) 
line 282: clear
line 283: buildTree 9
(10) (9) (6) (4) (10) (10) (1) (4) (3) 
line 284: inorderTraversal
(1) (3) (4) (4) (6) (9) (10) (10) (10) 
line 285: kNearestNeighbour 10 (1)
(1) (3) (4) (4) (6) (9) (10) (10) (10) 
line 286: inorderTraversal
(1) (3) (4) (4) (6) (9) (10) (10) (10) 
line 287: insert (4)
line 288: inorderTraversal
(1) (3) (4) (4) (4) (6) (9) (10) (10) (10) 
line 289: kNearestNeighbour 5 (4)
(3) (4) (4) (4) (6) 
line 290: inorderTraversal
(1) (3) (4) (4) (4) (6) (9) (10) (10) (10) 
line 291: kNearestNeighbour 8 (10)
(4) (4) (4) (6) (9) (10) (10) (10) 
line 292: inorderTraversal
(1) (3) (4) (4) (4) (6) (9) (10) (10) (10) 
line 293: insert (4)
line 294: inorderTraversal
(1) (3) (4) (4) (4) (4) (6) (9) (10) (10) (10) 
line 295: nearestNeighbour (3)
(3) 
line 296: inorderTraversal
(1) (3) (4) (4) (4) (4) (6) (9) (10) (10) (10) 
line 297: remove (9)
line 298: inorderTraversal
(1) (3) (4) (4) (4) (4) (6) (10) (10) (10) 
line 299: clear
line 300: buildTree 10
(1) (2) (9) (8) (7) (8) (9) (9) (1) (6) 
line 301: inorderTraversal
(1) (1) (2) (6) (7) (8) (8) (9) (9) (9) 
line 302: kNearestNeighbour 7 (8)
(6) (7) (8) (8) (9) (9) (9) 
line 303: inorderTraversal
(1) (1) (2) (6) (7) (8) (8) (9) (9) (9) 
line 304: nearestNeighbour (6)
(6) 
line 305: inorderTraversal
(1) (1) (2) (6) (7) (8) (8) (9) (9) (9) 
line 306: insert (6)
line 307: inorderTraversal
(1) (1) (2) (6) (6) (7) (8) (8) (9) (9) (9) 
line 308: nodeCount_height_leafCount
nodeCount=11;height=5;leafCount=4
line 309: inorderTraversal
(1) (1) (2) (6) (6) (7) (8) (8) (9) (9) (9) 
line 310: kNearestNeighbour 4 (6)
(6) (6) (7) (8) 
line 311: inorderTraversal
(1) (1) (2) (6) (6) (7) (8) (8) (9) (9) (9) 
line 312: kNearestNeighbour 3 (5)
(6) (6) (7) 
line 313: inorderTraversal
(1) (1) (2) (6) (6) (7) (8) (8) (9) (9) (9) 
line 314: kNearestNeighbour 2 (7)
(7) (8) 
line 315: inorderTraversal
(1) (1) (2) (6) (6) (7) (8) (8) (9) (9) (9) 
line 316: clear
line 317: buildTree 2
(7) (10) 
line 318: inorderTraversal
(7) (10) 
line 319: kNearestNeighbour 4 (4)
(7) (10) 
line 320: inorderTraversal
(7) (10) 
line 321: insert (7)
line 322: inorderTraversal
(7) (7) (10) 
line 323: remove (10)
line 324: inorderTraversal
(7) (7) 
line 325: insert (2)
line 326: inorderTraversal
(2) (7) (7) 
line 327: postorderTraversal
(2) (7) (7) 
line 328: inorderTraversal
(2) (7) (7) 
line 329: nodeCount_height_leafCount
nodeCount=3;height=2;leafCount=2
line 330: inorderTraversal
(2) (7) (7) 
line 331: insert (1)
line 332: inorderTraversal
(1) (2) (7) (7) 
line 333: insert (1)
line 334: inorderTraversal
(1) (1) (2) (7) (7) 
line 335: kNearestNeighbour 7 (3)
(1) (1) (2) (7) (7) 
line 336: inorderTraversal
(1) (1) (2) (7) (7) 
line 337: insert (4)
line 338: inorderTraversal
(1) (1) (2) (4) (7) (7) 
line 339: nearestNeighbour (1)
(1) 
line 340: inorderTraversal
(1) (1) (2) (4) (7) (7) 
line 341: kNearestNeighbour 3 (1)
(1) (1) (2) 
line 342: inorderTraversal
(1) (1) (2) (4) (7) (7) 
line 343: insert (5)
line 344: inorderTraversal
(1) (1) (2) (4) (5) (7) (7) 
line 345: insert (9)
line 346: inorderTraversal
(1) (1) (2) (4) (5) (7) (7) (9) 
line 347: nearestNeighbour (3)
(4) 
line 348: inorderTraversal
(1) (1) (2) (4) (5) (7) (7) (9) 
line 349: search (6)
FALSE
line 350: inorderTraversal
(1) (1) (2) (4) (5) (7) (7) (9) 
line 351: nearestNeighbour (9)
(9) 
line 352: inorderTraversal
(1) (1) (2) (4) (5) (7) (7) (9) 
line 353: remove (7)
line 354: inorderTraversal
(1) (1) (2) (4) (5) (7) (9) 
line 355: insert (3)
line 356: inorderTraversal
(1) (1) (2) (3) (4) (5) (7) (9) 
line 357: nearestNeighbour (8)
(9) 
line 358: inorderTraversal
(1) (1) (2) (3) (4) (5) (7) (9) 
line 359: kNearestNeighbour 10 (5)
(1) (1) (2) (3) (4) (5) (7) (9) 
line 360: inorderTraversal
(1) (1) (2) (3) (4) (5) (7) (9) 
line 361: kNearestNeighbour 6 (3)
(1) (1) (2) (3) (4) (5) 
line 362: inorderTraversal
(1) (1) (2) (3) (4) (5) (7) (9) 
line 363: nearestNeighbour (9)
(9) 
line 364: inorderTraversal
(1) (1) (2) (3) (4) (5) (7) (9) 
line 365: insert (3)
line 366: inorderTraversal
(1) (1) (2) (3) (3) (4) (5) (7) (9) 
line 367: insert (5)
line 368: inorderTraversal
(1) (1) (2) (3) (3) (4) (5) (5) (7) (9) 
line 369: insert (6)
line 370: inorderTraversal
(1) (1) (2) (3) (3) (4) (5) (5) (6) (7) (9) 
line 371: clear
line 372: buildTree 1
(10) 
line 373: inorderTraversal
(10) 
line 374: insert (5)
line 375: inorderTraversal
(5) (10) 
line 376: clear
line 377: buildTree 13
(9) (2) (10) (4) (1) (9) (7) (6) (10) (4) (4) (9) (9) 
line 378: inorderTraversal
(1) (2) (4) (4) (4) (6) (7) (9) (9) (9) (9) (10) (10) 
line 379: nearestNeighbour (6)
(6) 
line 380: inorderTraversal
(1) (2) (4) (4) (4) (6) (7) (9) (9) (9) (9) (10) (10) 
line 381: insert (3)
line 382: inorderTraversal
(1) (2) (3) (4) (4) (4) (6) (7) (9) (9) (9) (9) (10) (10) 
line 383: insert (6)
line 384: inorderTraversal
(1) (2) (3) (4) (4) (4) (6) (6) (7) (9) (9) (9) (9) (10) (10) 
line 385: remove (1)
line 386: inorderTraversal
(2) (3) (4) (4) (4) (6) (6) (7) (9) (9) (9) (9) (10) (10) 
line 387: kNearestNeighbour 9 (7)
(6) (6) (7) (9) (9) (9) (9) (10) (10) 
line 388: inorderTraversal
(2) (3) (4) (4) (4) (6) (6) (7) (9) (9) (9) (9) (10) (10) 
line 389: insert (10)
line 390: inorderTraversal
(2) (3) (4) (4) (4) (6) (6) (7) (9) (9) (9) (9) (10) (10) (10) 
line 391: remove (6)
line 392: inorderTraversal
(2) (3) (4) (4) (4) (6) (7) (9) (9) (9) (9) (10) (10) (10) 
line 393: insert (3)
line 394: inorderTraversal
(2) (3) (3) (4) (4) (4) (6) (7) (9) (9) (9) (9) (10) (10) (10) 
line 395: kNearestNeighbour 10 (7)
(4) (6) (7) (9) (9) (9) (9) (10) (10) (10) 
line 396: inorderTraversal
(2) (3) (3) (4) (4) (4) (6) (7) (9) (9) (9) (9) (10) (10) (10) 
line 397: kNearestNeighbour 8 (1)
(2) (3) (3) (4) (4) (4) (6) (7) 
line 398: inorderTraversal
(2) (3) (3) (4) (4) (4) (6) (7) (9) (9) (9) (9) (10) (10) (10) 
line 399: remove (10)
line 400: inorderTraversal
(2) (3) (3) (4) (4) (4) (6) (7) (9) (9) (9) (9) (10) (10) 
line 401: nearestNeighbour (2)
(2) 
line 402: inorderTraversal
(2) (3) (3) (4) (4) (4) (6) (7) (9) (9) (9) (9) (10) (10) 
line 403: kNearestNeighbour 7 (5)
(3) (3) (4) (4) (4) (6) (7) 
line 404: inorderTraversal
(2) (3) (3) (4) (4) (4) (6) (7) (9) (9) (9) (9) (10) (10) 
line 405: remove (3)
line 406: inorderTraversal
(2) (3) (4) (4) (4) (6) (7) (9) (9) (9) (9) (10) (10) 
line 407: remove (6)
line 408: inorderTraversal
(2) (3) (4) (4) (4) (7) (9) (9) (9) (9) (10) (10) 
line 409: preorderTraversal
(7) (4) (2) (3) (4) (4) (9) (9) (9) (10) (9) (10) 
line 410: inorderTraversal
(2) (3) (4) (4) (4) (7) (9) (9) (9) (9) (10) (10) 
line 411: kNearestNeighbour 6 (4)
(2) (3) (4) (4) (4) (7) 
line 412: inorderTraversal
(2) (3) (4) (4) (4) (7) (9) (9) (9) (9) (10) (10) 
line 413: search (9)
TRUE
line 414: inorderTraversal
(2) (3) (4) (4) (4) (7) (9) (9) (9) (9) (10) (10) 
line 415: insert (6)
line 416: inorderTraversal
(2) (3) (4) (4) (4) (6) (7) (9) (9) (9) (9) (10) (10) 
line 417: nodeCount_height_leafCount
nodeCount=13;height=6;leafCount=4
line 418: inorderTraversal
(2) (3) (4) (4) (4) (6) (7) (9) (9) (9) (9) (10) (10) 
line 419: preorderTraversal
(7) (4) (2) (3) (4) (4) (6) (9) (9) (9) (10) (9) (10) 
line 420: postorderTraversal
(3) (2) (6) (4) (4) (4) (9) (10) (10) (9) (9) (9) (7) 
line 421: clear
