line 1: k=1
line 2: insert (7)
line 3: inorderTraversal
(7) 
line 4: insert (3)
line 5: inorderTraversal
(3) (7) 
line 6: clear
line 7: buildTree 3
(1) (4) (9) 
line 8: inorderTraversal
(1) (4) (9) 
line 9: search (1)
TRUE
line 10: inorderTraversal
(1) (4) (9) 
line 11: nearestNeighbour (3)
(4) 
line 12: inorderTraversal
(1) (4) (9) 
line 13: clear
line 14: buildTree 4
(8) (4) (2) (8) 
line 15: inorderTraversal
(2) (4) (8) (8) 
line 16: insert (5)
line 17: inorderTraversal
(2) (4) (5) (8) (8) 
line 18: kNearestNeighbour 9 (1)
(2) (4) (5) (8) (8) 
line 19: inorderTraversal
(2) (4) (5) (8) (8) 
line 20: insert (5)
line 21: inorderTraversal
(2) (4) (5) (5) (8) (8) 
line 22: insert (7)
line 23: inorderTraversal
(2) (4) (5) (5) (7) (8) (8) 
line 24: preorderTraversal
(4) (2) (8) (5) (5) (7) (8) 
line 25: inorderTraversal
(2) (4) (5) (5) (7) (8) (8) 
line 26: kNearestNeighbour 9 (9)
(2) (4) (5) (5) (7) (8) (8) 
line 27: inorderTraversal
(2) (4) (5) (5) (7) (8) (8) 
line 28: clear
line 29: buildTree 2
(4) (8) 
line 30: inorderTraversal
(4) (8) 
line 31: remove (8)
line 32: inorderTraversal
(4) 
line 33: nearestNeighbour (7)
(4) 
line 34: inorderTraversal
(4) 
line 35: clear
line 36: buildTree 6
(4) (3) (5) (2) (7) (1) 
line 37: inorderTraversal
(1) (2) (3) (4) (5) (7) 
line 38: remove (4)
line 39: inorderTraversal
(1) (2) (3) (5) (7) 
line 40: clear
line 41: buildTree 13
(9) (6) (7) (6) (5) (3) (4) (7) (3) (7) (5) (5) (2) 
line 42: inorderTraversal
(2) (3) (3) (4) (5) (5) (5) (6) (6) (7) (7) (7) (9) 
line 43: insert (2)
line 44: inorderTraversal
(2) (2) (3) (3) (4) (5) (5) (5) (6) (6) (7) (7) (7) (9) 
line 45: nodeCount_height_leafCount
nodeCount=14;height=6;leafCount=5
line 46: inorderTraversal
(2) (2) (3) (3) (4) (5) (5) (5) (6) (6) (7) (7) (7) (9) 
line 47: nodeCount_height_leafCount
nodeCount=14;height=6;leafCount=5
line 48: inorderTraversal
(2) (2) (3) (3) (4) (5) (5) (5) (6) (6) (7) (7) (7) (9) 
line 49: insert (5)
line 50: inorderTraversal
(2) (2) (3) (3) (4) (5) (5) (5) (5) (6) (6) (7) (7) (7) (9) 
line 51: insert (8)
line 52: inorderTraversal
(2) (2) (3) (3) (4) (5) (5) (5) (5) (6) (6) (7) (7) (7) (8) (9) 
line 53: remove (3)
line 54: inorderTraversal
(2) (2) (3) (4) (5) (5) (5) (5) (6) (6) (7) (7) (7) (8) (9) 
line 55: clear
line 56: buildTree 6
(4) (2) (7) (10) (8) (7) 
line 57: inorderTraversal
(2) (4) (7) (7) (8) (10) 
line 58: nearestNeighbour (8)
(8) 
line 59: inorderTraversal
(2) (4) (7) (7) (8) (10) 
line 60: kNearestNeighbour 7 (3)
(2) (4) (7) (7) (8) (10) 
line 61: inorderTraversal
(2) (4) (7) (7) (8) (10) 
line 62: search (7)
TRUE
line 63: inorderTraversal
(2) (4) (7) (7) (8) (10) 
line 64: nearestNeighbour (3)
(4) 
line 65: inorderTraversal
(2) (4) (7) (7) (8) (10) 
line 66: nearestNeighbour (1)
(2) 
line 67: inorderTraversal
(2) (4) (7) (7) (8) (10) 
line 68: kNearestNeighbour 4 (5)
(2) (4) (7) (7) 
line 69: inorderTraversal
(2) (4) (7) (7) (8) (10) 
line 70: kNearestNeighbour 1 (9)
(10) 
line 71: inorderTraversal
(2) (4) (7) (7) (8) (10) 
line 72: kNearestNeighbour 6 (4)
(2) (4) (7) (7) (8) (10) 
line 73: inorderTraversal
(2) (4) (7) (7) (8) (10) 
line 74: insert (2)
line 75: inorderTraversal
(2) (2) (4) (7) (7) (8) (10) 
line 76: nearestNeighbour (3)
(2) 
line 77: inorderTraversal
(2) (2) (4) (7) (7) (8) (10) 
line 78: insert (4)
line 79: inorderTraversal
(2) (2) (4) (4) (7) (7) (8) (10) 
line 80: insert (1)
line 81: inorderTraversal
(1) (2) (2) (4) (4) (7) (7) (8) (10) 
line 82: remove (8)
line 83: inorderTraversal
(1) (2) (2) (4) (4) (7) (7) (10) 
line 84: kNearestNeighbour 1 (3)
(2) 
line 85: inorderTraversal
(1) (2) (2) (4) (4) (7) (7) (10) 
line 86: kNearestNeighbour 5 (8)
(4) (4) (7) (7) (10) 
line 87: inorderTraversal
(1) (2) (2) (4) (4) (7) (7) (10) 
line 88: kNearestNeighbour 7 (1)
(1) (2) (2) (4) (4) (7) (7) 
line 89: inorderTraversal
(1) (2) (2) (4) (4) (7) (7) (10) 
line 90: insert (3)
line 91: inorderTraversal
(1) (2) (2) (3) (4) (4) (7) (7) (10) 
line 92: kNearestNeighbour 9 (2)
(1) (2) (2) (3) (4) (4) (7) (7) (10) 
line 93: inorderTraversal
(1) (2) (2) (3) (4) (4) (7) (7) (10) 
line 94: kNearestNeighbour 6 (7)
(3) (4) (4) (7) (7) (10) 
line 95: inorderTraversal
(1) (2) (2) (3) (4) (4) (7) (7) (10) 
line 96: clear
line 97: buildTree 13
(1) (1) (5) (7) (3) (5) (5) (3) (8) (5) (10) (4) (6) 
line 98: inorderTraversal
(1) (1) (3) (3) (4) (5) (5) (5) (5) (6) (7) (8) (10) 
line 99: insert (3)
line 100: inorderTraversal
(1) (1) (3) (3) (3) (4) (5) (5) (5) (5) (6) (7) (8) (10) 
line 101: clear
line 102: buildTree 11
(9) (10) (5) (2) (9) (6) (3) (2) (2) (6) (6) 
line 103: inorderTraversal
(2) (2) (2) (3) (5) (6) (6) (6) (9) (9) (10) 
line 104: search (3)
TRUE
line 105: inorderTraversal
(2) (2) (2) (3) (5) (6) (6) (6) (9) (9) (10) 
line 106: nearestNeighbour (9)
(9) 
line 107: inorderTraversal
(2) (2) (2) (3) (5) (6) (6) (6) (9) (9) (10) 
line 108: kNearestNeighbour 9 (6)
(2) (3) (5) (6) (6) (6) (9) (9) (10) 
line 109: inorderTraversal
(2) (2) (2) (3) (5) (6) (6) (6) (9) (9) (10) 
line 110: kNearestNeighbour 1 (2)
(2) 
line 111: inorderTraversal
(2) (2) (2) (3) (5) (6) (6) (6) (9) (9) (10) 
line 112: kNearestNeighbour 3 (7)
(6) (6) (6) 
line 113: inorderTraversal
(2) (2) (2) (3) (5) (6) (6) (6) (9) (9) (10) 
line 114: kNearestNeighbour 10 (7)
(2) (2) (3) (5) (6) (6) (6) (9) (9) (10) 
line 115: inorderTraversal
(2) (2) (2) (3) (5) (6) (6) (6) (9) (9) (10) 
line 116: preorderTraversal
(6) (2) (2) (3) (2) (5) (9) (6) (6) (9) (10) 
line 117: inorderTraversal
(2) (2) (2) (3) (5) (6) (6) (6) (9) (9) (10) 
line 118: insert (3)
line 119: inorderTraversal
(2) (2) (2) (3) (3) (5) (6) (6) (6) (9) (9) (10) 
line 120: insert (10)
line 121: inorderTraversal
(2) (2) (2) (3) (3) (5) (6) (6) (6) (9) (9) (10) (10) 
line 122: clear
line 123: buildTree 7
(2) (5) (7) (5) (6) (1) (3) 
line 124: inorderTraversal
(1) (2) (3) (5) (5) (6) (7) 
line 125: insert (10)
line 126: inorderTraversal
(1) (2) (3) (5) (5) (6) (7) (10) 
line 127: nearestNeighbour (2)
(2) 
line 128: inorderTraversal
(1) (2) (3) (5) (5) (6) (7) (10) 
line 129: clear
line 130: buildTree 8
(9) (4) (7) (4) (4) (3) (5) (3) 
line 131: inorderTraversal
(3) (3) (4) (4) (4) (5) (7) (9) 
line 132: insert (2)
line 133: inorderTraversal
(2) (3) (3) (4) (4) (4) (5) (7) (9) 
line 134: kNearestNeighbour 3 (3)
(2) (3) (3) 
line 135: inorderTraversal
(2) (3) (3) (4) (4) (4) (5) (7) (9) 
line 136: nearestNeighbour (3)
(3) 
line 137: inorderTraversal
(2) (3) (3) (4) (4) (4) (5) (7) (9) 
line 138: kNearestNeighbour 10 (9)
(2) (3) (3) (4) (4) (4) (5) (7) (9) 
line 139: inorderTraversal
(2) (3) (3) (4) (4) (4) (5) (7) (9) 
line 140: nearestNeighbour (10)
(9) 
line 141: inorderTraversal
(2) (3) (3) (4) (4) (4) (5) (7) (9) 
line 142: nearestNeighbour (3)
(3) 
line 143: inorderTraversal
(2) (3) (3) (4) (4) (4) (5) (7) (9) 
line 144: remove (7)
line 145: inorderTraversal
(2) (3) (3) (4) (4) (4) (5) (9) 
line 146: nearestNeighbour (7)
(9) 
line 147: inorderTraversal
(2) (3) (3) (4) (4) (4) (5) (9) 
line 148: nodeCount_height_leafCount
nodeCount=8;height=4;leafCount=4
line 149: inorderTraversal
(2) (3) (3) (4) (4) (4) (5) (9) 
line 150: insert (1)
line 151: inorderTraversal
(1) (2) (3) (3) (4) (4) (4) (5) (9) 
line 152: search (9)
TRUE
line 153: inorderTraversal
(1) (2) (3) (3) (4) (4) (4) (5) (9) 
line 154: insert (4)
line 155: inorderTraversal
(1) (2) (3) (3) (4) (4) (4) (4) (5) (9) 
line 156: search (10)
FALSE
line 157: inorderTraversal
(1) (2) (3) (3) (4) (4) (4) (4) (5) (9) 
line 158: insert (8)
line 159: inorderTraversal
(1) (2) (3) (3) (4) (4) (4) (4) (5) (8) (9) 
line 160: kNearestNeighbour 8 (7)
(3) (4) (4) (4) (4) (5) (8) (9) 
line 161: inorderTraversal
(1) (2) (3) (3) (4) (4) (4) (4) (5) (8) (9) 
line 162: nearestNeighbour (2)
(2) 
line 163: inorderTraversal
(1) (2) (3) (3) (4) (4) (4) (4) (5) (8) (9) 
line 164: insert (3)
line 165: inorderTraversal
(1) (2) (3) (3) (3) (4) (4) (4) (4) (5) (8) (9) 
line 166: nearestNeighbour (4)
(4) 
line 167: inorderTraversal
(1) (2) (3) (3) (3) (4) (4) (4) (4) (5) (8) (9) 
line 168: remove (8)
line 169: inorderTraversal
(1) (2) (3) (3) (3) (4) (4) (4) (4) (5) (9) 
line 170: insert (2)
line 171: inorderTraversal
(1) (2) (2) (3) (3) (3) (4) (4) (4) (4) (5) (9) 
line 172: insert (10)
line 173: inorderTraversal
(1) (2) (2) (3) (3) (3) (4) (4) (4) (4) (5) (9) (10) 
line 174: insert (4)
line 175: inorderTraversal
(1) (2) (2) (3) (3) (3) (4) (4) (4) (4) (4) (5) (9) (10) 
line 176: insert (10)
line 177: inorderTraversal
(1) (2) (2) (3) (3) (3) (4) (4) (4) (4) (4) (5) (9) (10) (10) 
line 178: postorderTraversal
(1) (2) (2) (3) (3) (3) (4) (4) (4) (4) (10) (10) (9) (5) (4) 
line 179: inorderTraversal
(1) (2) (2) (3) (3) (3) (4) (4) (4) (4) (4) (5) (9) (10) (10) 
line 180: clear
line 181: buildTree 3
(8) (4) (10) 
line 182: inorderTraversal
(4) (8) (10) 
line 183: insert (7)
line 184: inorderTraversal
(4) (7) (8) (10) 
line 185: nearestNeighbour (7)
(7) 
line 186: inorderTraversal
(4) (7) (8) (10) 
line 187: preorderTraversal
(8) (4) (7) (10) 
line 188: inorderTraversal
(4) (7) (8) (10) 
line 189: search (8)
TRUE
line 190: inorderTraversal
(4) (7) (8) (10) 
line 191: kNearestNeighbour 8 (4)
(4) (7) (8) (10) 
line 192: inorderTraversal
(4) (7) (8) (10) 
line 193: postorderTraversal
(7) (4) (10) (8) 
line 194: inorderTraversal
(4) (7) (8) (10) 
line 195: nearestNeighbour (10)
(10) 
line 196: inorderTraversal
(4) (7) (8) (10) 
line 197: nearestNeighbour (3)
(4) 
line 198: inorderTraversal
(4) (7) (8) (10) 
line 199: insert (5)
line 200: inorderTraversal
(4) (5) (7) (8) (10) 
line 201: kNearestNeighbour 2 (8)
(7) (8) 
line 202: inorderTraversal
(4) (5) (7) (8) (10) 
line 203: clear
line 204: buildTree 5
(10) (1) (3) (1) (9) 
line 205: inorderTraversal
(1) (1) (3) (9) (10) 
line 206: insert (10)
line 207: inorderTraversal
(1) (1) (3) (9) (10) (10) 
line 208: remove (9)
line 209: inorderTraversal
(1) (1) (3) (10) (10) 
line 210: insert (2)
line 211: inorderTraversal
(1) (1) (2) (3) (10) (10) 
line 212: kNearestNeighbour 7 (5)
(1) (1) (2) (3) (10) (10) 
line 213: inorderTraversal
(1) (1) (2) (3) (10) (10) 
line 214: nearestNeighbour (1)
(1) 
line 215: inorderTraversal
(1) (1) (2) (3) (10) (10) 
line 216: insert (3)
line 217: inorderTraversal
(1) (1) (2) (3) (3) (10) (10) 
line 218: insert (7)
line 219: inorderTraversal
(1) (1) (2) (3) (3) (7) (10) (10) 
line 220: kNearestNeighbour 2 (8)
(7) (10) 
line 221: inorderTraversal
(1) (1) (2) (3) (3) (7) (10) (10) 
line 222: remove (4)
line 223: inorderTraversal
(1) (1) (2) (3) (3) (7) (10) (10) 
line 224: remove (1)
line 225: inorderTraversal
(1) (2) (3) (3) (7) (10) (10) 
line 226: insert (4)
line 227: inorderTraversal
(1) (2) (3) (3) (4) (7) (10) (10) 
line 228: nearestNeighbour (8)
(7) 
line 229: inorderTraversal
(1) (2) (3) (3) (4) (7) (10) (10) 
line 230: clear
line 231: buildTree 1
(2) 
line 232: inorderTraversal
(2) 
line 233: kNearestNeighbour 9 (10)
(2) 
line 234: inorderTraversal
(2) 
line 235: postorderTraversal
(2) 
line 236: inorderTraversal
(2) 
line 237: kNearestNeighbour 2 (4)
(2) 
line 238: inorderTraversal
(2) 
line 239: remove (2)
line 240: inorderTraversal

line 241: kNearestNeighbour 8 (4)

line 242: inorderTraversal

line 243: insert (3)
line 244: inorderTraversal
(3) 
line 245: insert (9)
line 246: inorderTraversal
(3) (9) 
line 247: insert (8)
line 248: inorderTraversal
(3) (8) (9) 
line 249: nearestNeighbour (6)
(8) 
line 250: inorderTraversal
(3) (8) (9) 
line 251: preorderTraversal
(3) (9) (8) 
line 252: inorderTraversal
(3) (8) (9) 
line 253: kNearestNeighbour 6 (4)
(3) (8) (9) 
line 254: inorderTraversal
(3) (8) (9) 
line 255: postorderTraversal
(8) (9) (3) 
line 256: inorderTraversal
(3) (8) (9) 
line 257: insert (4)
line 258: inorderTraversal
(3) (4) (8) (9) 
line 259: nearestNeighbour (7)
(8) 
line 260: inorderTraversal
(3) (4) (8) (9) 
line 261: nearestNeighbour (1)
(3) 
line 262: inorderTraversal
(3) (4) (8) (9) 
line 263: insert (2)
line 264: inorderTraversal
(2) (3) (4) (8) (9) 
line 265: insert (2)
line 266: inorderTraversal
(2) (2) (3) (4) (8) (9) 
line 267: nearestNeighbour (5)
(4) 
line 268: inorderTraversal
(2) (2) (3) (4) (8) (9) 
line 269: insert (10)
line 270: inorderTraversal
(2) (2) (3) (4) (8) (9) (10) 
line 271: remove (2)
line 272: inorderTraversal
(2) (3) (4) (8) (9) (10) 
line 273: kNearestNeighbour 9 (10)
(2) (3) (4) (8) (9) (10) 
line 274: inorderTraversal
(2) (3) (4) (8) (9) (10) 
line 275: kNearestNeighbour 1 (5)
(4) 
line 276: inorderTraversal
(2) (3) (4) (8) (9) (10) 
line 277: insert (7)
line 278: inorderTraversal
(2) (3) (4) (7) (8) (9) (10) 
line 279: insert (6)
line 280: inorderTraversal
(2) (3) (4) (6) (7) (8) (9) (10) 
line 281: nearestNeighbour (4)
(4) 
line 282: inorderTraversal
(2) (3) (4) (6) (7) (8) (9) (10) 
line 283: insert (5)
line 284: inorderTraversal
(2) (3) (4) (5) (6) (7) (8) (9) (10) 
line 285: insert (5)
line 286: inorderTraversal
(2) (3) (4) (5) (5) (6) (7) (8) (9) (10) 
line 287: insert (10)
line 288: inorderTraversal
(2) (3) (4) (5) (5) (6) (7) (8) (9) (10) (10) 
line 289: insert (5)
line 290: inorderTraversal
(2) (3) (4) (5) (5) (5) (6) (7) (8) (9) (10) (10) 
line 291: insert (8)
line 292: inorderTraversal
(2) (3) (4) (5) (5) (5) (6) (7) (8) (8) (9) (10) (10) 
line 293: insert (7)
line 294: inorderTraversal
(2) (3) (4) (5) (5) (5) (6) (7) (7) (8) (8) (9) (10) (10) 
line 295: clear
line 296: buildTree 3
(4) (10) (2) 
line 297: inorderTraversal
(2) (4) (10) 
line 298: insert (5)
line 299: inorderTraversal
(2) (4) (5) (10) 
line 300: insert (3)
line 301: inorderTraversal
(2) (3) (4) (5) (10) 
line 302: nearestNeighbour (7)
(5) 
line 303: inorderTraversal
(2) (3) (4) (5) (10) 
line 304: insert (7)
line 305: inorderTraversal
(2) (3) (4) (5) (7) (10) 
line 306: search (5)
TRUE
line 307: inorderTraversal
(2) (3) (4) (5) (7) (10) 
line 308: insert (10)
line 309: inorderTraversal
(2) (3) (4) (5) (7) (10) (10) 
line 310: kNearestNeighbour 4 (8)
(5) (7) (10) (10) 
line 311: inorderTraversal
(2) (3) (4) (5) (7) (10) (10) 
line 312: insert (5)
line 313: inorderTraversal
(2) (3) (4) (5) (5) (7) (10) (10) 
line 314: nearestNeighbour (10)
(10) 
line 315: inorderTraversal
(2) (3) (4) (5) (5) (7) (10) (10) 
line 316: kNearestNeighbour 2 (2)
(2) (3) 
line 317: inorderTraversal
(2) (3) (4) (5) (5) (7) (10) (10) 
line 318: kNearestNeighbour 10 (7)
(2) (3) (4) (5) (5) (7) (10) (10) 
line 319: inorderTraversal
(2) (3) (4) (5) (5) (7) (10) (10) 
line 320: insert (10)
line 321: inorderTraversal
(2) (3) (4) (5) (5) (7) (10) (10) (10) 
line 322: insert (4)
line 323: inorderTraversal
(2) (3) (4) (4) (5) (5) (7) (10) (10) (10) 
line 324: clear
line 325: buildTree 17
(1) (5) (2) (4) (7) (4) (6) (7) (2) (5) (5) (7) (6) (8) (5) (3) (8) 
line 326: inorderTraversal
(1) (2) (2) (3) (4) (4) (5) (5) (5) (5) (6) (6) (7) (7) (7) (8) (8) 
line 327: insert (7)
line 328: inorderTraversal
(1) (2) (2) (3) (4) (4) (5) (5) (5) (5) (6) (6) (7) (7) (7) (7) (8) (8) 
line 329: kNearestNeighbour 1 (3)
(3) 
line 330: inorderTraversal
(1) (2) (2) (3) (4) (4) (5) (5) (5) (5) (6) (6) (7) (7) (7) (7) (8) (8) 
line 331: nearestNeighbour (8)
(8) 
line 332: inorderTraversal
(1) (2) (2) (3) (4) (4) (5) (5) (5) (5) (6) (6) (7) (7) (7) (7) (8) (8) 
line 333: remove (1)
line 334: inorderTraversal
(2) (2) (3) (4) (4) (5) (5) (5) (5) (6) (6) (7) (7) (7) (7) (8) (8) 
line 335: kNearestNeighbour 3 (10)
(7) (8) (8) 
line 336: inorderTraversal
(2) (2) (3) (4) (4) (5) (5) (5) (5) (6) (6) (7) (7) (7) (7) (8) (8) 
line 337: insert (4)
line 338: inorderTraversal
(2) (2) (3) (4) (4) (4) (5) (5) (5) (5) (6) (6) (7) (7) (7) (7) (8) (8) 
line 339: insert (2)
line 340: inorderTraversal
(2) (2) (2) (3) (4) (4) (4) (5) (5) (5) (5) (6) (6) (7) (7) (7) (7) (8) (8) 
line 341: clear
line 342: buildTree 9
(9) (6) (6) (9) (5) (8) (3) (3) (8) 
line 343: inorderTraversal
(3) (3) (5) (6) (6) (8) (8) (9) (9) 
line 344: kNearestNeighbour 5 (4)
(3) (3) (5) (6) (6) 
line 345: inorderTraversal
(3) (3) (5) (6) (6) (8) (8) (9) (9) 
line 346: insert (2)
line 347: inorderTraversal
(2) (3) (3) (5) (6) (6) (8) (8) (9) (9) 
line 348: remove (6)
line 349: inorderTraversal
(2) (3) (3) (5) (6) (8) (8) (9) (9) 
line 350: clear
line 351: buildTree 6
(6) (7) (5) (9) (8) (6) 
line 352: inorderTraversal
(5) (6) (6) (7) (8) (9) 
line 353: nearestNeighbour (5)
(5) 
line 354: inorderTraversal
(5) (6) (6) (7) (8) (9) 
line 355: insert (7)
line 356: inorderTraversal
(5) (6) (6) (7) (7) (8) (9) 
line 357: insert (6)
line 358: inorderTraversal
(5) (6) (6) (6) (7) (7) (8) (9) 
line 359: preorderTraversal
(6) (5) (7) (6) (6) (8) (7) (9) 
line 360: inorderTraversal
(5) (6) (6) (6) (7) (7) (8) (9) 
line 361: insert (6)
line 362: inorderTraversal
(5) (6) (6) (6) (6) (7) (7) (8) (9) 
line 363: nearestNeighbour (5)
(5) 
line 364: inorderTraversal
(5) (6) (6) (6) (6) (7) (7) (8) (9) 
line 365: nearestNeighbour (5)
(5) 
line 366: inorderTraversal
(5) (6) (6) (6) (6) (7) (7) (8) (9) 
line 367: insert (8)
line 368: inorderTraversal
(5) (6) (6) (6) (6) (7) (7) (8) (8) (9) 
line 369: insert (2)
line 370: inorderTraversal
(2) (5) (6) (6) (6) (6) (7) (7) (8) (8) (9) 
line 371: insert (2)
line 372: inorderTraversal
(2) (2) (5) (6) (6) (6) (6) (7) (7) (8) (8) (9) 
line 373: search (5)
TRUE
line 374: inorderTraversal
(2) (2) (5) (6) (6) (6) (6) (7) (7) (8) (8) (9) 
line 375: kNearestNeighbour 4 (7)
(7) (7) (8) (8) 
line 376: inorderTraversal
(2) (2) (5) (6) (6) (6) (6) (7) (7) (8) (8) (9) 
line 377: clear
line 378: buildTree 12
(7) (1) (2) (9) (10) (7) (4) (9) (5) (10) (8) (10) 
line 379: inorderTraversal
(1) (2) (4) (5) (7) (7) (8) (9) (9) (10) (10) (10) 
line 380: insert (3)
line 381: inorderTraversal
(1) (2) (3) (4) (5) (7) (7) (8) (9) (9) (10) (10) (10) 
line 382: kNearestNeighbour 6 (2)
(1) (2) (3) (4) (5) (7) 
line 383: inorderTraversal
(1) (2) (3) (4) (5) (7) (7) (8) (9) (9) (10) (10) (10) 
line 384: insert (1)
line 385: inorderTraversal
(1) (1) (2) (3) (4) (5) (7) (7) (8) (9) (9) (10) (10) (10) 
line 386: insert (4)
line 387: inorderTraversal
(1) (1) (2) (3) (4) (4) (5) (7) (7) (8) (9) (9) (10) (10) (10) 
line 388: remove (10)
line 389: inorderTraversal
(1) (1) (2) (3) (4) (4) (5) (7) (7) (8) (9) (9) (10) (10) 
line 390: insert (2)
line 391: inorderTraversal
(1) (1) (2) (2) (3) (4) (4) (5) (7) (7) (8) (9) (9) (10) (10) 
line 392: insert (6)
line 393: inorderTraversal
(1) (1) (2) (2) (3) (4) (4) (5) (6) (7) (7) (8) (9) (9) (10) (10) 
line 394: nodeCount_height_leafCount
nodeCount=16;height=5;leafCount=7
line 395: inorderTraversal
(1) (1) (2) (2) (3) (4) (4) (5) (6) (7) (7) (8) (9) (9) (10) (10) 
line 396: insert (5)
line 397: inorderTraversal
(1) (1) (2) (2) (3) (4) (4) (5) (5) (6) (7) (7) (8) (9) (9) (10) (10) 
line 398: clear
line 399: buildTree 18
(7) (7) (3) (1) (9) (7) (2) (9) (5) (1) (1) (10) (1) (7) (4) (1) (2) (3) 
line 400: inorderTraversal
(1) (1) (1) (1) (1) (2) (2) (3) (3) (4) (5) (7) (7) (7) (7) (9) (9) (10) 
line 401: remove (3)
line 402: inorderTraversal
(1) (1) (1) (1) (1) (2) (2) (3) (4) (5) (7) (7) (7) (7) (9) (9) (10) 
line 403: clear
line 404: buildTree 2
(9) (6) 
line 405: inorderTraversal
(6) (9) 
line 406: insert (1)
line 407: inorderTraversal
(1) (6) (9) 
line 408: kNearestNeighbour 4 (10)
(1) (6) (9) 
line 409: inorderTraversal
(1) (6) (9) 
line 410: insert (5)
line 411: inorderTraversal
(1) (5) (6) (9) 
line 412: insert (9)
line 413: inorderTraversal
(1) (5) (6) (9) (9) 
line 414: nearestNeighbour (7)
(6) 
line 415: inorderTraversal
(1) (5) (6) (9) (9) 
line 416: insert (1)
line 417: inorderTraversal
(1) (1) (5) (6) (9) (9) 
line 418: insert (8)
line 419: inorderTraversal
(1) (1) (5) (6) (8) (9) (9) 
line 420: nearestNeighbour (6)
(6) 
line 421: inorderTraversal
(1) (1) (5) (6) (8) (9) (9) 
line 422: nodeCount_height_leafCount
nodeCount=7;height=4;leafCount=3
line 423: inorderTraversal
(1) (1) (5) (6) (8) (9) (9) 
line 424: preorderTraversal
(6) (1) (5) (1) (9) (8) (9) 
line 425: postorderTraversal
(1) (5) (1) (8) (9) (9) (6) 
line 426: clear
