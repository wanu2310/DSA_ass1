line 1: k=1
line 2: nearestNeighbour (1)

line 3: inorderTraversal

line 4: kNearestNeighbour 5 (3)

line 5: inorderTraversal

line 6: insert (1)
line 7: inorderTraversal
(1) 
line 8: nearestNeighbour (3)
(1) 
line 9: inorderTraversal
(1) 
line 10: kNearestNeighbour 5 (5)
(1) 
line 11: inorderTraversal
(1) 
line 12: insert (6)
line 13: inorderTraversal
(1) (6) 
line 14: kNearestNeighbour 10 (1)
(1) (6) 
line 15: inorderTraversal
(1) (6) 
line 16: insert (6)
line 17: inorderTraversal
(1) (6) (6) 
line 18: kNearestNeighbour 7 (7)
(1) (6) (6) 
line 19: inorderTraversal
(1) (6) (6) 
line 20: kNearestNeighbour 10 (9)
(1) (6) (6) 
line 21: inorderTraversal
(1) (6) (6) 
line 22: kNearestNeighbour 5 (4)
(1) (6) (6) 
line 23: inorderTraversal
(1) (6) (6) 
line 24: insert (2)
line 25: inorderTraversal
(1) (2) (6) (6) 
line 26: kNearestNeighbour 5 (10)
(1) (2) (6) (6) 
line 27: inorderTraversal
(1) (2) (6) (6) 
line 28: nodeCount_height_leafCount
nodeCount=4;height=3;leafCount=2
line 29: inorderTraversal
(1) (2) (6) (6) 
line 30: nearestNeighbour (6)
(6) 
line 31: inorderTraversal
(1) (2) (6) (6) 
line 32: nearestNeighbour (8)
(6) 
line 33: inorderTraversal
(1) (2) (6) (6) 
line 34: nearestNeighbour (1)
(1) 
line 35: inorderTraversal
(1) (2) (6) (6) 
line 36: nearestNeighbour (8)
(6) 
line 37: inorderTraversal
(1) (2) (6) (6) 
line 38: insert (1)
line 39: inorderTraversal
(1) (1) (2) (6) (6) 
line 40: kNearestNeighbour 8 (1)
(1) (1) (2) (6) (6) 
line 41: inorderTraversal
(1) (1) (2) (6) (6) 
line 42: insert (10)
line 43: inorderTraversal
(1) (1) (2) (6) (6) (10) 
line 44: insert (6)
line 45: inorderTraversal
(1) (1) (2) (6) (6) (6) (10) 
line 46: insert (10)
line 47: inorderTraversal
(1) (1) (2) (6) (6) (6) (10) (10) 
line 48: insert (8)
line 49: inorderTraversal
(1) (1) (2) (6) (6) (6) (8) (10) (10) 
line 50: remove (9)
line 51: inorderTraversal
(1) (1) (2) (6) (6) (6) (8) (10) (10) 
line 52: nearestNeighbour (8)
(8) 
line 53: inorderTraversal
(1) (1) (2) (6) (6) (6) (8) (10) (10) 
line 54: insert (2)
line 55: inorderTraversal
(1) (1) (2) (2) (6) (6) (6) (8) (10) (10) 
line 56: insert (6)
line 57: inorderTraversal
(1) (1) (2) (2) (6) (6) (6) (6) (8) (10) (10) 
line 58: insert (3)
line 59: inorderTraversal
(1) (1) (2) (2) (3) (6) (6) (6) (6) (8) (10) (10) 
line 60: kNearestNeighbour 5 (5)
(3) (6) (6) (6) (6) 
line 61: inorderTraversal
(1) (1) (2) (2) (3) (6) (6) (6) (6) (8) (10) (10) 
line 62: insert (1)
line 63: inorderTraversal
(1) (1) (1) (2) (2) (3) (6) (6) (6) (6) (8) (10) (10) 
line 64: nearestNeighbour (7)
(6) 
line 65: inorderTraversal
(1) (1) (1) (2) (2) (3) (6) (6) (6) (6) (8) (10) (10) 
line 66: insert (6)
line 67: inorderTraversal
(1) (1) (1) (2) (2) (3) (6) (6) (6) (6) (6) (8) (10) (10) 
line 68: clear
line 69: buildTree 3
(10) (6) (5) 
line 70: inorderTraversal
(5) (6) (10) 
line 71: insert (5)
line 72: inorderTraversal
(5) (5) (6) (10) 
line 73: insert (8)
line 74: inorderTraversal
(5) (5) (6) (8) (10) 
line 75: insert (6)
line 76: inorderTraversal
(5) (5) (6) (6) (8) (10) 
line 77: nearestNeighbour (4)
(5) 
line 78: inorderTraversal
(5) (5) (6) (6) (8) (10) 
line 79: clear
line 80: buildTree 2
(10) (10) 
line 81: inorderTraversal
(10) (10) 
line 82: preorderTraversal
(10) (10) 
line 83: inorderTraversal
(10) (10) 
line 84: insert (9)
line 85: inorderTraversal
(9) (10) (10) 
line 86: clear
line 87: buildTree 16
(7) (2) (1) (7) (7) (2) (9) (6) (8) (10) (2) (8) (9) (3) (8) (1) 
line 88: inorderTraversal
(1) (1) (2) (2) (2) (3) (6) (7) (7) (7) (8) (8) (8) (9) (9) (10) 
line 89: nearestNeighbour (6)
(6) 
line 90: inorderTraversal
(1) (1) (2) (2) (2) (3) (6) (7) (7) (7) (8) (8) (8) (9) (9) (10) 
line 91: insert (4)
line 92: inorderTraversal
(1) (1) (2) (2) (2) (3) (4) (6) (7) (7) (7) (8) (8) (8) (9) (9) (10) 
line 93: kNearestNeighbour 9 (1)
(1) (1) (2) (2) (2) (3) (4) (6) (7) 
line 94: inorderTraversal
(1) (1) (2) (2) (2) (3) (4) (6) (7) (7) (7) (8) (8) (8) (9) (9) (10) 
line 95: postorderTraversal
(1) (1) (2) (4) (6) (3) (2) (2) (7) (7) (8) (8) (10) (9) (9) (8) (7) 
line 96: inorderTraversal
(1) (1) (2) (2) (2) (3) (4) (6) (7) (7) (7) (8) (8) (8) (9) (9) (10) 
line 97: nearestNeighbour (9)
(9) 
line 98: inorderTraversal
(1) (1) (2) (2) (2) (3) (4) (6) (7) (7) (7) (8) (8) (8) (9) (9) (10) 
line 99: kNearestNeighbour 7 (5)
(2) (3) (4) (6) (7) (7) (7) 
line 100: inorderTraversal
(1) (1) (2) (2) (2) (3) (4) (6) (7) (7) (7) (8) (8) (8) (9) (9) (10) 
line 101: kNearestNeighbour 10 (5)
(2) (2) (2) (3) (4) (6) (7) (7) (7) (8) 
line 102: inorderTraversal
(1) (1) (2) (2) (2) (3) (4) (6) (7) (7) (7) (8) (8) (8) (9) (9) (10) 
line 103: clear
line 104: buildTree 2
(4) (7) 
line 105: inorderTraversal
(4) (7) 
line 106: insert (5)
line 107: inorderTraversal
(4) (5) (7) 
line 108: insert (2)
line 109: inorderTraversal
(2) (4) (5) (7) 
line 110: search (4)
TRUE
line 111: inorderTraversal
(2) (4) (5) (7) 
line 112: remove (1)
line 113: inorderTraversal
(2) (4) (5) (7) 
line 114: insert (5)
line 115: inorderTraversal
(2) (4) (5) (5) (7) 
line 116: insert (9)
line 117: inorderTraversal
(2) (4) (5) (5) (7) (9) 
line 118: nearestNeighbour (1)
(2) 
line 119: inorderTraversal
(2) (4) (5) (5) (7) (9) 
line 120: kNearestNeighbour 9 (2)
(2) (4) (5) (5) (7) (9) 
line 121: inorderTraversal
(2) (4) (5) (5) (7) (9) 
line 122: insert (3)
line 123: inorderTraversal
(2) (3) (4) (5) (5) (7) (9) 
line 124: insert (3)
line 125: inorderTraversal
(2) (3) (3) (4) (5) (5) (7) (9) 
line 126: insert (9)
line 127: inorderTraversal
(2) (3) (3) (4) (5) (5) (7) (9) (9) 
line 128: insert (1)
line 129: inorderTraversal
(1) (2) (3) (3) (4) (5) (5) (7) (9) (9) 
line 130: insert (10)
line 131: inorderTraversal
(1) (2) (3) (3) (4) (5) (5) (7) (9) (9) (10) 
line 132: nearestNeighbour (8)
(9) 
line 133: inorderTraversal
(1) (2) (3) (3) (4) (5) (5) (7) (9) (9) (10) 
line 134: nearestNeighbour (6)
(5) 
line 135: inorderTraversal
(1) (2) (3) (3) (4) (5) (5) (7) (9) (9) (10) 
line 136: kNearestNeighbour 1 (5)
(5) 
line 137: inorderTraversal
(1) (2) (3) (3) (4) (5) (5) (7) (9) (9) (10) 
line 138: kNearestNeighbour 2 (8)
(9) (9) 
line 139: inorderTraversal
(1) (2) (3) (3) (4) (5) (5) (7) (9) (9) (10) 
line 140: remove (3)
line 141: inorderTraversal
(1) (2) (3) (4) (5) (5) (7) (9) (9) (10) 
line 142: clear
line 143: buildTree 7
(3) (8) (6) (1) (7) (3) (4) 
line 144: inorderTraversal
(1) (3) (3) (4) (6) (7) (8) 
line 145: clear
line 146: buildTree 4
(9) (4) (5) (1) 
line 147: inorderTraversal
(1) (4) (5) (9) 
line 148: nearestNeighbour (10)
(9) 
line 149: inorderTraversal
(1) (4) (5) (9) 
line 150: insert (9)
line 151: inorderTraversal
(1) (4) (5) (9) (9) 
line 152: clear
line 153: buildTree 2
(3) (6) 
line 154: inorderTraversal
(3) (6) 
line 155: insert (10)
line 156: inorderTraversal
(3) (6) (10) 
line 157: clear
line 158: buildTree 13
(7) (10) (4) (2) (10) (7) (9) (2) (8) (7) (3) (5) (2) 
line 159: inorderTraversal
(2) (2) (2) (3) (4) (5) (7) (7) (7) (8) (9) (10) (10) 
line 160: insert (8)
line 161: inorderTraversal
(2) (2) (2) (3) (4) (5) (7) (7) (7) (8) (8) (9) (10) (10) 
line 162: kNearestNeighbour 9 (2)
(2) (2) (2) (3) (4) (5) (7) (7) (7) 
line 163: inorderTraversal
(2) (2) (2) (3) (4) (5) (7) (7) (7) (8) (8) (9) (10) (10) 
line 164: insert (10)
line 165: inorderTraversal
(2) (2) (2) (3) (4) (5) (7) (7) (7) (8) (8) (9) (10) (10) (10) 
line 166: insert (7)
line 167: inorderTraversal
(2) (2) (2) (3) (4) (5) (7) (7) (7) (7) (8) (8) (9) (10) (10) (10) 
line 168: insert (3)
line 169: inorderTraversal
(2) (2) (2) (3) (3) (4) (5) (7) (7) (7) (7) (8) (8) (9) (10) (10) (10) 
line 170: insert (8)
line 171: inorderTraversal
(2) (2) (2) (3) (3) (4) (5) (7) (7) (7) (7) (8) (8) (8) (9) (10) (10) (10) 
line 172: insert (1)
line 173: inorderTraversal
(1) (2) (2) (2) (3) (3) (4) (5) (7) (7) (7) (7) (8) (8) (8) (9) (10) (10) (10) 
line 174: insert (10)
line 175: inorderTraversal
(1) (2) (2) (2) (3) (3) (4) (5) (7) (7) (7) (7) (8) (8) (8) (9) (10) (10) (10) (10) 
line 176: nearestNeighbour (10)
(10) 
line 177: inorderTraversal
(1) (2) (2) (2) (3) (3) (4) (5) (7) (7) (7) (7) (8) (8) (8) (9) (10) (10) (10) (10) 
line 178: nearestNeighbour (10)
(10) 
line 179: inorderTraversal
(1) (2) (2) (2) (3) (3) (4) (5) (7) (7) (7) (7) (8) (8) (8) (9) (10) (10) (10) (10) 
line 180: insert (1)
line 181: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (4) (5) (7) (7) (7) (7) (8) (8) (8) (9) (10) (10) (10) (10) 
line 182: kNearestNeighbour 1 (6)
(5) 
line 183: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (4) (5) (7) (7) (7) (7) (8) (8) (8) (9) (10) (10) (10) (10) 
line 184: clear
line 185: buildTree 11
(6) (10) (8) (8) (5) (4) (10) (3) (3) (10) (8) 
line 186: inorderTraversal
(3) (3) (4) (5) (6) (8) (8) (8) (10) (10) (10) 
line 187: insert (6)
line 188: inorderTraversal
(3) (3) (4) (5) (6) (6) (8) (8) (8) (10) (10) (10) 
line 189: nearestNeighbour (10)
(10) 
line 190: inorderTraversal
(3) (3) (4) (5) (6) (6) (8) (8) (8) (10) (10) (10) 
line 191: kNearestNeighbour 4 (5)
(4) (5) (6) (6) 
line 192: inorderTraversal
(3) (3) (4) (5) (6) (6) (8) (8) (8) (10) (10) (10) 
line 193: insert (3)
line 194: inorderTraversal
(3) (3) (3) (4) (5) (6) (6) (8) (8) (8) (10) (10) (10) 
line 195: insert (10)
line 196: inorderTraversal
(3) (3) (3) (4) (5) (6) (6) (8) (8) (8) (10) (10) (10) (10) 
line 197: nearestNeighbour (7)
(6) 
line 198: inorderTraversal
(3) (3) (3) (4) (5) (6) (6) (8) (8) (8) (10) (10) (10) (10) 
line 199: insert (3)
line 200: inorderTraversal
(3) (3) (3) (3) (4) (5) (6) (6) (8) (8) (8) (10) (10) (10) (10) 
line 201: insert (6)
line 202: inorderTraversal
(3) (3) (3) (3) (4) (5) (6) (6) (6) (8) (8) (8) (10) (10) (10) (10) 
line 203: insert (1)
line 204: inorderTraversal
(1) (3) (3) (3) (3) (4) (5) (6) (6) (6) (8) (8) (8) (10) (10) (10) (10) 
line 205: kNearestNeighbour 2 (10)
(10) (10) 
line 206: inorderTraversal
(1) (3) (3) (3) (3) (4) (5) (6) (6) (6) (8) (8) (8) (10) (10) (10) (10) 
line 207: insert (10)
line 208: inorderTraversal
(1) (3) (3) (3) (3) (4) (5) (6) (6) (6) (8) (8) (8) (10) (10) (10) (10) (10) 
line 209: insert (10)
line 210: inorderTraversal
(1) (3) (3) (3) (3) (4) (5) (6) (6) (6) (8) (8) (8) (10) (10) (10) (10) (10) (10) 
line 211: insert (10)
line 212: inorderTraversal
(1) (3) (3) (3) (3) (4) (5) (6) (6) (6) (8) (8) (8) (10) (10) (10) (10) (10) (10) (10) 
line 213: kNearestNeighbour 6 (4)
(3) (3) (3) (3) (4) (5) 
line 214: inorderTraversal
(1) (3) (3) (3) (3) (4) (5) (6) (6) (6) (8) (8) (8) (10) (10) (10) (10) (10) (10) (10) 
line 215: kNearestNeighbour 5 (3)
(3) (3) (3) (3) (4) 
line 216: inorderTraversal
(1) (3) (3) (3) (3) (4) (5) (6) (6) (6) (8) (8) (8) (10) (10) (10) (10) (10) (10) (10) 
line 217: clear
line 218: buildTree 15
(10) (1) (2) (10) (10) (3) (6) (1) (1) (6) (1) (4) (8) (4) (1) 
line 219: inorderTraversal
(1) (1) (1) (1) (1) (2) (3) (4) (4) (6) (6) (8) (10) (10) (10) 
line 220: clear
line 221: buildTree 7
(8) (1) (9) (7) (4) (5) (6) 
line 222: inorderTraversal
(1) (4) (5) (6) (7) (8) (9) 
line 223: kNearestNeighbour 5 (3)
(1) (4) (5) (6) (7) 
line 224: inorderTraversal
(1) (4) (5) (6) (7) (8) (9) 
line 225: insert (10)
line 226: inorderTraversal
(1) (4) (5) (6) (7) (8) (9) (10) 
line 227: insert (5)
line 228: inorderTraversal
(1) (4) (5) (5) (6) (7) (8) (9) (10) 
line 229: kNearestNeighbour 9 (8)
(1) (4) (5) (5) (6) (7) (8) (9) (10) 
line 230: inorderTraversal
(1) (4) (5) (5) (6) (7) (8) (9) (10) 
line 231: kNearestNeighbour 7 (5)
(1) (4) (5) (5) (6) (7) (8) 
line 232: inorderTraversal
(1) (4) (5) (5) (6) (7) (8) (9) (10) 
line 233: nearestNeighbour (7)
(7) 
line 234: inorderTraversal
(1) (4) (5) (5) (6) (7) (8) (9) (10) 
line 235: nearestNeighbour (4)
(4) 
line 236: inorderTraversal
(1) (4) (5) (5) (6) (7) (8) (9) (10) 
line 237: insert (6)
line 238: inorderTraversal
(1) (4) (5) (5) (6) (6) (7) (8) (9) (10) 
line 239: remove (2)
line 240: inorderTraversal
(1) (4) (5) (5) (6) (6) (7) (8) (9) (10) 
line 241: insert (4)
line 242: inorderTraversal
(1) (4) (4) (5) (5) (6) (6) (7) (8) (9) (10) 
line 243: clear
line 244: buildTree 4
(1) (1) (7) (2) 
line 245: inorderTraversal
(1) (1) (2) (7) 
line 246: kNearestNeighbour 1 (2)
(2) 
line 247: inorderTraversal
(1) (1) (2) (7) 
line 248: search (1)
TRUE
line 249: inorderTraversal
(1) (1) (2) (7) 
line 250: insert (9)
line 251: inorderTraversal
(1) (1) (2) (7) (9) 
line 252: clear
line 253: buildTree 19
(4) (8) (2) (4) (2) (4) (8) (1) (9) (9) (6) (2) (9) (9) (5) (6) (3) (10) (4) 
line 254: inorderTraversal
(1) (2) (2) (2) (3) (4) (4) (4) (4) (5) (6) (6) (8) (8) (9) (9) (9) (9) (10) 
line 255: remove (2)
line 256: inorderTraversal
(1) (2) (2) (3) (4) (4) (4) (4) (5) (6) (6) (8) (8) (9) (9) (9) (9) (10) 
line 257: remove (1)
line 258: inorderTraversal
(2) (2) (3) (4) (4) (4) (4) (5) (6) (6) (8) (8) (9) (9) (9) (9) (10) 
line 259: remove (4)
line 260: inorderTraversal
(2) (2) (3) (4) (4) (4) (5) (6) (6) (8) (8) (9) (9) (9) (9) (10) 
line 261: remove (3)
line 262: inorderTraversal
(2) (2) (4) (4) (4) (5) (6) (6) (8) (8) (9) (9) (9) (9) (10) 
line 263: kNearestNeighbour 5 (10)
(9) (9) (9) (9) (10) 
line 264: inorderTraversal
(2) (2) (4) (4) (4) (5) (6) (6) (8) (8) (9) (9) (9) (9) (10) 
line 265: preorderTraversal
(5) (4) (2) (2) (4) (4) (9) (6) (8) (6) (8) (9) (9) (9) (10) 
line 266: inorderTraversal
(2) (2) (4) (4) (4) (5) (6) (6) (8) (8) (9) (9) (9) (9) (10) 
line 267: insert (10)
line 268: inorderTraversal
(2) (2) (4) (4) (4) (5) (6) (6) (8) (8) (9) (9) (9) (9) (10) (10) 
line 269: nodeCount_height_leafCount
nodeCount=16;height=7;leafCount=5
line 270: inorderTraversal
(2) (2) (4) (4) (4) (5) (6) (6) (8) (8) (9) (9) (9) (9) (10) (10) 
line 271: insert (10)
line 272: inorderTraversal
(2) (2) (4) (4) (4) (5) (6) (6) (8) (8) (9) (9) (9) (9) (10) (10) (10) 
line 273: insert (7)
line 274: inorderTraversal
(2) (2) (4) (4) (4) (5) (6) (6) (7) (8) (8) (9) (9) (9) (9) (10) (10) (10) 
line 275: insert (3)
line 276: inorderTraversal
(2) (2) (3) (4) (4) (4) (5) (6) (6) (7) (8) (8) (9) (9) (9) (9) (10) (10) (10) 
line 277: nearestNeighbour (1)
(2) 
line 278: inorderTraversal
(2) (2) (3) (4) (4) (4) (5) (6) (6) (7) (8) (8) (9) (9) (9) (9) (10) (10) (10) 
line 279: insert (4)
line 280: inorderTraversal
(2) (2) (3) (4) (4) (4) (4) (5) (6) (6) (7) (8) (8) (9) (9) (9) (9) (10) (10) (10) 
line 281: remove (9)
line 282: inorderTraversal
(2) (2) (3) (4) (4) (4) (4) (5) (6) (6) (7) (8) (8) (9) (9) (9) (10) (10) (10) 
line 283: insert (5)
line 284: inorderTraversal
(2) (2) (3) (4) (4) (4) (4) (5) (5) (6) (6) (7) (8) (8) (9) (9) (9) (10) (10) (10) 
line 285: insert (9)
line 286: inorderTraversal
(2) (2) (3) (4) (4) (4) (4) (5) (5) (6) (6) (7) (8) (8) (9) (9) (9) (9) (10) (10) (10) 
line 287: insert (4)
line 288: inorderTraversal
(2) (2) (3) (4) (4) (4) (4) (4) (5) (5) (6) (6) (7) (8) (8) (9) (9) (9) (9) (10) (10) (10) 
line 289: nearestNeighbour (1)
(2) 
line 290: inorderTraversal
(2) (2) (3) (4) (4) (4) (4) (4) (5) (5) (6) (6) (7) (8) (8) (9) (9) (9) (9) (10) (10) (10) 
line 291: insert (4)
line 292: inorderTraversal
(2) (2) (3) (4) (4) (4) (4) (4) (4) (5) (5) (6) (6) (7) (8) (8) (9) (9) (9) (9) (10) (10) (10) 
line 293: kNearestNeighbour 9 (5)
(4) (4) (4) (4) (4) (5) (5) (6) (6) 
line 294: inorderTraversal
(2) (2) (3) (4) (4) (4) (4) (4) (4) (5) (5) (6) (6) (7) (8) (8) (9) (9) (9) (9) (10) (10) (10) 
line 295: insert (4)
line 296: inorderTraversal
(2) (2) (3) (4) (4) (4) (4) (4) (4) (4) (5) (5) (6) (6) (7) (8) (8) (9) (9) (9) (9) (10) (10) (10) 
line 297: clear
line 298: buildTree 7
(8) (5) (5) (9) (3) (6) (7) 
line 299: inorderTraversal
(3) (5) (5) (6) (7) (8) (9) 
line 300: remove (6)
line 301: inorderTraversal
(3) (5) (5) (7) (8) (9) 
line 302: clear
line 303: buildTree 15
(10) (4) (2) (3) (8) (3) (3) (6) (8) (4) (10) (10) (3) (3) (10) 
line 304: inorderTraversal
(2) (3) (3) (3) (3) (3) (4) (4) (6) (8) (8) (10) (10) (10) (10) 
line 305: kNearestNeighbour 10 (8)
(3) (4) (4) (6) (8) (8) (10) (10) (10) (10) 
line 306: inorderTraversal
(2) (3) (3) (3) (3) (3) (4) (4) (6) (8) (8) (10) (10) (10) (10) 
line 307: insert (3)
line 308: inorderTraversal
(2) (3) (3) (3) (3) (3) (3) (4) (4) (6) (8) (8) (10) (10) (10) (10) 
line 309: nodeCount_height_leafCount
nodeCount=16;height=7;leafCount=5
line 310: inorderTraversal
(2) (3) (3) (3) (3) (3) (3) (4) (4) (6) (8) (8) (10) (10) (10) (10) 
line 311: insert (1)
line 312: inorderTraversal
(1) (2) (3) (3) (3) (3) (3) (3) (4) (4) (6) (8) (8) (10) (10) (10) (10) 
line 313: nodeCount_height_leafCount
nodeCount=17;height=7;leafCount=5
line 314: inorderTraversal
(1) (2) (3) (3) (3) (3) (3) (3) (4) (4) (6) (8) (8) (10) (10) (10) (10) 
line 315: insert (4)
line 316: inorderTraversal
(1) (2) (3) (3) (3) (3) (3) (3) (4) (4) (4) (6) (8) (8) (10) (10) (10) (10) 
line 317: insert (8)
line 318: inorderTraversal
(1) (2) (3) (3) (3) (3) (3) (3) (4) (4) (4) (6) (8) (8) (8) (10) (10) (10) (10) 
line 319: nearestNeighbour (2)
(2) 
line 320: inorderTraversal
(1) (2) (3) (3) (3) (3) (3) (3) (4) (4) (4) (6) (8) (8) (8) (10) (10) (10) (10) 
line 321: clear
line 322: buildTree 15
(10) (6) (5) (7) (7) (1) (10) (5) (5) (6) (2) (4) (2) (2) (5) 
line 323: inorderTraversal
(1) (2) (2) (2) (4) (5) (5) (5) (5) (6) (6) (7) (7) (10) (10) 
line 324: insert (6)
line 325: inorderTraversal
(1) (2) (2) (2) (4) (5) (5) (5) (5) (6) (6) (6) (7) (7) (10) (10) 
line 326: nearestNeighbour (1)
(1) 
line 327: inorderTraversal
(1) (2) (2) (2) (4) (5) (5) (5) (5) (6) (6) (6) (7) (7) (10) (10) 
line 328: nodeCount_height_leafCount
nodeCount=16;height=5;leafCount=6
line 329: inorderTraversal
(1) (2) (2) (2) (4) (5) (5) (5) (5) (6) (6) (6) (7) (7) (10) (10) 
line 330: search (3)
FALSE
line 331: inorderTraversal
(1) (2) (2) (2) (4) (5) (5) (5) (5) (6) (6) (6) (7) (7) (10) (10) 
line 332: nearestNeighbour (4)
(4) 
line 333: inorderTraversal
(1) (2) (2) (2) (4) (5) (5) (5) (5) (6) (6) (6) (7) (7) (10) (10) 
line 334: nearestNeighbour (9)
(10) 
line 335: inorderTraversal
(1) (2) (2) (2) (4) (5) (5) (5) (5) (6) (6) (6) (7) (7) (10) (10) 
line 336: search (7)
TRUE
line 337: inorderTraversal
(1) (2) (2) (2) (4) (5) (5) (5) (5) (6) (6) (6) (7) (7) (10) (10) 
line 338: search (2)
TRUE
line 339: inorderTraversal
(1) (2) (2) (2) (4) (5) (5) (5) (5) (6) (6) (6) (7) (7) (10) (10) 
line 340: nodeCount_height_leafCount
nodeCount=16;height=5;leafCount=6
line 341: inorderTraversal
(1) (2) (2) (2) (4) (5) (5) (5) (5) (6) (6) (6) (7) (7) (10) (10) 
line 342: kNearestNeighbour 4 (3)
(2) (2) (2) (4) 
line 343: inorderTraversal
(1) (2) (2) (2) (4) (5) (5) (5) (5) (6) (6) (6) (7) (7) (10) (10) 
line 344: clear
line 345: buildTree 16
(3) (8) (10) (1) (6) (6) (3) (7) (4) (5) (1) (9) (3) (7) (3) (5) 
line 346: inorderTraversal
(1) (1) (3) (3) (3) (3) (4) (5) (5) (6) (6) (7) (7) (8) (9) (10) 
line 347: kNearestNeighbour 1 (4)
(4) 
line 348: inorderTraversal
(1) (1) (3) (3) (3) (3) (4) (5) (5) (6) (6) (7) (7) (8) (9) (10) 
line 349: insert (5)
line 350: inorderTraversal
(1) (1) (3) (3) (3) (3) (4) (5) (5) (5) (6) (6) (7) (7) (8) (9) (10) 
line 351: insert (2)
line 352: inorderTraversal
(1) (1) (2) (3) (3) (3) (3) (4) (5) (5) (5) (6) (6) (7) (7) (8) (9) (10) 
line 353: insert (6)
line 354: inorderTraversal
(1) (1) (2) (3) (3) (3) (3) (4) (5) (5) (5) (6) (6) (6) (7) (7) (8) (9) (10) 
line 355: insert (7)
line 356: inorderTraversal
(1) (1) (2) (3) (3) (3) (3) (4) (5) (5) (5) (6) (6) (6) (7) (7) (7) (8) (9) (10) 
line 357: insert (1)
line 358: inorderTraversal
(1) (1) (1) (2) (3) (3) (3) (3) (4) (5) (5) (5) (6) (6) (6) (7) (7) (7) (8) (9) (10) 
line 359: nodeCount_height_leafCount
nodeCount=21;height=6;leafCount=6
line 360: inorderTraversal
(1) (1) (1) (2) (3) (3) (3) (3) (4) (5) (5) (5) (6) (6) (6) (7) (7) (7) (8) (9) (10) 
line 361: kNearestNeighbour 3 (10)
(8) (9) (10) 
line 362: inorderTraversal
(1) (1) (1) (2) (3) (3) (3) (3) (4) (5) (5) (5) (6) (6) (6) (7) (7) (7) (8) (9) (10) 
line 363: search (4)
TRUE
line 364: inorderTraversal
(1) (1) (1) (2) (3) (3) (3) (3) (4) (5) (5) (5) (6) (6) (6) (7) (7) (7) (8) (9) (10) 
line 365: kNearestNeighbour 4 (1)
(1) (1) (1) (2) 
line 366: inorderTraversal
(1) (1) (1) (2) (3) (3) (3) (3) (4) (5) (5) (5) (6) (6) (6) (7) (7) (7) (8) (9) (10) 
line 367: clear
line 368: buildTree 4
(7) (1) (3) (2) 
line 369: inorderTraversal
(1) (2) (3) (7) 
line 370: insert (2)
line 371: inorderTraversal
(1) (2) (2) (3) (7) 
line 372: insert (5)
line 373: inorderTraversal
(1) (2) (2) (3) (5) (7) 
line 374: insert (6)
line 375: inorderTraversal
(1) (2) (2) (3) (5) (6) (7) 
line 376: insert (6)
line 377: inorderTraversal
(1) (2) (2) (3) (5) (6) (6) (7) 
line 378: insert (9)
line 379: inorderTraversal
(1) (2) (2) (3) (5) (6) (6) (7) (9) 
line 380: kNearestNeighbour 3 (3)
(2) (2) (3) 
line 381: inorderTraversal
(1) (2) (2) (3) (5) (6) (6) (7) (9) 
line 382: insert (9)
line 383: inorderTraversal
(1) (2) (2) (3) (5) (6) (6) (7) (9) (9) 
line 384: insert (10)
line 385: inorderTraversal
(1) (2) (2) (3) (5) (6) (6) (7) (9) (9) (10) 
line 386: kNearestNeighbour 3 (4)
(3) (5) (6) 
line 387: inorderTraversal
(1) (2) (2) (3) (5) (6) (6) (7) (9) (9) (10) 
line 388: clear
line 389: buildTree 8
(6) (3) (10) (2) (3) (9) (8) (3) 
line 390: inorderTraversal
(2) (3) (3) (3) (6) (8) (9) (10) 
line 391: preorderTraversal
(3) (2) (6) (3) (3) (9) (8) (10) 
line 392: inorderTraversal
(2) (3) (3) (3) (6) (8) (9) (10) 
line 393: search (10)
TRUE
line 394: inorderTraversal
(2) (3) (3) (3) (6) (8) (9) (10) 
line 395: kNearestNeighbour 5 (2)
(2) (3) (3) (3) (6) 
line 396: inorderTraversal
(2) (3) (3) (3) (6) (8) (9) (10) 
line 397: clear
line 398: buildTree 18
(4) (2) (7) (7) (2) (6) (7) (9) (10) (7) (1) (6) (1) (7) (5) (5) (10) (4) 
line 399: inorderTraversal
(1) (1) (2) (2) (4) (4) (5) (5) (6) (6) (7) (7) (7) (7) (7) (9) (10) (10) 
line 400: insert (6)
line 401: inorderTraversal
(1) (1) (2) (2) (4) (4) (5) (5) (6) (6) (6) (7) (7) (7) (7) (7) (9) (10) (10) 
line 402: insert (5)
line 403: inorderTraversal
(1) (1) (2) (2) (4) (4) (5) (5) (5) (6) (6) (6) (7) (7) (7) (7) (7) (9) (10) (10) 
line 404: nearestNeighbour (2)
(2) 
line 405: inorderTraversal
(1) (1) (2) (2) (4) (4) (5) (5) (5) (6) (6) (6) (7) (7) (7) (7) (7) (9) (10) (10) 
line 406: clear
line 407: buildTree 8
(5) (10) (1) (1) (10) (8) (3) (2) 
line 408: inorderTraversal
(1) (1) (2) (3) (5) (8) (10) (10) 
line 409: insert (10)
line 410: inorderTraversal
(1) (1) (2) (3) (5) (8) (10) (10) (10) 
line 411: remove (3)
line 412: inorderTraversal
(1) (1) (2) (5) (8) (10) (10) (10) 
line 413: nearestNeighbour (6)
(5) 
line 414: inorderTraversal
(1) (1) (2) (5) (8) (10) (10) (10) 
line 415: insert (6)
line 416: inorderTraversal
(1) (1) (2) (5) (6) (8) (10) (10) (10) 
line 417: remove (1)
line 418: inorderTraversal
(1) (2) (5) (6) (8) (10) (10) (10) 
line 419: insert (6)
line 420: inorderTraversal
(1) (2) (5) (6) (6) (8) (10) (10) (10) 
line 421: kNearestNeighbour 7 (8)
(5) (6) (6) (8) (10) (10) (10) 
line 422: inorderTraversal
(1) (2) (5) (6) (6) (8) (10) (10) (10) 
line 423: nodeCount_height_leafCount
nodeCount=9;height=5;leafCount=3
line 424: inorderTraversal
(1) (2) (5) (6) (6) (8) (10) (10) (10) 
line 425: preorderTraversal
(5) (1) (2) (8) (6) (6) (10) (10) (10) 
line 426: postorderTraversal
(2) (1) (6) (6) (10) (10) (10) (8) (5) 
line 427: clear
