line 1: k=1
line 2: nearestNeighbour (9)

line 3: inorderTraversal

line 4: insert (4)
line 5: inorderTraversal
(4) 
line 6: insert (6)
line 7: inorderTraversal
(4) (6) 
line 8: insert (5)
line 9: inorderTraversal
(4) (5) (6) 
line 10: insert (10)
line 11: inorderTraversal
(4) (5) (6) (10) 
line 12: kNearestNeighbour 5 (3)
(4) (5) (6) (10) 
line 13: inorderTraversal
(4) (5) (6) (10) 
line 14: kNearestNeighbour 2 (10)
(6) (10) 
line 15: inorderTraversal
(4) (5) (6) (10) 
line 16: insert (6)
line 17: inorderTraversal
(4) (5) (6) (6) (10) 
line 18: clear
line 19: buildTree 2
(6) (9) 
line 20: inorderTraversal
(6) (9) 
line 21: nodeCount_height_leafCount
nodeCount=2;height=2;leafCount=1
line 22: inorderTraversal
(6) (9) 
line 23: kNearestNeighbour 5 (9)
(6) (9) 
line 24: inorderTraversal
(6) (9) 
line 25: nearestNeighbour (5)
(6) 
line 26: inorderTraversal
(6) (9) 
line 27: kNearestNeighbour 10 (6)
(6) (9) 
line 28: inorderTraversal
(6) (9) 
line 29: insert (7)
line 30: inorderTraversal
(6) (7) (9) 
line 31: insert (5)
line 32: inorderTraversal
(5) (6) (7) (9) 
line 33: kNearestNeighbour 1 (4)
(5) 
line 34: inorderTraversal
(5) (6) (7) (9) 
line 35: insert (1)
line 36: inorderTraversal
(1) (5) (6) (7) (9) 
line 37: kNearestNeighbour 2 (8)
(7) (9) 
line 38: inorderTraversal
(1) (5) (6) (7) (9) 
line 39: remove (7)
line 40: inorderTraversal
(1) (5) (6) (9) 
line 41: nearestNeighbour (1)
(1) 
line 42: inorderTraversal
(1) (5) (6) (9) 
line 43: kNearestNeighbour 10 (9)
(1) (5) (6) (9) 
line 44: inorderTraversal
(1) (5) (6) (9) 
line 45: insert (7)
line 46: inorderTraversal
(1) (5) (6) (7) (9) 
line 47: insert (10)
line 48: inorderTraversal
(1) (5) (6) (7) (9) (10) 
line 49: kNearestNeighbour 4 (5)
(1) (5) (6) (7) 
line 50: inorderTraversal
(1) (5) (6) (7) (9) (10) 
line 51: kNearestNeighbour 8 (4)
(1) (5) (6) (7) (9) (10) 
line 52: inorderTraversal
(1) (5) (6) (7) (9) (10) 
line 53: insert (10)
line 54: inorderTraversal
(1) (5) (6) (7) (9) (10) (10) 
line 55: insert (5)
line 56: inorderTraversal
(1) (5) (5) (6) (7) (9) (10) (10) 
line 57: nearestNeighbour (9)
(9) 
line 58: inorderTraversal
(1) (5) (5) (6) (7) (9) (10) (10) 
line 59: nearestNeighbour (9)
(9) 
line 60: inorderTraversal
(1) (5) (5) (6) (7) (9) (10) (10) 
line 61: nearestNeighbour (8)
(7) 
line 62: inorderTraversal
(1) (5) (5) (6) (7) (9) (10) (10) 
line 63: insert (4)
line 64: inorderTraversal
(1) (4) (5) (5) (6) (7) (9) (10) (10) 
line 65: kNearestNeighbour 2 (1)
(1) (4) 
line 66: inorderTraversal
(1) (4) (5) (5) (6) (7) (9) (10) (10) 
line 67: insert (1)
line 68: inorderTraversal
(1) (1) (4) (5) (5) (6) (7) (9) (10) (10) 
line 69: kNearestNeighbour 9 (1)
(1) (1) (4) (5) (5) (6) (7) (9) (10) 
line 70: inorderTraversal
(1) (1) (4) (5) (5) (6) (7) (9) (10) (10) 
line 71: search (9)
TRUE
line 72: inorderTraversal
(1) (1) (4) (5) (5) (6) (7) (9) (10) (10) 
line 73: insert (8)
line 74: inorderTraversal
(1) (1) (4) (5) (5) (6) (7) (8) (9) (10) (10) 
line 75: remove (5)
line 76: inorderTraversal
(1) (1) (4) (5) (6) (7) (8) (9) (10) (10) 
line 77: kNearestNeighbour 6 (2)
(1) (1) (4) (5) (6) (7) 
line 78: inorderTraversal
(1) (1) (4) (5) (6) (7) (8) (9) (10) (10) 
line 79: insert (8)
line 80: inorderTraversal
(1) (1) (4) (5) (6) (7) (8) (8) (9) (10) (10) 
line 81: insert (7)
line 82: inorderTraversal
(1) (1) (4) (5) (6) (7) (7) (8) (8) (9) (10) (10) 
line 83: insert (7)
line 84: inorderTraversal
(1) (1) (4) (5) (6) (7) (7) (7) (8) (8) (9) (10) (10) 
line 85: nearestNeighbour (7)
(7) 
line 86: inorderTraversal
(1) (1) (4) (5) (6) (7) (7) (7) (8) (8) (9) (10) (10) 
line 87: insert (8)
line 88: inorderTraversal
(1) (1) (4) (5) (6) (7) (7) (7) (8) (8) (8) (9) (10) (10) 
line 89: nearestNeighbour (8)
(8) 
line 90: inorderTraversal
(1) (1) (4) (5) (6) (7) (7) (7) (8) (8) (8) (9) (10) (10) 
line 91: search (8)
TRUE
line 92: inorderTraversal
(1) (1) (4) (5) (6) (7) (7) (7) (8) (8) (8) (9) (10) (10) 
line 93: nearestNeighbour (5)
(5) 
line 94: inorderTraversal
(1) (1) (4) (5) (6) (7) (7) (7) (8) (8) (8) (9) (10) (10) 
line 95: insert (9)
line 96: inorderTraversal
(1) (1) (4) (5) (6) (7) (7) (7) (8) (8) (8) (9) (9) (10) (10) 
line 97: insert (2)
line 98: inorderTraversal
(1) (1) (2) (4) (5) (6) (7) (7) (7) (8) (8) (8) (9) (9) (10) (10) 
line 99: kNearestNeighbour 8 (1)
(1) (1) (2) (4) (5) (6) (7) (7) 
line 100: inorderTraversal
(1) (1) (2) (4) (5) (6) (7) (7) (7) (8) (8) (8) (9) (9) (10) (10) 
line 101: clear
line 102: buildTree 18
(9) (2) (7) (5) (2) (4) (8) (1) (4) (1) (3) (7) (7) (4) (6) (3) (5) (5) 
line 103: inorderTraversal
(1) (1) (2) (2) (3) (3) (4) (4) (4) (5) (5) (5) (6) (7) (7) (7) (8) (9) 
line 104: clear
line 105: buildTree 9
(5) (2) (10) (9) (1) (10) (3) (6) (7) 
line 106: inorderTraversal
(1) (2) (3) (5) (6) (7) (9) (10) (10) 
line 107: nearestNeighbour (3)
(3) 
line 108: inorderTraversal
(1) (2) (3) (5) (6) (7) (9) (10) (10) 
line 109: insert (9)
line 110: inorderTraversal
(1) (2) (3) (5) (6) (7) (9) (9) (10) (10) 
line 111: clear
line 112: buildTree 7
(2) (7) (10) (5) (4) (1) (3) 
line 113: inorderTraversal
(1) (2) (3) (4) (5) (7) (10) 
line 114: clear
line 115: buildTree 2
(1) (8) 
line 116: inorderTraversal
(1) (8) 
line 117: nearestNeighbour (4)
(1) 
line 118: inorderTraversal
(1) (8) 
line 119: insert (10)
line 120: inorderTraversal
(1) (8) (10) 
line 121: kNearestNeighbour 4 (8)
(1) (8) (10) 
line 122: inorderTraversal
(1) (8) (10) 
line 123: postorderTraversal
(10) (8) (1) 
line 124: inorderTraversal
(1) (8) (10) 
line 125: clear
line 126: buildTree 2
(10) (4) 
line 127: inorderTraversal
(4) (10) 
line 128: nearestNeighbour (5)
(4) 
line 129: inorderTraversal
(4) (10) 
line 130: nearestNeighbour (9)
(10) 
line 131: inorderTraversal
(4) (10) 
line 132: remove (4)
line 133: inorderTraversal
(10) 
line 134: insert (1)
line 135: inorderTraversal
(1) (10) 
line 136: insert (9)
line 137: inorderTraversal
(1) (9) (10) 
line 138: kNearestNeighbour 10 (1)
(1) (9) (10) 
line 139: inorderTraversal
(1) (9) (10) 
line 140: remove (9)
line 141: inorderTraversal
(1) (10) 
line 142: nearestNeighbour (3)
(1) 
line 143: inorderTraversal
(1) (10) 
line 144: insert (3)
line 145: inorderTraversal
(1) (3) (10) 
line 146: kNearestNeighbour 7 (10)
(1) (3) (10) 
line 147: inorderTraversal
(1) (3) (10) 
line 148: nodeCount_height_leafCount
nodeCount=3;height=3;leafCount=1
line 149: inorderTraversal
(1) (3) (10) 
line 150: insert (3)
line 151: inorderTraversal
(1) (3) (3) (10) 
line 152: insert (9)
line 153: inorderTraversal
(1) (3) (3) (9) (10) 
line 154: insert (10)
line 155: inorderTraversal
(1) (3) (3) (9) (10) (10) 
line 156: insert (8)
line 157: inorderTraversal
(1) (3) (3) (8) (9) (10) (10) 
line 158: nearestNeighbour (5)
(3) 
line 159: inorderTraversal
(1) (3) (3) (8) (9) (10) (10) 
line 160: preorderTraversal
(10) (1) (3) (3) (9) (8) (10) 
line 161: inorderTraversal
(1) (3) (3) (8) (9) (10) (10) 
line 162: insert (6)
line 163: inorderTraversal
(1) (3) (3) (6) (8) (9) (10) (10) 
line 164: clear
line 165: buildTree 6
(3) (4) (9) (7) (1) (6) 
line 166: inorderTraversal
(1) (3) (4) (6) (7) (9) 
line 167: kNearestNeighbour 5 (10)
(3) (4) (6) (7) (9) 
line 168: inorderTraversal
(1) (3) (4) (6) (7) (9) 
line 169: clear
line 170: buildTree 12
(10) (6) (6) (7) (10) (6) (1) (8) (2) (4) (8) (4) 
line 171: inorderTraversal
(1) (2) (4) (4) (6) (6) (6) (7) (8) (8) (10) (10) 
line 172: search (10)
TRUE
line 173: inorderTraversal
(1) (2) (4) (4) (6) (6) (6) (7) (8) (8) (10) (10) 
line 174: search (6)
TRUE
line 175: inorderTraversal
(1) (2) (4) (4) (6) (6) (6) (7) (8) (8) (10) (10) 
line 176: nearestNeighbour (6)
(6) 
line 177: inorderTraversal
(1) (2) (4) (4) (6) (6) (6) (7) (8) (8) (10) (10) 
line 178: kNearestNeighbour 7 (3)
(1) (2) (4) (4) (6) (6) (6) 
line 179: inorderTraversal
(1) (2) (4) (4) (6) (6) (6) (7) (8) (8) (10) (10) 
line 180: kNearestNeighbour 3 (7)
(6) (6) (7) 
line 181: inorderTraversal
(1) (2) (4) (4) (6) (6) (6) (7) (8) (8) (10) (10) 
line 182: insert (9)
line 183: inorderTraversal
(1) (2) (4) (4) (6) (6) (6) (7) (8) (8) (9) (10) (10) 
line 184: kNearestNeighbour 3 (9)
(8) (9) (10) 
line 185: inorderTraversal
(1) (2) (4) (4) (6) (6) (6) (7) (8) (8) (9) (10) (10) 
line 186: nearestNeighbour (6)
(6) 
line 187: inorderTraversal
(1) (2) (4) (4) (6) (6) (6) (7) (8) (8) (9) (10) (10) 
line 188: nearestNeighbour (9)
(9) 
line 189: inorderTraversal
(1) (2) (4) (4) (6) (6) (6) (7) (8) (8) (9) (10) (10) 
line 190: insert (4)
line 191: inorderTraversal
(1) (2) (4) (4) (4) (6) (6) (6) (7) (8) (8) (9) (10) (10) 
line 192: kNearestNeighbour 6 (6)
(6) (6) (6) (7) (8) (8) 
line 193: inorderTraversal
(1) (2) (4) (4) (4) (6) (6) (6) (7) (8) (8) (9) (10) (10) 
line 194: insert (2)
line 195: inorderTraversal
(1) (2) (2) (4) (4) (4) (6) (6) (6) (7) (8) (8) (9) (10) (10) 
line 196: insert (1)
line 197: inorderTraversal
(1) (1) (2) (2) (4) (4) (4) (6) (6) (6) (7) (8) (8) (9) (10) (10) 
line 198: insert (5)
line 199: inorderTraversal
(1) (1) (2) (2) (4) (4) (4) (5) (6) (6) (6) (7) (8) (8) (9) (10) (10) 
line 200: nodeCount_height_leafCount
nodeCount=17;height=6;leafCount=6
line 201: inorderTraversal
(1) (1) (2) (2) (4) (4) (4) (5) (6) (6) (6) (7) (8) (8) (9) (10) (10) 
line 202: search (2)
TRUE
line 203: inorderTraversal
(1) (1) (2) (2) (4) (4) (4) (5) (6) (6) (6) (7) (8) (8) (9) (10) (10) 
line 204: remove (6)
line 205: inorderTraversal
(1) (1) (2) (2) (4) (4) (4) (5) (6) (6) (7) (8) (8) (9) (10) (10) 
line 206: kNearestNeighbour 8 (9)
(6) (6) (7) (8) (8) (9) (10) (10) 
line 207: inorderTraversal
(1) (1) (2) (2) (4) (4) (4) (5) (6) (6) (7) (8) (8) (9) (10) (10) 
line 208: remove (3)
line 209: inorderTraversal
(1) (1) (2) (2) (4) (4) (4) (5) (6) (6) (7) (8) (8) (9) (10) (10) 
line 210: remove (5)
line 211: inorderTraversal
(1) (1) (2) (2) (4) (4) (4) (6) (6) (7) (8) (8) (9) (10) (10) 
line 212: insert (9)
line 213: inorderTraversal
(1) (1) (2) (2) (4) (4) (4) (6) (6) (7) (8) (8) (9) (9) (10) (10) 
line 214: nearestNeighbour (2)
(2) 
line 215: inorderTraversal
(1) (1) (2) (2) (4) (4) (4) (6) (6) (7) (8) (8) (9) (9) (10) (10) 
line 216: clear
line 217: buildTree 9
(1) (8) (9) (1) (8) (9) (8) (5) (1) 
line 218: inorderTraversal
(1) (1) (1) (5) (8) (8) (8) (9) (9) 
line 219: kNearestNeighbour 1 (2)
(1) 
line 220: inorderTraversal
(1) (1) (1) (5) (8) (8) (8) (9) (9) 
line 221: insert (8)
line 222: inorderTraversal
(1) (1) (1) (5) (8) (8) (8) (8) (9) (9) 
line 223: insert (7)
line 224: inorderTraversal
(1) (1) (1) (5) (7) (8) (8) (8) (8) (9) (9) 
line 225: clear
line 226: buildTree 20
(1) (4) (10) (10) (2) (2) (8) (1) (8) (9) (8) (6) (9) (5) (5) (6) (1) (9) (2) (10) 
line 227: inorderTraversal
(1) (1) (1) (2) (2) (2) (4) (5) (5) (6) (6) (8) (8) (8) (9) (9) (9) (10) (10) (10) 
line 228: insert (1)
line 229: inorderTraversal
(1) (1) (1) (1) (2) (2) (2) (4) (5) (5) (6) (6) (8) (8) (8) (9) (9) (9) (10) (10) (10) 
line 230: nearestNeighbour (3)
(2) 
line 231: inorderTraversal
(1) (1) (1) (1) (2) (2) (2) (4) (5) (5) (6) (6) (8) (8) (8) (9) (9) (9) (10) (10) (10) 
line 232: kNearestNeighbour 4 (10)
(9) (10) (10) (10) 
line 233: inorderTraversal
(1) (1) (1) (1) (2) (2) (2) (4) (5) (5) (6) (6) (8) (8) (8) (9) (9) (9) (10) (10) (10) 
line 234: insert (1)
line 235: inorderTraversal
(1) (1) (1) (1) (1) (2) (2) (2) (4) (5) (5) (6) (6) (8) (8) (8) (9) (9) (9) (10) (10) (10) 
line 236: clear
line 237: buildTree 11
(7) (9) (5) (4) (1) (6) (7) (10) (3) (7) (7) 
line 238: inorderTraversal
(1) (3) (4) (5) (6) (7) (7) (7) (7) (9) (10) 
line 239: nearestNeighbour (9)
(9) 
line 240: inorderTraversal
(1) (3) (4) (5) (6) (7) (7) (7) (7) (9) (10) 
line 241: kNearestNeighbour 3 (3)
(1) (3) (4) 
line 242: inorderTraversal
(1) (3) (4) (5) (6) (7) (7) (7) (7) (9) (10) 
line 243: insert (2)
line 244: inorderTraversal
(1) (2) (3) (4) (5) (6) (7) (7) (7) (7) (9) (10) 
line 245: insert (9)
line 246: inorderTraversal
(1) (2) (3) (4) (5) (6) (7) (7) (7) (7) (9) (9) (10) 
line 247: postorderTraversal
(2) (3) (1) (6) (5) (4) (7) (9) (10) (9) (7) (7) (7) 
line 248: inorderTraversal
(1) (2) (3) (4) (5) (6) (7) (7) (7) (7) (9) (9) (10) 
line 249: nearestNeighbour (5)
(5) 
line 250: inorderTraversal
(1) (2) (3) (4) (5) (6) (7) (7) (7) (7) (9) (9) (10) 
line 251: insert (10)
line 252: inorderTraversal
(1) (2) (3) (4) (5) (6) (7) (7) (7) (7) (9) (9) (10) (10) 
line 253: nearestNeighbour (6)
(6) 
line 254: inorderTraversal
(1) (2) (3) (4) (5) (6) (7) (7) (7) (7) (9) (9) (10) (10) 
line 255: insert (10)
line 256: inorderTraversal
(1) (2) (3) (4) (5) (6) (7) (7) (7) (7) (9) (9) (10) (10) (10) 
line 257: remove (7)
line 258: inorderTraversal
(1) (2) (3) (4) (5) (6) (7) (7) (7) (9) (9) (10) (10) (10) 
line 259: nearestNeighbour (3)
(3) 
line 260: inorderTraversal
(1) (2) (3) (4) (5) (6) (7) (7) (7) (9) (9) (10) (10) (10) 
line 261: search (10)
TRUE
line 262: inorderTraversal
(1) (2) (3) (4) (5) (6) (7) (7) (7) (9) (9) (10) (10) (10) 
line 263: insert (10)
line 264: inorderTraversal
(1) (2) (3) (4) (5) (6) (7) (7) (7) (9) (9) (10) (10) (10) (10) 
line 265: nodeCount_height_leafCount
nodeCount=15;height=8;leafCount=4
line 266: inorderTraversal
(1) (2) (3) (4) (5) (6) (7) (7) (7) (9) (9) (10) (10) (10) (10) 
line 267: insert (3)
line 268: inorderTraversal
(1) (2) (3) (3) (4) (5) (6) (7) (7) (7) (9) (9) (10) (10) (10) (10) 
line 269: insert (8)
line 270: inorderTraversal
(1) (2) (3) (3) (4) (5) (6) (7) (7) (7) (8) (9) (9) (10) (10) (10) (10) 
line 271: insert (2)
line 272: inorderTraversal
(1) (2) (2) (3) (3) (4) (5) (6) (7) (7) (7) (8) (9) (9) (10) (10) (10) (10) 
line 273: nodeCount_height_leafCount
nodeCount=18;height=8;leafCount=6
line 274: inorderTraversal
(1) (2) (2) (3) (3) (4) (5) (6) (7) (7) (7) (8) (9) (9) (10) (10) (10) (10) 
line 275: insert (3)
line 276: inorderTraversal
(1) (2) (2) (3) (3) (3) (4) (5) (6) (7) (7) (7) (8) (9) (9) (10) (10) (10) (10) 
line 277: insert (9)
line 278: inorderTraversal
(1) (2) (2) (3) (3) (3) (4) (5) (6) (7) (7) (7) (8) (9) (9) (9) (10) (10) (10) (10) 
line 279: insert (8)
line 280: inorderTraversal
(1) (2) (2) (3) (3) (3) (4) (5) (6) (7) (7) (7) (8) (8) (9) (9) (9) (10) (10) (10) (10) 
line 281: preorderTraversal
(7) (4) (1) (3) (2) (2) (3) (3) (5) (6) (7) (7) (9) (8) (8) (10) (9) (9) (10) (10) (10) 
line 282: inorderTraversal
(1) (2) (2) (3) (3) (3) (4) (5) (6) (7) (7) (7) (8) (8) (9) (9) (9) (10) (10) (10) (10) 
line 283: remove (4)
line 284: inorderTraversal
(1) (2) (2) (3) (3) (3) (5) (6) (7) (7) (7) (8) (8) (9) (9) (9) (10) (10) (10) (10) 
line 285: nearestNeighbour (10)
(10) 
line 286: inorderTraversal
(1) (2) (2) (3) (3) (3) (5) (6) (7) (7) (7) (8) (8) (9) (9) (9) (10) (10) (10) (10) 
line 287: insert (2)
line 288: inorderTraversal
(1) (2) (2) (2) (3) (3) (3) (5) (6) (7) (7) (7) (8) (8) (9) (9) (9) (10) (10) (10) (10) 
line 289: search (6)
TRUE
line 290: inorderTraversal
(1) (2) (2) (2) (3) (3) (3) (5) (6) (7) (7) (7) (8) (8) (9) (9) (9) (10) (10) (10) (10) 
line 291: kNearestNeighbour 2 (5)
(5) (6) 
line 292: inorderTraversal
(1) (2) (2) (2) (3) (3) (3) (5) (6) (7) (7) (7) (8) (8) (9) (9) (9) (10) (10) (10) (10) 
line 293: clear
line 294: buildTree 16
(6) (4) (8) (3) (8) (3) (4) (4) (9) (9) (6) (1) (3) (10) (4) (7) 
line 295: inorderTraversal
(1) (3) (3) (3) (4) (4) (4) (4) (6) (6) (7) (8) (8) (9) (9) (10) 
line 296: insert (3)
line 297: inorderTraversal
(1) (3) (3) (3) (3) (4) (4) (4) (4) (6) (6) (7) (8) (8) (9) (9) (10) 
line 298: nearestNeighbour (8)
(8) 
line 299: inorderTraversal
(1) (3) (3) (3) (3) (4) (4) (4) (4) (6) (6) (7) (8) (8) (9) (9) (10) 
line 300: remove (8)
line 301: inorderTraversal
(1) (3) (3) (3) (3) (4) (4) (4) (4) (6) (6) (7) (8) (9) (9) (10) 
line 302: insert (3)
line 303: inorderTraversal
(1) (3) (3) (3) (3) (3) (4) (4) (4) (4) (6) (6) (7) (8) (9) (9) (10) 
line 304: insert (4)
line 305: inorderTraversal
(1) (3) (3) (3) (3) (3) (4) (4) (4) (4) (4) (6) (6) (7) (8) (9) (9) (10) 
line 306: kNearestNeighbour 1 (4)
(4) 
line 307: inorderTraversal
(1) (3) (3) (3) (3) (3) (4) (4) (4) (4) (4) (6) (6) (7) (8) (9) (9) (10) 
line 308: kNearestNeighbour 3 (3)
(3) (3) (3) 
line 309: inorderTraversal
(1) (3) (3) (3) (3) (3) (4) (4) (4) (4) (4) (6) (6) (7) (8) (9) (9) (10) 
line 310: kNearestNeighbour 1 (4)
(4) 
line 311: inorderTraversal
(1) (3) (3) (3) (3) (3) (4) (4) (4) (4) (4) (6) (6) (7) (8) (9) (9) (10) 
line 312: insert (9)
line 313: inorderTraversal
(1) (3) (3) (3) (3) (3) (4) (4) (4) (4) (4) (6) (6) (7) (8) (9) (9) (9) (10) 
line 314: nearestNeighbour (9)
(9) 
line 315: inorderTraversal
(1) (3) (3) (3) (3) (3) (4) (4) (4) (4) (4) (6) (6) (7) (8) (9) (9) (9) (10) 
line 316: insert (7)
line 317: inorderTraversal
(1) (3) (3) (3) (3) (3) (4) (4) (4) (4) (4) (6) (6) (7) (7) (8) (9) (9) (9) (10) 
line 318: insert (8)
line 319: inorderTraversal
(1) (3) (3) (3) (3) (3) (4) (4) (4) (4) (4) (6) (6) (7) (7) (8) (8) (9) (9) (9) (10) 
line 320: nearestNeighbour (3)
(3) 
line 321: inorderTraversal
(1) (3) (3) (3) (3) (3) (4) (4) (4) (4) (4) (6) (6) (7) (7) (8) (8) (9) (9) (9) (10) 
line 322: remove (4)
line 323: inorderTraversal
(1) (3) (3) (3) (3) (3) (4) (4) (4) (4) (6) (6) (7) (7) (8) (8) (9) (9) (9) (10) 
line 324: nearestNeighbour (3)
(3) 
line 325: inorderTraversal
(1) (3) (3) (3) (3) (3) (4) (4) (4) (4) (6) (6) (7) (7) (8) (8) (9) (9) (9) (10) 
line 326: insert (6)
line 327: inorderTraversal
(1) (3) (3) (3) (3) (3) (4) (4) (4) (4) (6) (6) (6) (7) (7) (8) (8) (9) (9) (9) (10) 
line 328: insert (9)
line 329: inorderTraversal
(1) (3) (3) (3) (3) (3) (4) (4) (4) (4) (6) (6) (6) (7) (7) (8) (8) (9) (9) (9) (9) (10) 
line 330: nearestNeighbour (3)
(3) 
line 331: inorderTraversal
(1) (3) (3) (3) (3) (3) (4) (4) (4) (4) (6) (6) (6) (7) (7) (8) (8) (9) (9) (9) (9) (10) 
line 332: clear
line 333: buildTree 8
(9) (5) (9) (1) (6) (2) (1) (1) 
line 334: inorderTraversal
(1) (1) (1) (2) (5) (6) (9) (9) 
line 335: insert (7)
line 336: inorderTraversal
(1) (1) (1) (2) (5) (6) (7) (9) (9) 
line 337: insert (10)
line 338: inorderTraversal
(1) (1) (1) (2) (5) (6) (7) (9) (9) (10) 
line 339: insert (8)
line 340: inorderTraversal
(1) (1) (1) (2) (5) (6) (7) (8) (9) (9) (10) 
line 341: postorderTraversal
(1) (1) (1) (5) (8) (7) (10) (9) (9) (6) (2) 
line 342: inorderTraversal
(1) (1) (1) (2) (5) (6) (7) (8) (9) (9) (10) 
line 343: nearestNeighbour (3)
(2) 
line 344: inorderTraversal
(1) (1) (1) (2) (5) (6) (7) (8) (9) (9) (10) 
line 345: clear
line 346: buildTree 16
(1) (9) (1) (2) (10) (2) (8) (2) (1) (10) (3) (2) (9) (1) (6) (8) 
line 347: inorderTraversal
(1) (1) (1) (1) (2) (2) (2) (2) (3) (6) (8) (8) (9) (9) (10) (10) 
line 348: insert (3)
line 349: inorderTraversal
(1) (1) (1) (1) (2) (2) (2) (2) (3) (3) (6) (8) (8) (9) (9) (10) (10) 
line 350: insert (7)
line 351: inorderTraversal
(1) (1) (1) (1) (2) (2) (2) (2) (3) (3) (6) (7) (8) (8) (9) (9) (10) (10) 
line 352: postorderTraversal
(1) (1) (1) (1) (2) (3) (7) (6) (3) (2) (2) (8) (9) (10) (10) (9) (8) (2) 
line 353: inorderTraversal
(1) (1) (1) (1) (2) (2) (2) (2) (3) (3) (6) (7) (8) (8) (9) (9) (10) (10) 
line 354: nearestNeighbour (10)
(10) 
line 355: inorderTraversal
(1) (1) (1) (1) (2) (2) (2) (2) (3) (3) (6) (7) (8) (8) (9) (9) (10) (10) 
line 356: clear
line 357: buildTree 15
(10) (4) (5) (7) (7) (8) (3) (3) (7) (10) (6) (10) (2) (1) (10) 
line 358: inorderTraversal
(1) (2) (3) (3) (4) (5) (6) (7) (7) (7) (8) (10) (10) (10) (10) 
line 359: nearestNeighbour (10)
(10) 
line 360: inorderTraversal
(1) (2) (3) (3) (4) (5) (6) (7) (7) (7) (8) (10) (10) (10) (10) 
line 361: kNearestNeighbour 8 (9)
(7) (7) (7) (8) (10) (10) (10) (10) 
line 362: inorderTraversal
(1) (2) (3) (3) (4) (5) (6) (7) (7) (7) (8) (10) (10) (10) (10) 
line 363: insert (3)
line 364: inorderTraversal
(1) (2) (3) (3) (3) (4) (5) (6) (7) (7) (7) (8) (10) (10) (10) (10) 
line 365: kNearestNeighbour 5 (1)
(1) (2) (3) (3) (3) 
line 366: inorderTraversal
(1) (2) (3) (3) (3) (4) (5) (6) (7) (7) (7) (8) (10) (10) (10) (10) 
line 367: remove (10)
line 368: inorderTraversal
(1) (2) (3) (3) (3) (4) (5) (6) (7) (7) (7) (8) (10) (10) (10) 
line 369: search (10)
TRUE
line 370: inorderTraversal
(1) (2) (3) (3) (3) (4) (5) (6) (7) (7) (7) (8) (10) (10) (10) 
line 371: insert (10)
line 372: inorderTraversal
(1) (2) (3) (3) (3) (4) (5) (6) (7) (7) (7) (8) (10) (10) (10) (10) 
line 373: insert (2)
line 374: inorderTraversal
(1) (2) (2) (3) (3) (3) (4) (5) (6) (7) (7) (7) (8) (10) (10) (10) (10) 
line 375: remove (10)
line 376: inorderTraversal
(1) (2) (2) (3) (3) (3) (4) (5) (6) (7) (7) (7) (8) (10) (10) (10) 
line 377: insert (6)
line 378: inorderTraversal
(1) (2) (2) (3) (3) (3) (4) (5) (6) (6) (7) (7) (7) (8) (10) (10) (10) 
line 379: insert (3)
line 380: inorderTraversal
(1) (2) (2) (3) (3) (3) (3) (4) (5) (6) (6) (7) (7) (7) (8) (10) (10) (10) 
line 381: postorderTraversal
(2) (2) (1) (3) (3) (3) (6) (6) (5) (4) (3) (8) (7) (7) (10) (10) (10) (7) 
line 382: inorderTraversal
(1) (2) (2) (3) (3) (3) (3) (4) (5) (6) (6) (7) (7) (7) (8) (10) (10) (10) 
line 383: clear
line 384: buildTree 9
(9) (2) (5) (5) (8) (9) (6) (4) (4) 
line 385: inorderTraversal
(2) (4) (4) (5) (5) (6) (8) (9) (9) 
line 386: remove (4)
line 387: inorderTraversal
(2) (4) (5) (5) (6) (8) (9) (9) 
line 388: insert (2)
line 389: inorderTraversal
(2) (2) (4) (5) (5) (6) (8) (9) (9) 
line 390: remove (5)
line 391: inorderTraversal
(2) (2) (4) (5) (6) (8) (9) (9) 
line 392: search (2)
TRUE
line 393: inorderTraversal
(2) (2) (4) (5) (6) (8) (9) (9) 
line 394: kNearestNeighbour 4 (5)
(4) (5) (6) (8) 
line 395: inorderTraversal
(2) (2) (4) (5) (6) (8) (9) (9) 
line 396: nearestNeighbour (5)
(5) 
line 397: inorderTraversal
(2) (2) (4) (5) (6) (8) (9) (9) 
line 398: insert (6)
line 399: inorderTraversal
(2) (2) (4) (5) (6) (6) (8) (9) (9) 
line 400: remove (5)
line 401: inorderTraversal
(2) (2) (4) (6) (6) (8) (9) (9) 
line 402: insert (6)
line 403: inorderTraversal
(2) (2) (4) (6) (6) (6) (8) (9) (9) 
line 404: remove (5)
line 405: inorderTraversal
(2) (2) (4) (6) (6) (6) (8) (9) (9) 
line 406: nearestNeighbour (9)
(9) 
line 407: inorderTraversal
(2) (2) (4) (6) (6) (6) (8) (9) (9) 
line 408: preorderTraversal
(6) (4) (2) (2) (8) (6) (6) (9) (9) 
line 409: inorderTraversal
(2) (2) (4) (6) (6) (6) (8) (9) (9) 
line 410: clear
line 411: buildTree 6
(8) (2) (5) (6) (6) (1) 
line 412: inorderTraversal
(1) (2) (5) (6) (6) (8) 
line 413: nearestNeighbour (5)
(5) 
line 414: inorderTraversal
(1) (2) (5) (6) (6) (8) 
line 415: remove (1)
line 416: inorderTraversal
(2) (5) (6) (6) (8) 
line 417: kNearestNeighbour 3 (1)
(2) (5) (6) 
line 418: inorderTraversal
(2) (5) (6) (6) (8) 
line 419: nodeCount_height_leafCount
nodeCount=5;height=4;leafCount=2
line 420: inorderTraversal
(2) (5) (6) (6) (8) 
line 421: preorderTraversal
(5) (2) (6) (6) (8) 
line 422: postorderTraversal
(2) (8) (6) (6) (5) 
line 423: clear
