line 1: k=1
line 2: nearestNeighbour (6)

line 3: inorderTraversal

line 4: remove (9)
line 5: inorderTraversal

line 6: remove (8)
line 7: inorderTraversal

line 8: kNearestNeighbour 1 (7)

line 9: inorderTraversal

line 10: insert (5)
line 11: inorderTraversal
(5) 
line 12: insert (3)
line 13: inorderTraversal
(3) (5) 
line 14: insert (9)
line 15: inorderTraversal
(3) (5) (9) 
line 16: nearestNeighbour (2)
(3) 
line 17: inorderTraversal
(3) (5) (9) 
line 18: postorderTraversal
(3) (9) (5) 
line 19: inorderTraversal
(3) (5) (9) 
line 20: kNearestNeighbour 2 (5)
(3) (5) 
line 21: inorderTraversal
(3) (5) (9) 
line 22: insert (9)
line 23: inorderTraversal
(3) (5) (9) (9) 
line 24: remove (3)
line 25: inorderTraversal
(5) (9) (9) 
line 26: clear
line 27: buildTree 19
(10) (6) (7) (5) (6) (9) (2) (10) (7) (10) (5) (7) (5) (7) (3) (4) (7) (9) (2) 
line 28: inorderTraversal
(2) (2) (3) (4) (5) (5) (5) (6) (6) (7) (7) (7) (7) (7) (9) (9) (10) (10) (10) 
line 29: insert (2)
line 30: inorderTraversal
(2) (2) (2) (3) (4) (5) (5) (5) (6) (6) (7) (7) (7) (7) (7) (9) (9) (10) (10) (10) 
line 31: insert (5)
line 32: inorderTraversal
(2) (2) (2) (3) (4) (5) (5) (5) (5) (6) (6) (7) (7) (7) (7) (7) (9) (9) (10) (10) (10) 
line 33: clear
line 34: buildTree 4
(4) (1) (8) (2) 
line 35: inorderTraversal
(1) (2) (4) (8) 
line 36: search (8)
TRUE
line 37: inorderTraversal
(1) (2) (4) (8) 
line 38: insert (4)
line 39: inorderTraversal
(1) (2) (4) (4) (8) 
line 40: nearestNeighbour (6)
(4) 
line 41: inorderTraversal
(1) (2) (4) (4) (8) 
line 42: nearestNeighbour (8)
(8) 
line 43: inorderTraversal
(1) (2) (4) (4) (8) 
line 44: insert (6)
line 45: inorderTraversal
(1) (2) (4) (4) (6) (8) 
line 46: kNearestNeighbour 2 (7)
(6) (8) 
line 47: inorderTraversal
(1) (2) (4) (4) (6) (8) 
line 48: clear
line 49: buildTree 4
(7) (7) (2) (8) 
line 50: inorderTraversal
(2) (7) (7) (8) 
line 51: kNearestNeighbour 8 (10)
(2) (7) (7) (8) 
line 52: inorderTraversal
(2) (7) (7) (8) 
line 53: clear
line 54: buildTree 13
(4) (5) (9) (5) (9) (4) (8) (10) (6) (9) (1) (1) (7) 
line 55: inorderTraversal
(1) (1) (4) (4) (5) (5) (6) (7) (8) (9) (9) (9) (10) 
line 56: remove (8)
line 57: inorderTraversal
(1) (1) (4) (4) (5) (5) (6) (7) (9) (9) (9) (10) 
line 58: nearestNeighbour (6)
(6) 
line 59: inorderTraversal
(1) (1) (4) (4) (5) (5) (6) (7) (9) (9) (9) (10) 
line 60: nearestNeighbour (10)
(10) 
line 61: inorderTraversal
(1) (1) (4) (4) (5) (5) (6) (7) (9) (9) (9) (10) 
line 62: kNearestNeighbour 1 (7)
(7) 
line 63: inorderTraversal
(1) (1) (4) (4) (5) (5) (6) (7) (9) (9) (9) (10) 
line 64: kNearestNeighbour 4 (8)
(7) (9) (9) (9) 
line 65: inorderTraversal
(1) (1) (4) (4) (5) (5) (6) (7) (9) (9) (9) (10) 
line 66: insert (4)
line 67: inorderTraversal
(1) (1) (4) (4) (4) (5) (5) (6) (7) (9) (9) (9) (10) 
line 68: kNearestNeighbour 2 (2)
(1) (1) 
line 69: inorderTraversal
(1) (1) (4) (4) (4) (5) (5) (6) (7) (9) (9) (9) (10) 
line 70: nodeCount_height_leafCount
nodeCount=13;height=5;leafCount=5
line 71: inorderTraversal
(1) (1) (4) (4) (4) (5) (5) (6) (7) (9) (9) (9) (10) 
line 72: search (1)
TRUE
line 73: inorderTraversal
(1) (1) (4) (4) (4) (5) (5) (6) (7) (9) (9) (9) (10) 
line 74: nearestNeighbour (7)
(7) 
line 75: inorderTraversal
(1) (1) (4) (4) (4) (5) (5) (6) (7) (9) (9) (9) (10) 
line 76: insert (3)
line 77: inorderTraversal
(1) (1) (3) (4) (4) (4) (5) (5) (6) (7) (9) (9) (9) (10) 
line 78: remove (5)
line 79: inorderTraversal
(1) (1) (3) (4) (4) (4) (5) (6) (7) (9) (9) (9) (10) 
line 80: clear
line 81: buildTree 6
(5) (10) (1) (2) (7) (10) 
line 82: inorderTraversal
(1) (2) (5) (7) (10) (10) 
line 83: remove (10)
line 84: inorderTraversal
(1) (2) (5) (7) (10) 
line 85: kNearestNeighbour 10 (5)
(1) (2) (5) (7) (10) 
line 86: inorderTraversal
(1) (2) (5) (7) (10) 
line 87: postorderTraversal
(2) (1) (7) (10) (5) 
line 88: inorderTraversal
(1) (2) (5) (7) (10) 
line 89: insert (1)
line 90: inorderTraversal
(1) (1) (2) (5) (7) (10) 
line 91: nearestNeighbour (7)
(7) 
line 92: inorderTraversal
(1) (1) (2) (5) (7) (10) 
line 93: clear
line 94: buildTree 5
(6) (3) (8) (8) (5) 
line 95: inorderTraversal
(3) (5) (6) (8) (8) 
line 96: insert (7)
line 97: inorderTraversal
(3) (5) (6) (7) (8) (8) 
line 98: search (8)
TRUE
line 99: inorderTraversal
(3) (5) (6) (7) (8) (8) 
line 100: nodeCount_height_leafCount
nodeCount=6;height=3;leafCount=3
line 101: inorderTraversal
(3) (5) (6) (7) (8) (8) 
line 102: kNearestNeighbour 3 (2)
(3) (5) (6) 
line 103: inorderTraversal
(3) (5) (6) (7) (8) (8) 
line 104: kNearestNeighbour 7 (6)
(3) (5) (6) (7) (8) (8) 
line 105: inorderTraversal
(3) (5) (6) (7) (8) (8) 
line 106: remove (8)
line 107: inorderTraversal
(3) (5) (6) (7) (8) 
line 108: insert (9)
line 109: inorderTraversal
(3) (5) (6) (7) (8) (9) 
line 110: insert (6)
line 111: inorderTraversal
(3) (5) (6) (6) (7) (8) (9) 
line 112: nearestNeighbour (8)
(8) 
line 113: inorderTraversal
(3) (5) (6) (6) (7) (8) (9) 
line 114: remove (8)
line 115: inorderTraversal
(3) (5) (6) (6) (7) (9) 
line 116: nearestNeighbour (10)
(9) 
line 117: inorderTraversal
(3) (5) (6) (6) (7) (9) 
line 118: nearestNeighbour (5)
(5) 
line 119: inorderTraversal
(3) (5) (6) (6) (7) (9) 
line 120: insert (3)
line 121: inorderTraversal
(3) (3) (5) (6) (6) (7) (9) 
line 122: clear
line 123: buildTree 3
(9) (6) (7) 
line 124: inorderTraversal
(6) (7) (9) 
line 125: insert (3)
line 126: inorderTraversal
(3) (6) (7) (9) 
line 127: insert (8)
line 128: inorderTraversal
(3) (6) (7) (8) (9) 
line 129: clear
line 130: buildTree 6
(7) (10) (6) (2) (10) (10) 
line 131: inorderTraversal
(2) (6) (7) (10) (10) (10) 
line 132: clear
line 133: buildTree 13
(3) (10) (3) (9) (7) (1) (1) (5) (2) (6) (8) (10) (2) 
line 134: inorderTraversal
(1) (1) (2) (2) (3) (3) (5) (6) (7) (8) (9) (10) (10) 
line 135: clear
line 136: buildTree 12
(10) (9) (6) (10) (4) (9) (9) (1) (3) (8) (3) (2) 
line 137: inorderTraversal
(1) (2) (3) (3) (4) (6) (8) (9) (9) (9) (10) (10) 
line 138: insert (6)
line 139: inorderTraversal
(1) (2) (3) (3) (4) (6) (6) (8) (9) (9) (9) (10) (10) 
line 140: search (8)
TRUE
line 141: inorderTraversal
(1) (2) (3) (3) (4) (6) (6) (8) (9) (9) (9) (10) (10) 
line 142: kNearestNeighbour 3 (9)
(9) (9) (9) 
line 143: inorderTraversal
(1) (2) (3) (3) (4) (6) (6) (8) (9) (9) (9) (10) (10) 
line 144: nearestNeighbour (5)
(4) 
line 145: inorderTraversal
(1) (2) (3) (3) (4) (6) (6) (8) (9) (9) (9) (10) (10) 
line 146: nearestNeighbour (9)
(9) 
line 147: inorderTraversal
(1) (2) (3) (3) (4) (6) (6) (8) (9) (9) (9) (10) (10) 
line 148: nearestNeighbour (5)
(4) 
line 149: inorderTraversal
(1) (2) (3) (3) (4) (6) (6) (8) (9) (9) (9) (10) (10) 
line 150: remove (1)
line 151: inorderTraversal
(2) (3) (3) (4) (6) (6) (8) (9) (9) (9) (10) (10) 
line 152: nodeCount_height_leafCount
nodeCount=12;height=5;leafCount=5
line 153: inorderTraversal
(2) (3) (3) (4) (6) (6) (8) (9) (9) (9) (10) (10) 
line 154: nearestNeighbour (6)
(6) 
line 155: inorderTraversal
(2) (3) (3) (4) (6) (6) (8) (9) (9) (9) (10) (10) 
line 156: kNearestNeighbour 6 (9)
(8) (9) (9) (9) (10) (10) 
line 157: inorderTraversal
(2) (3) (3) (4) (6) (6) (8) (9) (9) (9) (10) (10) 
line 158: insert (9)
line 159: inorderTraversal
(2) (3) (3) (4) (6) (6) (8) (9) (9) (9) (9) (10) (10) 
line 160: remove (4)
line 161: inorderTraversal
(2) (3) (3) (6) (6) (8) (9) (9) (9) (9) (10) (10) 
line 162: remove (9)
line 163: inorderTraversal
(2) (3) (3) (6) (6) (8) (9) (9) (9) (10) (10) 
line 164: insert (9)
line 165: inorderTraversal
(2) (3) (3) (6) (6) (8) (9) (9) (9) (9) (10) (10) 
line 166: search (9)
TRUE
line 167: inorderTraversal
(2) (3) (3) (6) (6) (8) (9) (9) (9) (9) (10) (10) 
line 168: kNearestNeighbour 10 (9)
(3) (6) (6) (8) (9) (9) (9) (9) (10) (10) 
line 169: inorderTraversal
(2) (3) (3) (6) (6) (8) (9) (9) (9) (9) (10) (10) 
line 170: kNearestNeighbour 9 (9)
(6) (6) (8) (9) (9) (9) (9) (10) (10) 
line 171: inorderTraversal
(2) (3) (3) (6) (6) (8) (9) (9) (9) (9) (10) (10) 
line 172: kNearestNeighbour 3 (8)
(8) (9) (9) 
line 173: inorderTraversal
(2) (3) (3) (6) (6) (8) (9) (9) (9) (9) (10) (10) 
line 174: kNearestNeighbour 5 (6)
(6) (6) (8) (9) (9) 
line 175: inorderTraversal
(2) (3) (3) (6) (6) (8) (9) (9) (9) (9) (10) (10) 
line 176: insert (8)
line 177: inorderTraversal
(2) (3) (3) (6) (6) (8) (8) (9) (9) (9) (9) (10) (10) 
line 178: postorderTraversal
(2) (3) (3) (6) (8) (8) (9) (9) (10) (10) (9) (9) (6) 
line 179: inorderTraversal
(2) (3) (3) (6) (6) (8) (8) (9) (9) (9) (9) (10) (10) 
line 180: kNearestNeighbour 4 (2)
(2) (3) (3) (6) 
line 181: inorderTraversal
(2) (3) (3) (6) (6) (8) (8) (9) (9) (9) (9) (10) (10) 
line 182: postorderTraversal
(2) (3) (3) (6) (8) (8) (9) (9) (10) (10) (9) (9) (6) 
line 183: inorderTraversal
(2) (3) (3) (6) (6) (8) (8) (9) (9) (9) (9) (10) (10) 
line 184: remove (8)
line 185: inorderTraversal
(2) (3) (3) (6) (6) (8) (9) (9) (9) (9) (10) (10) 
line 186: insert (9)
line 187: inorderTraversal
(2) (3) (3) (6) (6) (8) (9) (9) (9) (9) (9) (10) (10) 
line 188: insert (10)
line 189: inorderTraversal
(2) (3) (3) (6) (6) (8) (9) (9) (9) (9) (9) (10) (10) (10) 
line 190: search (9)
TRUE
line 191: inorderTraversal
(2) (3) (3) (6) (6) (8) (9) (9) (9) (9) (9) (10) (10) (10) 
line 192: remove (3)
line 193: inorderTraversal
(2) (3) (6) (6) (8) (9) (9) (9) (9) (9) (10) (10) (10) 
line 194: insert (9)
line 195: inorderTraversal
(2) (3) (6) (6) (8) (9) (9) (9) (9) (9) (9) (10) (10) (10) 
line 196: search (4)
FALSE
line 197: inorderTraversal
(2) (3) (6) (6) (8) (9) (9) (9) (9) (9) (9) (10) (10) (10) 
line 198: nearestNeighbour (5)
(6) 
line 199: inorderTraversal
(2) (3) (6) (6) (8) (9) (9) (9) (9) (9) (9) (10) (10) (10) 
line 200: kNearestNeighbour 7 (4)
(2) (3) (6) (6) (8) (9) (9) 
line 201: inorderTraversal
(2) (3) (6) (6) (8) (9) (9) (9) (9) (9) (9) (10) (10) (10) 
line 202: insert (6)
line 203: inorderTraversal
(2) (3) (6) (6) (6) (8) (9) (9) (9) (9) (9) (9) (10) (10) (10) 
line 204: remove (9)
line 205: inorderTraversal
(2) (3) (6) (6) (6) (8) (9) (9) (9) (9) (9) (10) (10) (10) 
line 206: insert (7)
line 207: inorderTraversal
(2) (3) (6) (6) (6) (7) (8) (9) (9) (9) (9) (9) (10) (10) (10) 
line 208: nearestNeighbour (6)
(6) 
line 209: inorderTraversal
(2) (3) (6) (6) (6) (7) (8) (9) (9) (9) (9) (9) (10) (10) (10) 
line 210: insert (6)
line 211: inorderTraversal
(2) (3) (6) (6) (6) (6) (7) (8) (9) (9) (9) (9) (9) (10) (10) (10) 
line 212: kNearestNeighbour 7 (8)
(7) (8) (9) (9) (9) (9) (9) 
line 213: inorderTraversal
(2) (3) (6) (6) (6) (6) (7) (8) (9) (9) (9) (9) (9) (10) (10) (10) 
line 214: insert (9)
line 215: inorderTraversal
(2) (3) (6) (6) (6) (6) (7) (8) (9) (9) (9) (9) (9) (9) (10) (10) (10) 
line 216: postorderTraversal
(2) (3) (6) (7) (6) (6) (8) (9) (9) (9) (9) (10) (10) (10) (9) (9) (6) 
line 217: inorderTraversal
(2) (3) (6) (6) (6) (6) (7) (8) (9) (9) (9) (9) (9) (9) (10) (10) (10) 
line 218: postorderTraversal
(2) (3) (6) (7) (6) (6) (8) (9) (9) (9) (9) (10) (10) (10) (9) (9) (6) 
line 219: inorderTraversal
(2) (3) (6) (6) (6) (6) (7) (8) (9) (9) (9) (9) (9) (9) (10) (10) (10) 
line 220: kNearestNeighbour 2 (1)
(2) (3) 
line 221: inorderTraversal
(2) (3) (6) (6) (6) (6) (7) (8) (9) (9) (9) (9) (9) (9) (10) (10) (10) 
line 222: insert (6)
line 223: inorderTraversal
(2) (3) (6) (6) (6) (6) (6) (7) (8) (9) (9) (9) (9) (9) (9) (10) (10) (10) 
line 224: remove (6)
line 225: inorderTraversal
(2) (3) (6) (6) (6) (6) (7) (8) (9) (9) (9) (9) (9) (9) (10) (10) (10) 
line 226: insert (9)
line 227: inorderTraversal
(2) (3) (6) (6) (6) (6) (7) (8) (9) (9) (9) (9) (9) (9) (9) (10) (10) (10) 
line 228: insert (4)
line 229: inorderTraversal
(2) (3) (4) (6) (6) (6) (6) (7) (8) (9) (9) (9) (9) (9) (9) (9) (10) (10) (10) 
line 230: postorderTraversal
(2) (4) (3) (6) (7) (6) (6) (8) (9) (9) (9) (9) (9) (10) (10) (10) (9) (9) (6) 
line 231: inorderTraversal
(2) (3) (4) (6) (6) (6) (6) (7) (8) (9) (9) (9) (9) (9) (9) (9) (10) (10) (10) 
line 232: clear
line 233: buildTree 17
(3) (1) (3) (3) (2) (10) (3) (10) (9) (1) (4) (3) (2) (10) (4) (8) (4) 
line 234: inorderTraversal
(1) (1) (2) (2) (3) (3) (3) (3) (3) (4) (4) (4) (8) (9) (10) (10) (10) 
line 235: clear
line 236: buildTree 2
(8) (4) 
line 237: inorderTraversal
(4) (8) 
line 238: remove (4)
line 239: inorderTraversal
(8) 
line 240: clear
line 241: buildTree 3
(8) (3) (10) 
line 242: inorderTraversal
(3) (8) (10) 
line 243: insert (5)
line 244: inorderTraversal
(3) (5) (8) (10) 
line 245: insert (10)
line 246: inorderTraversal
(3) (5) (8) (10) (10) 
line 247: remove (3)
line 248: inorderTraversal
(5) (8) (10) (10) 
line 249: nearestNeighbour (4)
(5) 
line 250: inorderTraversal
(5) (8) (10) (10) 
line 251: nearestNeighbour (8)
(8) 
line 252: inorderTraversal
(5) (8) (10) (10) 
line 253: clear
line 254: buildTree 8
(8) (2) (5) (2) (7) (10) (3) (2) 
line 255: inorderTraversal
(2) (2) (2) (3) (5) (7) (8) (10) 
line 256: insert (4)
line 257: inorderTraversal
(2) (2) (2) (3) (4) (5) (7) (8) (10) 
line 258: kNearestNeighbour 3 (6)
(4) (5) (7) 
line 259: inorderTraversal
(2) (2) (2) (3) (4) (5) (7) (8) (10) 
line 260: remove (8)
line 261: inorderTraversal
(2) (2) (2) (3) (4) (5) (7) (10) 
line 262: remove (6)
line 263: inorderTraversal
(2) (2) (2) (3) (4) (5) (7) (10) 
line 264: nearestNeighbour (8)
(7) 
line 265: inorderTraversal
(2) (2) (2) (3) (4) (5) (7) (10) 
line 266: insert (8)
line 267: inorderTraversal
(2) (2) (2) (3) (4) (5) (7) (8) (10) 
line 268: nearestNeighbour (3)
(3) 
line 269: inorderTraversal
(2) (2) (2) (3) (4) (5) (7) (8) (10) 
line 270: kNearestNeighbour 6 (3)
(2) (2) (2) (3) (4) (5) 
line 271: inorderTraversal
(2) (2) (2) (3) (4) (5) (7) (8) (10) 
line 272: insert (4)
line 273: inorderTraversal
(2) (2) (2) (3) (4) (4) (5) (7) (8) (10) 
line 274: insert (2)
line 275: inorderTraversal
(2) (2) (2) (2) (3) (4) (4) (5) (7) (8) (10) 
line 276: nearestNeighbour (6)
(5) 
line 277: inorderTraversal
(2) (2) (2) (2) (3) (4) (4) (5) (7) (8) (10) 
line 278: insert (4)
line 279: inorderTraversal
(2) (2) (2) (2) (3) (4) (4) (4) (5) (7) (8) (10) 
line 280: kNearestNeighbour 3 (7)
(5) (7) (8) 
line 281: inorderTraversal
(2) (2) (2) (2) (3) (4) (4) (4) (5) (7) (8) (10) 
line 282: insert (1)
line 283: inorderTraversal
(1) (2) (2) (2) (2) (3) (4) (4) (4) (5) (7) (8) (10) 
line 284: insert (6)
line 285: inorderTraversal
(1) (2) (2) (2) (2) (3) (4) (4) (4) (5) (6) (7) (8) (10) 
line 286: remove (2)
line 287: inorderTraversal
(1) (2) (2) (2) (3) (4) (4) (4) (5) (6) (7) (8) (10) 
line 288: search (5)
TRUE
line 289: inorderTraversal
(1) (2) (2) (2) (3) (4) (4) (4) (5) (6) (7) (8) (10) 
line 290: insert (2)
line 291: inorderTraversal
(1) (2) (2) (2) (2) (3) (4) (4) (4) (5) (6) (7) (8) (10) 
line 292: insert (1)
line 293: inorderTraversal
(1) (1) (2) (2) (2) (2) (3) (4) (4) (4) (5) (6) (7) (8) (10) 
line 294: kNearestNeighbour 9 (4)
(2) (2) (2) (3) (4) (4) (4) (5) (6) 
line 295: inorderTraversal
(1) (1) (2) (2) (2) (2) (3) (4) (4) (4) (5) (6) (7) (8) (10) 
line 296: insert (7)
line 297: inorderTraversal
(1) (1) (2) (2) (2) (2) (3) (4) (4) (4) (5) (6) (7) (7) (8) (10) 
line 298: insert (1)
line 299: inorderTraversal
(1) (1) (1) (2) (2) (2) (2) (3) (4) (4) (4) (5) (6) (7) (7) (8) (10) 
line 300: remove (10)
line 301: inorderTraversal
(1) (1) (1) (2) (2) (2) (2) (3) (4) (4) (4) (5) (6) (7) (7) (8) 
line 302: nearestNeighbour (8)
(8) 
line 303: inorderTraversal
(1) (1) (1) (2) (2) (2) (2) (3) (4) (4) (4) (5) (6) (7) (7) (8) 
line 304: insert (8)
line 305: inorderTraversal
(1) (1) (1) (2) (2) (2) (2) (3) (4) (4) (4) (5) (6) (7) (7) (8) (8) 
line 306: insert (6)
line 307: inorderTraversal
(1) (1) (1) (2) (2) (2) (2) (3) (4) (4) (4) (5) (6) (6) (7) (7) (8) (8) 
line 308: nearestNeighbour (5)
(5) 
line 309: inorderTraversal
(1) (1) (1) (2) (2) (2) (2) (3) (4) (4) (4) (5) (6) (6) (7) (7) (8) (8) 
line 310: nodeCount_height_leafCount
nodeCount=18;height=6;leafCount=5
line 311: inorderTraversal
(1) (1) (1) (2) (2) (2) (2) (3) (4) (4) (4) (5) (6) (6) (7) (7) (8) (8) 
line 312: remove (3)
line 313: inorderTraversal
(1) (1) (1) (2) (2) (2) (2) (4) (4) (4) (5) (6) (6) (7) (7) (8) (8) 
line 314: clear
line 315: buildTree 6
(7) (9) (6) (7) (3) (3) 
line 316: inorderTraversal
(3) (3) (6) (7) (7) (9) 
line 317: search (6)
TRUE
line 318: inorderTraversal
(3) (3) (6) (7) (7) (9) 
line 319: nearestNeighbour (4)
(3) 
line 320: inorderTraversal
(3) (3) (6) (7) (7) (9) 
line 321: nearestNeighbour (4)
(3) 
line 322: inorderTraversal
(3) (3) (6) (7) (7) (9) 
line 323: kNearestNeighbour 5 (9)
(3) (6) (7) (7) (9) 
line 324: inorderTraversal
(3) (3) (6) (7) (7) (9) 
line 325: kNearestNeighbour 7 (3)
(3) (3) (6) (7) (7) (9) 
line 326: inorderTraversal
(3) (3) (6) (7) (7) (9) 
line 327: insert (2)
line 328: inorderTraversal
(2) (3) (3) (6) (7) (7) (9) 
line 329: nearestNeighbour (10)
(9) 
line 330: inorderTraversal
(2) (3) (3) (6) (7) (7) (9) 
line 331: insert (9)
line 332: inorderTraversal
(2) (3) (3) (6) (7) (7) (9) (9) 
line 333: nearestNeighbour (10)
(9) 
line 334: inorderTraversal
(2) (3) (3) (6) (7) (7) (9) (9) 
line 335: nearestNeighbour (3)
(3) 
line 336: inorderTraversal
(2) (3) (3) (6) (7) (7) (9) (9) 
line 337: nearestNeighbour (5)
(6) 
line 338: inorderTraversal
(2) (3) (3) (6) (7) (7) (9) (9) 
line 339: insert (4)
line 340: inorderTraversal
(2) (3) (3) (4) (6) (7) (7) (9) (9) 
line 341: nodeCount_height_leafCount
nodeCount=9;height=5;leafCount=3
line 342: inorderTraversal
(2) (3) (3) (4) (6) (7) (7) (9) (9) 
line 343: nearestNeighbour (7)
(7) 
line 344: inorderTraversal
(2) (3) (3) (4) (6) (7) (7) (9) (9) 
line 345: kNearestNeighbour 3 (3)
(3) (3) (4) 
line 346: inorderTraversal
(2) (3) (3) (4) (6) (7) (7) (9) (9) 
line 347: insert (10)
line 348: inorderTraversal
(2) (3) (3) (4) (6) (7) (7) (9) (9) (10) 
line 349: insert (6)
line 350: inorderTraversal
(2) (3) (3) (4) (6) (6) (7) (7) (9) (9) (10) 
line 351: nodeCount_height_leafCount
nodeCount=11;height=6;leafCount=4
line 352: inorderTraversal
(2) (3) (3) (4) (6) (6) (7) (7) (9) (9) (10) 
line 353: clear
line 354: buildTree 5
(3) (10) (10) (2) (1) 
line 355: inorderTraversal
(1) (2) (3) (10) (10) 
line 356: insert (4)
line 357: inorderTraversal
(1) (2) (3) (4) (10) (10) 
line 358: remove (2)
line 359: inorderTraversal
(1) (3) (4) (10) (10) 
line 360: clear
line 361: buildTree 2
(7) (2) 
line 362: inorderTraversal
(2) (7) 
line 363: insert (2)
line 364: inorderTraversal
(2) (2) (7) 
line 365: kNearestNeighbour 10 (1)
(2) (2) (7) 
line 366: inorderTraversal
(2) (2) (7) 
line 367: insert (3)
line 368: inorderTraversal
(2) (2) (3) (7) 
line 369: insert (4)
line 370: inorderTraversal
(2) (2) (3) (4) (7) 
line 371: insert (8)
line 372: inorderTraversal
(2) (2) (3) (4) (7) (8) 
line 373: insert (4)
line 374: inorderTraversal
(2) (2) (3) (4) (4) (7) (8) 
line 375: clear
line 376: buildTree 11
(6) (2) (8) (7) (8) (5) (3) (7) (10) (2) (5) 
line 377: inorderTraversal
(2) (2) (3) (5) (5) (6) (7) (7) (8) (8) (10) 
line 378: clear
line 379: buildTree 14
(7) (3) (2) (7) (3) (6) (2) (5) (5) (5) (5) (7) (8) (2) 
line 380: inorderTraversal
(2) (2) (2) (3) (3) (5) (5) (5) (5) (6) (7) (7) (7) (8) 
line 381: insert (1)
line 382: inorderTraversal
(1) (2) (2) (2) (3) (3) (5) (5) (5) (5) (6) (7) (7) (7) (8) 
line 383: nearestNeighbour (4)
(3) 
line 384: inorderTraversal
(1) (2) (2) (2) (3) (3) (5) (5) (5) (5) (6) (7) (7) (7) (8) 
line 385: insert (7)
line 386: inorderTraversal
(1) (2) (2) (2) (3) (3) (5) (5) (5) (5) (6) (7) (7) (7) (7) (8) 
line 387: search (5)
TRUE
line 388: inorderTraversal
(1) (2) (2) (2) (3) (3) (5) (5) (5) (5) (6) (7) (7) (7) (7) (8) 
line 389: clear
line 390: buildTree 10
(3) (1) (10) (5) (5) (7) (9) (6) (1) (7) 
line 391: inorderTraversal
(1) (1) (3) (5) (5) (6) (7) (7) (9) (10) 
line 392: insert (2)
line 393: inorderTraversal
(1) (1) (2) (3) (5) (5) (6) (7) (7) (9) (10) 
line 394: nearestNeighbour (7)
(7) 
line 395: inorderTraversal
(1) (1) (2) (3) (5) (5) (6) (7) (7) (9) (10) 
line 396: nearestNeighbour (3)
(3) 
line 397: inorderTraversal
(1) (1) (2) (3) (5) (5) (6) (7) (7) (9) (10) 
line 398: insert (3)
line 399: inorderTraversal
(1) (1) (2) (3) (3) (5) (5) (6) (7) (7) (9) (10) 
line 400: insert (9)
line 401: inorderTraversal
(1) (1) (2) (3) (3) (5) (5) (6) (7) (7) (9) (9) (10) 
line 402: nearestNeighbour (8)
(7) 
line 403: inorderTraversal
(1) (1) (2) (3) (3) (5) (5) (6) (7) (7) (9) (9) (10) 
line 404: insert (2)
line 405: inorderTraversal
(1) (1) (2) (2) (3) (3) (5) (5) (6) (7) (7) (9) (9) (10) 
line 406: nearestNeighbour (9)
(9) 
line 407: inorderTraversal
(1) (1) (2) (2) (3) (3) (5) (5) (6) (7) (7) (9) (9) (10) 
line 408: clear
line 409: buildTree 8
(7) (10) (1) (1) (9) (4) (8) (4) 
line 410: inorderTraversal
(1) (1) (4) (4) (7) (8) (9) (10) 
line 411: insert (6)
line 412: inorderTraversal
(1) (1) (4) (4) (6) (7) (8) (9) (10) 
line 413: nearestNeighbour (1)
(1) 
line 414: inorderTraversal
(1) (1) (4) (4) (6) (7) (8) (9) (10) 
line 415: preorderTraversal
(4) (1) (1) (8) (4) (7) (6) (9) (10) 
line 416: inorderTraversal
(1) (1) (4) (4) (6) (7) (8) (9) (10) 
line 417: insert (5)
line 418: inorderTraversal
(1) (1) (4) (4) (5) (6) (7) (8) (9) (10) 
line 419: remove (1)
line 420: inorderTraversal
(1) (4) (4) (5) (6) (7) (8) (9) (10) 
line 421: insert (2)
line 422: inorderTraversal
(1) (2) (4) (4) (5) (6) (7) (8) (9) (10) 
line 423: nodeCount_height_leafCount
nodeCount=10;height=6;leafCount=3
line 424: inorderTraversal
(1) (2) (4) (4) (5) (6) (7) (8) (9) (10) 
line 425: preorderTraversal
(4) (1) (2) (8) (4) (7) (6) (5) (9) (10) 
line 426: postorderTraversal
(2) (1) (5) (6) (7) (4) (10) (9) (8) (4) 
line 427: clear
