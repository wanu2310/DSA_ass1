line 1: k=1
line 2: remove (5)
line 3: inorderTraversal

line 4: kNearestNeighbour 4 (4)

line 5: inorderTraversal

line 6: insert (10)
line 7: inorderTraversal
(10) 
line 8: kNearestNeighbour 9 (9)
(10) 
line 9: inorderTraversal
(10) 
line 10: insert (6)
line 11: inorderTraversal
(6) (10) 
line 12: kNearestNeighbour 3 (7)
(6) (10) 
line 13: inorderTraversal
(6) (10) 
line 14: insert (9)
line 15: inorderTraversal
(6) (9) (10) 
line 16: insert (9)
line 17: inorderTraversal
(6) (9) (9) (10) 
line 18: kNearestNeighbour 10 (2)
(6) (9) (9) (10) 
line 19: inorderTraversal
(6) (9) (9) (10) 
line 20: insert (8)
line 21: inorderTraversal
(6) (8) (9) (9) (10) 
line 22: kNearestNeighbour 2 (8)
(8) (9) 
line 23: inorderTraversal
(6) (8) (9) (9) (10) 
line 24: insert (8)
line 25: inorderTraversal
(6) (8) (8) (9) (9) (10) 
line 26: nearestNeighbour (5)
(6) 
line 27: inorderTraversal
(6) (8) (8) (9) (9) (10) 
line 28: kNearestNeighbour 9 (2)
(6) (8) (8) (9) (9) (10) 
line 29: inorderTraversal
(6) (8) (8) (9) (9) (10) 
line 30: insert (9)
line 31: inorderTraversal
(6) (8) (8) (9) (9) (9) (10) 
line 32: insert (8)
line 33: inorderTraversal
(6) (8) (8) (8) (9) (9) (9) (10) 
line 34: insert (3)
line 35: inorderTraversal
(3) (6) (8) (8) (8) (9) (9) (9) (10) 
line 36: insert (6)
line 37: inorderTraversal
(3) (6) (6) (8) (8) (8) (9) (9) (9) (10) 
line 38: preorderTraversal
(10) (6) (3) (9) (8) (6) (8) (8) (9) (9) 
line 39: inorderTraversal
(3) (6) (6) (8) (8) (8) (9) (9) (9) (10) 
line 40: nodeCount_height_leafCount
nodeCount=10;height=6;leafCount=4
line 41: inorderTraversal
(3) (6) (6) (8) (8) (8) (9) (9) (9) (10) 
line 42: clear
line 43: buildTree 5
(9) (4) (8) (7) (2) 
line 44: inorderTraversal
(2) (4) (7) (8) (9) 
line 45: insert (6)
line 46: inorderTraversal
(2) (4) (6) (7) (8) (9) 
line 47: clear
line 48: buildTree 19
(2) (5) (8) (7) (10) (4) (6) (10) (4) (8) (4) (9) (10) (7) (6) (2) (6) (1) (2) 
line 49: inorderTraversal
(1) (2) (2) (2) (4) (4) (4) (5) (6) (6) (6) (7) (7) (8) (8) (9) (10) (10) (10) 
line 50: nearestNeighbour (10)
(10) 
line 51: inorderTraversal
(1) (2) (2) (2) (4) (4) (4) (5) (6) (6) (6) (7) (7) (8) (8) (9) (10) (10) (10) 
line 52: kNearestNeighbour 5 (5)
(4) (4) (4) (5) (6) 
line 53: inorderTraversal
(1) (2) (2) (2) (4) (4) (4) (5) (6) (6) (6) (7) (7) (8) (8) (9) (10) (10) (10) 
line 54: kNearestNeighbour 3 (7)
(6) (7) (7) 
line 55: inorderTraversal
(1) (2) (2) (2) (4) (4) (4) (5) (6) (6) (6) (7) (7) (8) (8) (9) (10) (10) (10) 
line 56: kNearestNeighbour 9 (4)
(2) (2) (2) (4) (4) (4) (5) (6) (6) 
line 57: inorderTraversal
(1) (2) (2) (2) (4) (4) (4) (5) (6) (6) (6) (7) (7) (8) (8) (9) (10) (10) (10) 
line 58: nearestNeighbour (10)
(10) 
line 59: inorderTraversal
(1) (2) (2) (2) (4) (4) (4) (5) (6) (6) (6) (7) (7) (8) (8) (9) (10) (10) (10) 
line 60: insert (6)
line 61: inorderTraversal
(1) (2) (2) (2) (4) (4) (4) (5) (6) (6) (6) (6) (7) (7) (8) (8) (9) (10) (10) (10) 
line 62: nearestNeighbour (2)
(2) 
line 63: inorderTraversal
(1) (2) (2) (2) (4) (4) (4) (5) (6) (6) (6) (6) (7) (7) (8) (8) (9) (10) (10) (10) 
line 64: insert (2)
line 65: inorderTraversal
(1) (2) (2) (2) (2) (4) (4) (4) (5) (6) (6) (6) (6) (7) (7) (8) (8) (9) (10) (10) (10) 
line 66: remove (10)
line 67: inorderTraversal
(1) (2) (2) (2) (2) (4) (4) (4) (5) (6) (6) (6) (6) (7) (7) (8) (8) (9) (10) (10) 
line 68: insert (3)
line 69: inorderTraversal
(1) (2) (2) (2) (2) (3) (4) (4) (4) (5) (6) (6) (6) (6) (7) (7) (8) (8) (9) (10) (10) 
line 70: insert (4)
line 71: inorderTraversal
(1) (2) (2) (2) (2) (3) (4) (4) (4) (4) (5) (6) (6) (6) (6) (7) (7) (8) (8) (9) (10) (10) 
line 72: clear
line 73: buildTree 8
(2) (3) (2) (3) (2) (8) (5) (1) 
line 74: inorderTraversal
(1) (2) (2) (2) (3) (3) (5) (8) 
line 75: kNearestNeighbour 5 (1)
(1) (2) (2) (2) (3) 
line 76: inorderTraversal
(1) (2) (2) (2) (3) (3) (5) (8) 
line 77: clear
line 78: buildTree 5
(5) (10) (6) (7) (1) 
line 79: inorderTraversal
(1) (5) (6) (7) (10) 
line 80: clear
line 81: buildTree 6
(10) (2) (6) (6) (10) (7) 
line 82: inorderTraversal
(2) (6) (6) (7) (10) (10) 
line 83: insert (10)
line 84: inorderTraversal
(2) (6) (6) (7) (10) (10) (10) 
line 85: kNearestNeighbour 10 (9)
(2) (6) (6) (7) (10) (10) (10) 
line 86: inorderTraversal
(2) (6) (6) (7) (10) (10) (10) 
line 87: nearestNeighbour (9)
(10) 
line 88: inorderTraversal
(2) (6) (6) (7) (10) (10) (10) 
line 89: insert (9)
line 90: inorderTraversal
(2) (6) (6) (7) (9) (10) (10) (10) 
line 91: nearestNeighbour (9)
(9) 
line 92: inorderTraversal
(2) (6) (6) (7) (9) (10) (10) (10) 
line 93: nearestNeighbour (1)
(2) 
line 94: inorderTraversal
(2) (6) (6) (7) (9) (10) (10) (10) 
line 95: clear
line 96: buildTree 13
(2) (5) (8) (8) (10) (8) (6) (9) (6) (3) (7) (9) (7) 
line 97: inorderTraversal
(2) (3) (5) (6) (6) (7) (7) (8) (8) (8) (9) (9) (10) 
line 98: insert (7)
line 99: inorderTraversal
(2) (3) (5) (6) (6) (7) (7) (7) (8) (8) (8) (9) (9) (10) 
line 100: kNearestNeighbour 9 (10)
(7) (7) (7) (8) (8) (8) (9) (9) (10) 
line 101: inorderTraversal
(2) (3) (5) (6) (6) (7) (7) (7) (8) (8) (8) (9) (9) (10) 
line 102: postorderTraversal
(3) (2) (6) (6) (5) (7) (7) (8) (8) (10) (9) (9) (8) (7) 
line 103: inorderTraversal
(2) (3) (5) (6) (6) (7) (7) (7) (8) (8) (8) (9) (9) (10) 
line 104: kNearestNeighbour 4 (7)
(7) (7) (7) (8) 
line 105: inorderTraversal
(2) (3) (5) (6) (6) (7) (7) (7) (8) (8) (8) (9) (9) (10) 
line 106: insert (4)
line 107: inorderTraversal
(2) (3) (4) (5) (6) (6) (7) (7) (7) (8) (8) (8) (9) (9) (10) 
line 108: nearestNeighbour (8)
(8) 
line 109: inorderTraversal
(2) (3) (4) (5) (6) (6) (7) (7) (7) (8) (8) (8) (9) (9) (10) 
line 110: clear
line 111: buildTree 11
(3) (5) (6) (9) (5) (1) (10) (5) (6) (5) (4) 
line 112: inorderTraversal
(1) (3) (4) (5) (5) (5) (5) (6) (6) (9) (10) 
line 113: kNearestNeighbour 4 (1)
(1) (3) (4) (5) 
line 114: inorderTraversal
(1) (3) (4) (5) (5) (5) (5) (6) (6) (9) (10) 
line 115: insert (2)
line 116: inorderTraversal
(1) (2) (3) (4) (5) (5) (5) (5) (6) (6) (9) (10) 
line 117: nearestNeighbour (6)
(6) 
line 118: inorderTraversal
(1) (2) (3) (4) (5) (5) (5) (5) (6) (6) (9) (10) 
line 119: insert (7)
line 120: inorderTraversal
(1) (2) (3) (4) (5) (5) (5) (5) (6) (6) (7) (9) (10) 
line 121: nearestNeighbour (1)
(1) 
line 122: inorderTraversal
(1) (2) (3) (4) (5) (5) (5) (5) (6) (6) (7) (9) (10) 
line 123: insert (1)
line 124: inorderTraversal
(1) (1) (2) (3) (4) (5) (5) (5) (5) (6) (6) (7) (9) (10) 
line 125: postorderTraversal
(1) (2) (1) (4) (3) (5) (5) (5) (7) (6) (10) (9) (6) (5) 
line 126: inorderTraversal
(1) (1) (2) (3) (4) (5) (5) (5) (5) (6) (6) (7) (9) (10) 
line 127: kNearestNeighbour 9 (10)
(5) (5) (5) (5) (6) (6) (7) (9) (10) 
line 128: inorderTraversal
(1) (1) (2) (3) (4) (5) (5) (5) (5) (6) (6) (7) (9) (10) 
line 129: nearestNeighbour (7)
(7) 
line 130: inorderTraversal
(1) (1) (2) (3) (4) (5) (5) (5) (5) (6) (6) (7) (9) (10) 
line 131: insert (7)
line 132: inorderTraversal
(1) (1) (2) (3) (4) (5) (5) (5) (5) (6) (6) (7) (7) (9) (10) 
line 133: insert (3)
line 134: inorderTraversal
(1) (1) (2) (3) (3) (4) (5) (5) (5) (5) (6) (6) (7) (7) (9) (10) 
line 135: clear
line 136: buildTree 12
(8) (10) (3) (7) (5) (4) (9) (1) (3) (2) (1) (7) 
line 137: inorderTraversal
(1) (1) (2) (3) (3) (4) (5) (7) (7) (8) (9) (10) 
line 138: insert (8)
line 139: inorderTraversal
(1) (1) (2) (3) (3) (4) (5) (7) (7) (8) (8) (9) (10) 
line 140: search (1)
TRUE
line 141: inorderTraversal
(1) (1) (2) (3) (3) (4) (5) (7) (7) (8) (8) (9) (10) 
line 142: kNearestNeighbour 3 (10)
(8) (9) (10) 
line 143: inorderTraversal
(1) (1) (2) (3) (3) (4) (5) (7) (7) (8) (8) (9) (10) 
line 144: kNearestNeighbour 8 (6)
(3) (4) (5) (7) (7) (8) (8) (9) 
line 145: inorderTraversal
(1) (1) (2) (3) (3) (4) (5) (7) (7) (8) (8) (9) (10) 
line 146: kNearestNeighbour 2 (4)
(4) (5) 
line 147: inorderTraversal
(1) (1) (2) (3) (3) (4) (5) (7) (7) (8) (8) (9) (10) 
line 148: insert (3)
line 149: inorderTraversal
(1) (1) (2) (3) (3) (3) (4) (5) (7) (7) (8) (8) (9) (10) 
line 150: insert (8)
line 151: inorderTraversal
(1) (1) (2) (3) (3) (3) (4) (5) (7) (7) (8) (8) (8) (9) (10) 
line 152: insert (10)
line 153: inorderTraversal
(1) (1) (2) (3) (3) (3) (4) (5) (7) (7) (8) (8) (8) (9) (10) (10) 
line 154: insert (4)
line 155: inorderTraversal
(1) (1) (2) (3) (3) (3) (4) (4) (5) (7) (7) (8) (8) (8) (9) (10) (10) 
line 156: remove (8)
line 157: inorderTraversal
(1) (1) (2) (3) (3) (3) (4) (4) (5) (7) (7) (8) (8) (9) (10) (10) 
line 158: insert (4)
line 159: inorderTraversal
(1) (1) (2) (3) (3) (3) (4) (4) (4) (5) (7) (7) (8) (8) (9) (10) (10) 
line 160: search (3)
TRUE
line 161: inorderTraversal
(1) (1) (2) (3) (3) (3) (4) (4) (4) (5) (7) (7) (8) (8) (9) (10) (10) 
line 162: insert (3)
line 163: inorderTraversal
(1) (1) (2) (3) (3) (3) (3) (4) (4) (4) (5) (7) (7) (8) (8) (9) (10) (10) 
line 164: kNearestNeighbour 6 (4)
(3) (3) (4) (4) (4) (5) 
line 165: inorderTraversal
(1) (1) (2) (3) (3) (3) (3) (4) (4) (4) (5) (7) (7) (8) (8) (9) (10) (10) 
line 166: kNearestNeighbour 5 (5)
(4) (4) (4) (5) (7) 
line 167: inorderTraversal
(1) (1) (2) (3) (3) (3) (3) (4) (4) (4) (5) (7) (7) (8) (8) (9) (10) (10) 
line 168: clear
line 169: buildTree 19
(6) (8) (10) (8) (10) (4) (1) (7) (6) (6) (8) (5) (1) (2) (3) (9) (10) (8) (10) 
line 170: inorderTraversal
(1) (1) (2) (3) (4) (5) (6) (6) (6) (7) (8) (8) (8) (8) (9) (10) (10) (10) (10) 
line 171: nearestNeighbour (1)
(1) 
line 172: inorderTraversal
(1) (1) (2) (3) (4) (5) (6) (6) (6) (7) (8) (8) (8) (8) (9) (10) (10) (10) (10) 
line 173: insert (3)
line 174: inorderTraversal
(1) (1) (2) (3) (3) (4) (5) (6) (6) (6) (7) (8) (8) (8) (8) (9) (10) (10) (10) (10) 
line 175: clear
line 176: buildTree 11
(3) (4) (1) (4) (10) (1) (6) (8) (9) (10) (9) 
line 177: inorderTraversal
(1) (1) (3) (4) (4) (6) (8) (9) (9) (10) (10) 
line 178: insert (2)
line 179: inorderTraversal
(1) (1) (2) (3) (4) (4) (6) (8) (9) (9) (10) (10) 
line 180: remove (10)
line 181: inorderTraversal
(1) (1) (2) (3) (4) (4) (6) (8) (9) (9) (10) 
line 182: insert (8)
line 183: inorderTraversal
(1) (1) (2) (3) (4) (4) (6) (8) (8) (9) (9) (10) 
line 184: kNearestNeighbour 4 (1)
(1) (1) (2) (3) 
line 185: inorderTraversal
(1) (1) (2) (3) (4) (4) (6) (8) (8) (9) (9) (10) 
line 186: kNearestNeighbour 4 (7)
(6) (8) (8) (9) 
line 187: inorderTraversal
(1) (1) (2) (3) (4) (4) (6) (8) (8) (9) (9) (10) 
line 188: insert (3)
line 189: inorderTraversal
(1) (1) (2) (3) (3) (4) (4) (6) (8) (8) (9) (9) (10) 
line 190: kNearestNeighbour 8 (4)
(1) (1) (2) (3) (3) (4) (4) (6) 
line 191: inorderTraversal
(1) (1) (2) (3) (3) (4) (4) (6) (8) (8) (9) (9) (10) 
line 192: insert (4)
line 193: inorderTraversal
(1) (1) (2) (3) (3) (4) (4) (4) (6) (8) (8) (9) (9) (10) 
line 194: insert (7)
line 195: inorderTraversal
(1) (1) (2) (3) (3) (4) (4) (4) (6) (7) (8) (8) (9) (9) (10) 
line 196: insert (4)
line 197: inorderTraversal
(1) (1) (2) (3) (3) (4) (4) (4) (4) (6) (7) (8) (8) (9) (9) (10) 
line 198: insert (2)
line 199: inorderTraversal
(1) (1) (2) (2) (3) (3) (4) (4) (4) (4) (6) (7) (8) (8) (9) (9) (10) 
line 200: kNearestNeighbour 9 (3)
(1) (2) (2) (3) (3) (4) (4) (4) (4) 
line 201: inorderTraversal
(1) (1) (2) (2) (3) (3) (4) (4) (4) (4) (6) (7) (8) (8) (9) (9) (10) 
line 202: search (2)
TRUE
line 203: inorderTraversal
(1) (1) (2) (2) (3) (3) (4) (4) (4) (4) (6) (7) (8) (8) (9) (9) (10) 
line 204: clear
line 205: buildTree 11
(6) (5) (2) (9) (7) (10) (6) (5) (9) (3) (9) 
line 206: inorderTraversal
(2) (3) (5) (5) (6) (6) (7) (9) (9) (9) (10) 
line 207: clear
line 208: buildTree 8
(9) (2) (8) (1) (3) (9) (8) (1) 
line 209: inorderTraversal
(1) (1) (2) (3) (8) (8) (9) (9) 
line 210: insert (9)
line 211: inorderTraversal
(1) (1) (2) (3) (8) (8) (9) (9) (9) 
line 212: nearestNeighbour (6)
(8) 
line 213: inorderTraversal
(1) (1) (2) (3) (8) (8) (9) (9) (9) 
line 214: remove (1)
line 215: inorderTraversal
(1) (2) (3) (8) (8) (9) (9) (9) 
line 216: clear
line 217: buildTree 8
(10) (10) (6) (8) (3) (3) (5) (2) 
line 218: inorderTraversal
(2) (3) (3) (5) (6) (8) (10) (10) 
line 219: preorderTraversal
(5) (3) (2) (3) (8) (6) (10) (10) 
line 220: inorderTraversal
(2) (3) (3) (5) (6) (8) (10) (10) 
line 221: nearestNeighbour (1)
(2) 
line 222: inorderTraversal
(2) (3) (3) (5) (6) (8) (10) (10) 
line 223: nodeCount_height_leafCount
nodeCount=8;height=4;leafCount=4
line 224: inorderTraversal
(2) (3) (3) (5) (6) (8) (10) (10) 
line 225: nearestNeighbour (3)
(3) 
line 226: inorderTraversal
(2) (3) (3) (5) (6) (8) (10) (10) 
line 227: kNearestNeighbour 8 (9)
(2) (3) (3) (5) (6) (8) (10) (10) 
line 228: inorderTraversal
(2) (3) (3) (5) (6) (8) (10) (10) 
line 229: nearestNeighbour (9)
(10) 
line 230: inorderTraversal
(2) (3) (3) (5) (6) (8) (10) (10) 
line 231: nearestNeighbour (10)
(10) 
line 232: inorderTraversal
(2) (3) (3) (5) (6) (8) (10) (10) 
line 233: insert (9)
line 234: inorderTraversal
(2) (3) (3) (5) (6) (8) (9) (10) (10) 
line 235: insert (9)
line 236: inorderTraversal
(2) (3) (3) (5) (6) (8) (9) (9) (10) (10) 
line 237: kNearestNeighbour 8 (7)
(3) (5) (6) (8) (9) (9) (10) (10) 
line 238: inorderTraversal
(2) (3) (3) (5) (6) (8) (9) (9) (10) (10) 
line 239: nearestNeighbour (2)
(2) 
line 240: inorderTraversal
(2) (3) (3) (5) (6) (8) (9) (9) (10) (10) 
line 241: postorderTraversal
(2) (3) (3) (6) (9) (9) (10) (10) (8) (5) 
line 242: inorderTraversal
(2) (3) (3) (5) (6) (8) (9) (9) (10) (10) 
line 243: clear
line 244: buildTree 8
(10) (1) (5) (4) (7) (6) (1) (6) 
line 245: inorderTraversal
(1) (1) (4) (5) (6) (6) (7) (10) 
line 246: search (1)
TRUE
line 247: inorderTraversal
(1) (1) (4) (5) (6) (6) (7) (10) 
line 248: insert (2)
line 249: inorderTraversal
(1) (1) (2) (4) (5) (6) (6) (7) (10) 
line 250: remove (1)
line 251: inorderTraversal
(1) (2) (4) (5) (6) (6) (7) (10) 
line 252: insert (5)
line 253: inorderTraversal
(1) (2) (4) (5) (5) (6) (6) (7) (10) 
line 254: nearestNeighbour (3)
(4) 
line 255: inorderTraversal
(1) (2) (4) (5) (5) (6) (6) (7) (10) 
line 256: search (1)
TRUE
line 257: inorderTraversal
(1) (2) (4) (5) (5) (6) (6) (7) (10) 
line 258: nearestNeighbour (1)
(1) 
line 259: inorderTraversal
(1) (2) (4) (5) (5) (6) (6) (7) (10) 
line 260: nearestNeighbour (1)
(1) 
line 261: inorderTraversal
(1) (2) (4) (5) (5) (6) (6) (7) (10) 
line 262: insert (6)
line 263: inorderTraversal
(1) (2) (4) (5) (5) (6) (6) (6) (7) (10) 
line 264: insert (7)
line 265: inorderTraversal
(1) (2) (4) (5) (5) (6) (6) (6) (7) (7) (10) 
line 266: insert (2)
line 267: inorderTraversal
(1) (2) (2) (4) (5) (5) (6) (6) (6) (7) (7) (10) 
line 268: search (4)
TRUE
line 269: inorderTraversal
(1) (2) (2) (4) (5) (5) (6) (6) (6) (7) (7) (10) 
line 270: remove (5)
line 271: inorderTraversal
(1) (2) (2) (4) (5) (6) (6) (6) (7) (7) (10) 
line 272: clear
line 273: buildTree 9
(9) (5) (6) (6) (5) (10) (6) (9) (3) 
line 274: inorderTraversal
(3) (5) (5) (6) (6) (6) (9) (9) (10) 
line 275: insert (3)
line 276: inorderTraversal
(3) (3) (5) (5) (6) (6) (6) (9) (9) (10) 
line 277: nearestNeighbour (10)
(10) 
line 278: inorderTraversal
(3) (3) (5) (5) (6) (6) (6) (9) (9) (10) 
line 279: remove (9)
line 280: inorderTraversal
(3) (3) (5) (5) (6) (6) (6) (9) (10) 
line 281: nearestNeighbour (5)
(5) 
line 282: inorderTraversal
(3) (3) (5) (5) (6) (6) (6) (9) (10) 
line 283: insert (8)
line 284: inorderTraversal
(3) (3) (5) (5) (6) (6) (6) (8) (9) (10) 
line 285: remove (4)
line 286: inorderTraversal
(3) (3) (5) (5) (6) (6) (6) (8) (9) (10) 
line 287: kNearestNeighbour 5 (9)
(6) (6) (8) (9) (10) 
line 288: inorderTraversal
(3) (3) (5) (5) (6) (6) (6) (8) (9) (10) 
line 289: insert (1)
line 290: inorderTraversal
(1) (3) (3) (5) (5) (6) (6) (6) (8) (9) (10) 
line 291: insert (6)
line 292: inorderTraversal
(1) (3) (3) (5) (5) (6) (6) (6) (6) (8) (9) (10) 
line 293: insert (3)
line 294: inorderTraversal
(1) (3) (3) (3) (5) (5) (6) (6) (6) (6) (8) (9) (10) 
line 295: kNearestNeighbour 8 (6)
(5) (5) (6) (6) (6) (6) (8) (9) 
line 296: inorderTraversal
(1) (3) (3) (3) (5) (5) (6) (6) (6) (6) (8) (9) (10) 
line 297: kNearestNeighbour 8 (6)
(5) (5) (6) (6) (6) (6) (8) (9) 
line 298: inorderTraversal
(1) (3) (3) (3) (5) (5) (6) (6) (6) (6) (8) (9) (10) 
line 299: insert (4)
line 300: inorderTraversal
(1) (3) (3) (3) (4) (5) (5) (6) (6) (6) (6) (8) (9) (10) 
line 301: insert (3)
line 302: inorderTraversal
(1) (3) (3) (3) (3) (4) (5) (5) (6) (6) (6) (6) (8) (9) (10) 
line 303: insert (7)
line 304: inorderTraversal
(1) (3) (3) (3) (3) (4) (5) (5) (6) (6) (6) (6) (7) (8) (9) (10) 
line 305: insert (6)
line 306: inorderTraversal
(1) (3) (3) (3) (3) (4) (5) (5) (6) (6) (6) (6) (6) (7) (8) (9) (10) 
line 307: insert (8)
line 308: inorderTraversal
(1) (3) (3) (3) (3) (4) (5) (5) (6) (6) (6) (6) (6) (7) (8) (8) (9) (10) 
line 309: insert (1)
line 310: inorderTraversal
(1) (1) (3) (3) (3) (3) (4) (5) (5) (6) (6) (6) (6) (6) (7) (8) (8) (9) (10) 
line 311: postorderTraversal
(1) (1) (3) (4) (3) (3) (3) (5) (5) (6) (7) (6) (8) (8) (6) (6) (10) (9) (6) 
line 312: inorderTraversal
(1) (1) (3) (3) (3) (3) (4) (5) (5) (6) (6) (6) (6) (6) (7) (8) (8) (9) (10) 
line 313: kNearestNeighbour 2 (10)
(9) (10) 
line 314: inorderTraversal
(1) (1) (3) (3) (3) (3) (4) (5) (5) (6) (6) (6) (6) (6) (7) (8) (8) (9) (10) 
line 315: kNearestNeighbour 5 (2)
(1) (1) (3) (3) (3) 
line 316: inorderTraversal
(1) (1) (3) (3) (3) (3) (4) (5) (5) (6) (6) (6) (6) (6) (7) (8) (8) (9) (10) 
line 317: nodeCount_height_leafCount
nodeCount=19;height=8;leafCount=6
line 318: inorderTraversal
(1) (1) (3) (3) (3) (3) (4) (5) (5) (6) (6) (6) (6) (6) (7) (8) (8) (9) (10) 
line 319: kNearestNeighbour 3 (4)
(3) (3) (4) 
line 320: inorderTraversal
(1) (1) (3) (3) (3) (3) (4) (5) (5) (6) (6) (6) (6) (6) (7) (8) (8) (9) (10) 
line 321: clear
line 322: buildTree 20
(2) (7) (1) (4) (9) (8) (8) (4) (9) (5) (10) (10) (8) (2) (5) (8) (7) (10) (10) (8) 
line 323: inorderTraversal
(1) (2) (2) (4) (4) (5) (5) (7) (7) (8) (8) (8) (8) (8) (9) (9) (10) (10) (10) (10) 
line 324: postorderTraversal
(1) (2) (2) (4) (5) (7) (7) (5) (4) (8) (8) (8) (8) (9) (10) (10) (10) (10) (9) (8) 
line 325: inorderTraversal
(1) (2) (2) (4) (4) (5) (5) (7) (7) (8) (8) (8) (8) (8) (9) (9) (10) (10) (10) (10) 
line 326: kNearestNeighbour 4 (9)
(9) (9) (10) (10) 
line 327: inorderTraversal
(1) (2) (2) (4) (4) (5) (5) (7) (7) (8) (8) (8) (8) (8) (9) (9) (10) (10) (10) (10) 
line 328: nearestNeighbour (4)
(4) 
line 329: inorderTraversal
(1) (2) (2) (4) (4) (5) (5) (7) (7) (8) (8) (8) (8) (8) (9) (9) (10) (10) (10) (10) 
line 330: insert (6)
line 331: inorderTraversal
(1) (2) (2) (4) (4) (5) (5) (6) (7) (7) (8) (8) (8) (8) (8) (9) (9) (10) (10) (10) (10) 
line 332: remove (8)
line 333: inorderTraversal
(1) (2) (2) (4) (4) (5) (5) (6) (7) (7) (8) (8) (8) (8) (9) (9) (10) (10) (10) (10) 
line 334: nodeCount_height_leafCount
nodeCount=20;height=6;leafCount=8
line 335: inorderTraversal
(1) (2) (2) (4) (4) (5) (5) (6) (7) (7) (8) (8) (8) (8) (9) (9) (10) (10) (10) (10) 
line 336: remove (4)
line 337: inorderTraversal
(1) (2) (2) (4) (5) (5) (6) (7) (7) (8) (8) (8) (8) (9) (9) (10) (10) (10) (10) 
line 338: insert (4)
line 339: inorderTraversal
(1) (2) (2) (4) (4) (5) (5) (6) (7) (7) (8) (8) (8) (8) (9) (9) (10) (10) (10) (10) 
line 340: clear
line 341: buildTree 8
(8) (2) (2) (8) (5) (2) (5) (1) 
line 342: inorderTraversal
(1) (2) (2) (2) (5) (5) (8) (8) 
line 343: kNearestNeighbour 9 (6)
(1) (2) (2) (2) (5) (5) (8) (8) 
line 344: inorderTraversal
(1) (2) (2) (2) (5) (5) (8) (8) 
line 345: insert (6)
line 346: inorderTraversal
(1) (2) (2) (2) (5) (5) (6) (8) (8) 
line 347: insert (10)
line 348: inorderTraversal
(1) (2) (2) (2) (5) (5) (6) (8) (8) (10) 
line 349: insert (10)
line 350: inorderTraversal
(1) (2) (2) (2) (5) (5) (6) (8) (8) (10) (10) 
line 351: insert (9)
line 352: inorderTraversal
(1) (2) (2) (2) (5) (5) (6) (8) (8) (9) (10) (10) 
line 353: insert (5)
line 354: inorderTraversal
(1) (2) (2) (2) (5) (5) (5) (6) (8) (8) (9) (10) (10) 
line 355: insert (1)
line 356: inorderTraversal
(1) (1) (2) (2) (2) (5) (5) (5) (6) (8) (8) (9) (10) (10) 
line 357: nearestNeighbour (9)
(9) 
line 358: inorderTraversal
(1) (1) (2) (2) (2) (5) (5) (5) (6) (8) (8) (9) (10) (10) 
line 359: insert (7)
line 360: inorderTraversal
(1) (1) (2) (2) (2) (5) (5) (5) (6) (7) (8) (8) (9) (10) (10) 
line 361: kNearestNeighbour 9 (10)
(5) (5) (6) (7) (8) (8) (9) (10) (10) 
line 362: inorderTraversal
(1) (1) (2) (2) (2) (5) (5) (5) (6) (7) (8) (8) (9) (10) (10) 
line 363: clear
line 364: buildTree 16
(10) (6) (7) (4) (1) (3) (3) (7) (2) (6) (3) (6) (1) (3) (9) (1) 
line 365: inorderTraversal
(1) (1) (1) (2) (3) (3) (3) (3) (4) (6) (6) (6) (7) (7) (9) (10) 
line 366: remove (2)
line 367: inorderTraversal
(1) (1) (1) (3) (3) (3) (3) (4) (6) (6) (6) (7) (7) (9) (10) 
line 368: nearestNeighbour (9)
(9) 
line 369: inorderTraversal
(1) (1) (1) (3) (3) (3) (3) (4) (6) (6) (6) (7) (7) (9) (10) 
line 370: nearestNeighbour (1)
(1) 
line 371: inorderTraversal
(1) (1) (1) (3) (3) (3) (3) (4) (6) (6) (6) (7) (7) (9) (10) 
line 372: kNearestNeighbour 1 (9)
(9) 
line 373: inorderTraversal
(1) (1) (1) (3) (3) (3) (3) (4) (6) (6) (6) (7) (7) (9) (10) 
line 374: clear
line 375: buildTree 17
(8) (1) (6) (8) (6) (3) (3) (6) (5) (7) (8) (9) (8) (4) (1) (7) (1) 
line 376: inorderTraversal
(1) (1) (1) (3) (3) (4) (5) (6) (6) (6) (7) (7) (8) (8) (8) (8) (9) 
line 377: kNearestNeighbour 2 (5)
(4) (5) 
line 378: inorderTraversal
(1) (1) (1) (3) (3) (4) (5) (6) (6) (6) (7) (7) (8) (8) (8) (8) (9) 
line 379: kNearestNeighbour 2 (10)
(8) (9) 
line 380: inorderTraversal
(1) (1) (1) (3) (3) (4) (5) (6) (6) (6) (7) (7) (8) (8) (8) (8) (9) 
line 381: remove (1)
line 382: inorderTraversal
(1) (1) (3) (3) (4) (5) (6) (6) (6) (7) (7) (8) (8) (8) (8) (9) 
line 383: remove (7)
line 384: inorderTraversal
(1) (1) (3) (3) (4) (5) (6) (6) (6) (7) (8) (8) (8) (8) (9) 
line 385: insert (4)
line 386: inorderTraversal
(1) (1) (3) (3) (4) (4) (5) (6) (6) (6) (7) (8) (8) (8) (8) (9) 
line 387: insert (7)
line 388: inorderTraversal
(1) (1) (3) (3) (4) (4) (5) (6) (6) (6) (7) (7) (8) (8) (8) (8) (9) 
line 389: clear
line 390: buildTree 10
(8) (9) (8) (2) (8) (2) (3) (8) (8) (8) 
line 391: inorderTraversal
(2) (2) (3) (8) (8) (8) (8) (8) (8) (9) 
line 392: postorderTraversal
(3) (2) (2) (9) (8) (8) (8) (8) (8) (8) 
line 393: inorderTraversal
(2) (2) (3) (8) (8) (8) (8) (8) (8) (9) 
line 394: clear
line 395: buildTree 14
(8) (6) (3) (10) (2) (3) (3) (7) (2) (8) (1) (7) (10) (3) 
line 396: inorderTraversal
(1) (2) (2) (3) (3) (3) (3) (6) (7) (7) (8) (8) (10) (10) 
line 397: kNearestNeighbour 5 (4)
(3) (3) (3) (3) (6) 
line 398: inorderTraversal
(1) (2) (2) (3) (3) (3) (3) (6) (7) (7) (8) (8) (10) (10) 
line 399: kNearestNeighbour 2 (5)
(3) (6) 
line 400: inorderTraversal
(1) (2) (2) (3) (3) (3) (3) (6) (7) (7) (8) (8) (10) (10) 
line 401: remove (2)
line 402: inorderTraversal
(1) (2) (3) (3) (3) (3) (6) (7) (7) (8) (8) (10) (10) 
line 403: kNearestNeighbour 10 (6)
(3) (3) (3) (3) (6) (7) (7) (8) (8) (10) 
line 404: inorderTraversal
(1) (2) (3) (3) (3) (3) (6) (7) (7) (8) (8) (10) (10) 
line 405: nearestNeighbour (7)
(7) 
line 406: inorderTraversal
(1) (2) (3) (3) (3) (3) (6) (7) (7) (8) (8) (10) (10) 
line 407: kNearestNeighbour 3 (1)
(1) (2) (3) 
line 408: inorderTraversal
(1) (2) (3) (3) (3) (3) (6) (7) (7) (8) (8) (10) (10) 
line 409: search (8)
TRUE
line 410: inorderTraversal
(1) (2) (3) (3) (3) (3) (6) (7) (7) (8) (8) (10) (10) 
line 411: clear
line 412: buildTree 20
(8) (1) (3) (9) (9) (5) (7) (6) (1) (5) (8) (5) (9) (8) (2) (2) (7) (6) (10) (5) 
line 413: inorderTraversal
(1) (1) (2) (2) (3) (5) (5) (5) (5) (6) (6) (7) (7) (8) (8) (8) (9) (9) (9) (10) 
line 414: nearestNeighbour (8)
(8) 
line 415: inorderTraversal
(1) (1) (2) (2) (3) (5) (5) (5) (5) (6) (6) (7) (7) (8) (8) (8) (9) (9) (9) (10) 
line 416: insert (8)
line 417: inorderTraversal
(1) (1) (2) (2) (3) (5) (5) (5) (5) (6) (6) (7) (7) (8) (8) (8) (8) (9) (9) (9) (10) 
line 418: insert (4)
line 419: inorderTraversal
(1) (1) (2) (2) (3) (4) (5) (5) (5) (5) (6) (6) (7) (7) (8) (8) (8) (8) (9) (9) (9) (10) 
line 420: insert (1)
line 421: inorderTraversal
(1) (1) (1) (2) (2) (3) (4) (5) (5) (5) (5) (6) (6) (7) (7) (8) (8) (8) (8) (9) (9) (9) (10) 
line 422: nearestNeighbour (2)
(2) 
line 423: inorderTraversal
(1) (1) (1) (2) (2) (3) (4) (5) (5) (5) (5) (6) (6) (7) (7) (8) (8) (8) (8) (9) (9) (9) (10) 
line 424: nodeCount_height_leafCount
nodeCount=23;height=6;leafCount=8
line 425: inorderTraversal
(1) (1) (1) (2) (2) (3) (4) (5) (5) (5) (5) (6) (6) (7) (7) (8) (8) (8) (8) (9) (9) (9) (10) 
line 426: preorderTraversal
(6) (3) (1) (2) (1) (1) (2) (5) (4) (5) (5) (5) (8) (7) (6) (7) (9) (8) (8) (8) (9) (9) (10) 
line 427: postorderTraversal
(1) (1) (2) (2) (1) (4) (5) (5) (5) (5) (3) (6) (7) (7) (8) (8) (8) (10) (9) (9) (9) (8) (6) 
line 428: clear
