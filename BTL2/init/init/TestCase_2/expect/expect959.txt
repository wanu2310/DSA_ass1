line 1: k=1
line 2: clear
line 3: buildTree 15
(6) (6) (10) (2) (4) (9) (7) (2) (8) (2) (7) (6) (1) (1) (8) 
line 4: inorderTraversal
(1) (1) (2) (2) (2) (4) (6) (6) (6) (7) (7) (8) (8) (9) (10) 
line 5: insert (2)
line 6: inorderTraversal
(1) (1) (2) (2) (2) (2) (4) (6) (6) (6) (7) (7) (8) (8) (9) (10) 
line 7: insert (5)
line 8: inorderTraversal
(1) (1) (2) (2) (2) (2) (4) (5) (6) (6) (6) (7) (7) (8) (8) (9) (10) 
line 9: kNearestNeighbour 5 (4)
(2) (2) (2) (4) (5) 
line 10: inorderTraversal
(1) (1) (2) (2) (2) (2) (4) (5) (6) (6) (6) (7) (7) (8) (8) (9) (10) 
line 11: insert (7)
line 12: inorderTraversal
(1) (1) (2) (2) (2) (2) (4) (5) (6) (6) (6) (7) (7) (7) (8) (8) (9) (10) 
line 13: insert (6)
line 14: inorderTraversal
(1) (1) (2) (2) (2) (2) (4) (5) (6) (6) (6) (6) (7) (7) (7) (8) (8) (9) (10) 
line 15: nearestNeighbour (4)
(4) 
line 16: inorderTraversal
(1) (1) (2) (2) (2) (2) (4) (5) (6) (6) (6) (6) (7) (7) (7) (8) (8) (9) (10) 
line 17: nearestNeighbour (8)
(8) 
line 18: inorderTraversal
(1) (1) (2) (2) (2) (2) (4) (5) (6) (6) (6) (6) (7) (7) (7) (8) (8) (9) (10) 
line 19: remove (4)
line 20: inorderTraversal
(1) (1) (2) (2) (2) (2) (5) (6) (6) (6) (6) (7) (7) (7) (8) (8) (9) (10) 
line 21: insert (3)
line 22: inorderTraversal
(1) (1) (2) (2) (2) (2) (3) (5) (6) (6) (6) (6) (7) (7) (7) (8) (8) (9) (10) 
line 23: insert (6)
line 24: inorderTraversal
(1) (1) (2) (2) (2) (2) (3) (5) (6) (6) (6) (6) (6) (7) (7) (7) (8) (8) (9) (10) 
line 25: insert (6)
line 26: inorderTraversal
(1) (1) (2) (2) (2) (2) (3) (5) (6) (6) (6) (6) (6) (6) (7) (7) (7) (8) (8) (9) (10) 
line 27: insert (6)
line 28: inorderTraversal
(1) (1) (2) (2) (2) (2) (3) (5) (6) (6) (6) (6) (6) (6) (6) (7) (7) (7) (8) (8) (9) (10) 
line 29: search (6)
TRUE
line 30: inorderTraversal
(1) (1) (2) (2) (2) (2) (3) (5) (6) (6) (6) (6) (6) (6) (6) (7) (7) (7) (8) (8) (9) (10) 
line 31: nearestNeighbour (2)
(2) 
line 32: inorderTraversal
(1) (1) (2) (2) (2) (2) (3) (5) (6) (6) (6) (6) (6) (6) (6) (7) (7) (7) (8) (8) (9) (10) 
line 33: kNearestNeighbour 9 (2)
(1) (1) (2) (2) (2) (2) (3) (5) (6) 
line 34: inorderTraversal
(1) (1) (2) (2) (2) (2) (3) (5) (6) (6) (6) (6) (6) (6) (6) (7) (7) (7) (8) (8) (9) (10) 
line 35: clear
line 36: buildTree 19
(7) (9) (2) (3) (8) (9) (2) (2) (6) (6) (9) (3) (6) (4) (10) (2) (10) (8) (6) 
line 37: inorderTraversal
(2) (2) (2) (2) (3) (3) (4) (6) (6) (6) (6) (7) (8) (8) (9) (9) (9) (10) (10) 
line 38: insert (6)
line 39: inorderTraversal
(2) (2) (2) (2) (3) (3) (4) (6) (6) (6) (6) (6) (7) (8) (8) (9) (9) (9) (10) (10) 
line 40: nearestNeighbour (5)
(4) 
line 41: inorderTraversal
(2) (2) (2) (2) (3) (3) (4) (6) (6) (6) (6) (6) (7) (8) (8) (9) (9) (9) (10) (10) 
line 42: nodeCount_height_leafCount
nodeCount=20;height=7;leafCount=6
line 43: inorderTraversal
(2) (2) (2) (2) (3) (3) (4) (6) (6) (6) (6) (6) (7) (8) (8) (9) (9) (9) (10) (10) 
line 44: insert (1)
line 45: inorderTraversal
(1) (2) (2) (2) (2) (3) (3) (4) (6) (6) (6) (6) (6) (7) (8) (8) (9) (9) (9) (10) (10) 
line 46: nearestNeighbour (7)
(7) 
line 47: inorderTraversal
(1) (2) (2) (2) (2) (3) (3) (4) (6) (6) (6) (6) (6) (7) (8) (8) (9) (9) (9) (10) (10) 
line 48: nearestNeighbour (10)
(10) 
line 49: inorderTraversal
(1) (2) (2) (2) (2) (3) (3) (4) (6) (6) (6) (6) (6) (7) (8) (8) (9) (9) (9) (10) (10) 
line 50: insert (8)
line 51: inorderTraversal
(1) (2) (2) (2) (2) (3) (3) (4) (6) (6) (6) (6) (6) (7) (8) (8) (8) (9) (9) (9) (10) (10) 
line 52: nearestNeighbour (9)
(9) 
line 53: inorderTraversal
(1) (2) (2) (2) (2) (3) (3) (4) (6) (6) (6) (6) (6) (7) (8) (8) (8) (9) (9) (9) (10) (10) 
line 54: kNearestNeighbour 3 (8)
(8) (8) (8) 
line 55: inorderTraversal
(1) (2) (2) (2) (2) (3) (3) (4) (6) (6) (6) (6) (6) (7) (8) (8) (8) (9) (9) (9) (10) (10) 
line 56: remove (10)
line 57: inorderTraversal
(1) (2) (2) (2) (2) (3) (3) (4) (6) (6) (6) (6) (6) (7) (8) (8) (8) (9) (9) (9) (10) 
line 58: nearestNeighbour (9)
(9) 
line 59: inorderTraversal
(1) (2) (2) (2) (2) (3) (3) (4) (6) (6) (6) (6) (6) (7) (8) (8) (8) (9) (9) (9) (10) 
line 60: kNearestNeighbour 10 (5)
(2) (3) (3) (4) (6) (6) (6) (6) (6) (7) 
line 61: inorderTraversal
(1) (2) (2) (2) (2) (3) (3) (4) (6) (6) (6) (6) (6) (7) (8) (8) (8) (9) (9) (9) (10) 
line 62: nearestNeighbour (1)
(1) 
line 63: inorderTraversal
(1) (2) (2) (2) (2) (3) (3) (4) (6) (6) (6) (6) (6) (7) (8) (8) (8) (9) (9) (9) (10) 
line 64: insert (7)
line 65: inorderTraversal
(1) (2) (2) (2) (2) (3) (3) (4) (6) (6) (6) (6) (6) (7) (7) (8) (8) (8) (9) (9) (9) (10) 
line 66: nearestNeighbour (3)
(3) 
line 67: inorderTraversal
(1) (2) (2) (2) (2) (3) (3) (4) (6) (6) (6) (6) (6) (7) (7) (8) (8) (8) (9) (9) (9) (10) 
line 68: insert (6)
line 69: inorderTraversal
(1) (2) (2) (2) (2) (3) (3) (4) (6) (6) (6) (6) (6) (6) (7) (7) (8) (8) (8) (9) (9) (9) (10) 
line 70: nearestNeighbour (6)
(6) 
line 71: inorderTraversal
(1) (2) (2) (2) (2) (3) (3) (4) (6) (6) (6) (6) (6) (6) (7) (7) (8) (8) (8) (9) (9) (9) (10) 
line 72: search (1)
TRUE
line 73: inorderTraversal
(1) (2) (2) (2) (2) (3) (3) (4) (6) (6) (6) (6) (6) (6) (7) (7) (8) (8) (8) (9) (9) (9) (10) 
line 74: remove (9)
line 75: inorderTraversal
(1) (2) (2) (2) (2) (3) (3) (4) (6) (6) (6) (6) (6) (6) (7) (7) (8) (8) (8) (9) (9) (10) 
line 76: nearestNeighbour (8)
(8) 
line 77: inorderTraversal
(1) (2) (2) (2) (2) (3) (3) (4) (6) (6) (6) (6) (6) (6) (7) (7) (8) (8) (8) (9) (9) (10) 
line 78: insert (10)
line 79: inorderTraversal
(1) (2) (2) (2) (2) (3) (3) (4) (6) (6) (6) (6) (6) (6) (7) (7) (8) (8) (8) (9) (9) (10) (10) 
line 80: search (9)
TRUE
line 81: inorderTraversal
(1) (2) (2) (2) (2) (3) (3) (4) (6) (6) (6) (6) (6) (6) (7) (7) (8) (8) (8) (9) (9) (10) (10) 
line 82: clear
line 83: buildTree 8
(10) (6) (7) (7) (4) (6) (7) (9) 
line 84: inorderTraversal
(4) (6) (6) (7) (7) (7) (9) (10) 
line 85: insert (6)
line 86: inorderTraversal
(4) (6) (6) (6) (7) (7) (7) (9) (10) 
line 87: remove (6)
line 88: inorderTraversal
(4) (6) (6) (7) (7) (7) (9) (10) 
line 89: clear
line 90: buildTree 8
(4) (2) (9) (10) (2) (9) (9) (7) 
line 91: inorderTraversal
(2) (2) (4) (7) (9) (9) (9) (10) 
line 92: remove (4)
line 93: inorderTraversal
(2) (2) (7) (9) (9) (9) (10) 
line 94: nearestNeighbour (7)
(7) 
line 95: inorderTraversal
(2) (2) (7) (9) (9) (9) (10) 
line 96: kNearestNeighbour 2 (2)
(2) (2) 
line 97: inorderTraversal
(2) (2) (7) (9) (9) (9) (10) 
line 98: insert (5)
line 99: inorderTraversal
(2) (2) (5) (7) (9) (9) (9) (10) 
line 100: insert (9)
line 101: inorderTraversal
(2) (2) (5) (7) (9) (9) (9) (9) (10) 
line 102: clear
line 103: buildTree 7
(10) (8) (10) (6) (1) (5) (4) 
line 104: inorderTraversal
(1) (4) (5) (6) (8) (10) (10) 
line 105: nearestNeighbour (2)
(1) 
line 106: inorderTraversal
(1) (4) (5) (6) (8) (10) (10) 
line 107: kNearestNeighbour 8 (7)
(1) (4) (5) (6) (8) (10) (10) 
line 108: inorderTraversal
(1) (4) (5) (6) (8) (10) (10) 
line 109: nearestNeighbour (8)
(8) 
line 110: inorderTraversal
(1) (4) (5) (6) (8) (10) (10) 
line 111: clear
line 112: buildTree 8
(4) (3) (8) (8) (4) (7) (1) (5) 
line 113: inorderTraversal
(1) (3) (4) (4) (5) (7) (8) (8) 
line 114: insert (7)
line 115: inorderTraversal
(1) (3) (4) (4) (5) (7) (7) (8) (8) 
line 116: insert (8)
line 117: inorderTraversal
(1) (3) (4) (4) (5) (7) (7) (8) (8) (8) 
line 118: kNearestNeighbour 10 (1)
(1) (3) (4) (4) (5) (7) (7) (8) (8) (8) 
line 119: inorderTraversal
(1) (3) (4) (4) (5) (7) (7) (8) (8) (8) 
line 120: remove (3)
line 121: inorderTraversal
(1) (4) (4) (5) (7) (7) (8) (8) (8) 
line 122: insert (8)
line 123: inorderTraversal
(1) (4) (4) (5) (7) (7) (8) (8) (8) (8) 
line 124: postorderTraversal
(1) (5) (4) (7) (8) (8) (8) (8) (7) (4) 
line 125: inorderTraversal
(1) (4) (4) (5) (7) (7) (8) (8) (8) (8) 
line 126: kNearestNeighbour 9 (6)
(4) (4) (5) (7) (7) (8) (8) (8) (8) 
line 127: inorderTraversal
(1) (4) (4) (5) (7) (7) (8) (8) (8) (8) 
line 128: kNearestNeighbour 10 (8)
(1) (4) (4) (5) (7) (7) (8) (8) (8) (8) 
line 129: inorderTraversal
(1) (4) (4) (5) (7) (7) (8) (8) (8) (8) 
line 130: kNearestNeighbour 4 (10)
(8) (8) (8) (8) 
line 131: inorderTraversal
(1) (4) (4) (5) (7) (7) (8) (8) (8) (8) 
line 132: remove (3)
line 133: inorderTraversal
(1) (4) (4) (5) (7) (7) (8) (8) (8) (8) 
line 134: kNearestNeighbour 8 (2)
(1) (4) (4) (5) (7) (7) (8) (8) 
line 135: inorderTraversal
(1) (4) (4) (5) (7) (7) (8) (8) (8) (8) 
line 136: insert (2)
line 137: inorderTraversal
(1) (2) (4) (4) (5) (7) (7) (8) (8) (8) (8) 
line 138: nearestNeighbour (5)
(5) 
line 139: inorderTraversal
(1) (2) (4) (4) (5) (7) (7) (8) (8) (8) (8) 
line 140: insert (3)
line 141: inorderTraversal
(1) (2) (3) (4) (4) (5) (7) (7) (8) (8) (8) (8) 
line 142: insert (6)
line 143: inorderTraversal
(1) (2) (3) (4) (4) (5) (6) (7) (7) (8) (8) (8) (8) 
line 144: clear
line 145: buildTree 1
(6) 
line 146: inorderTraversal
(6) 
line 147: insert (3)
line 148: inorderTraversal
(3) (6) 
line 149: clear
line 150: buildTree 6
(1) (9) (5) (1) (5) (10) 
line 151: inorderTraversal
(1) (1) (5) (5) (9) (10) 
line 152: remove (10)
line 153: inorderTraversal
(1) (1) (5) (5) (9) 
line 154: kNearestNeighbour 1 (9)
(9) 
line 155: inorderTraversal
(1) (1) (5) (5) (9) 
line 156: nodeCount_height_leafCount
nodeCount=5;height=3;leafCount=2
line 157: inorderTraversal
(1) (1) (5) (5) (9) 
line 158: kNearestNeighbour 8 (2)
(1) (1) (5) (5) (9) 
line 159: inorderTraversal
(1) (1) (5) (5) (9) 
line 160: search (1)
TRUE
line 161: inorderTraversal
(1) (1) (5) (5) (9) 
line 162: search (10)
FALSE
line 163: inorderTraversal
(1) (1) (5) (5) (9) 
line 164: clear
line 165: buildTree 12
(5) (7) (2) (10) (6) (8) (1) (2) (7) (10) (9) (1) 
line 166: inorderTraversal
(1) (1) (2) (2) (5) (6) (7) (7) (8) (9) (10) (10) 
line 167: preorderTraversal
(6) (2) (1) (1) (2) (5) (8) (7) (7) (10) (9) (10) 
line 168: inorderTraversal
(1) (1) (2) (2) (5) (6) (7) (7) (8) (9) (10) (10) 
line 169: insert (4)
line 170: inorderTraversal
(1) (1) (2) (2) (4) (5) (6) (7) (7) (8) (9) (10) (10) 
line 171: kNearestNeighbour 5 (1)
(1) (1) (2) (2) (4) 
line 172: inorderTraversal
(1) (1) (2) (2) (4) (5) (6) (7) (7) (8) (9) (10) (10) 
line 173: nearestNeighbour (5)
(5) 
line 174: inorderTraversal
(1) (1) (2) (2) (4) (5) (6) (7) (7) (8) (9) (10) (10) 
line 175: insert (2)
line 176: inorderTraversal
(1) (1) (2) (2) (2) (4) (5) (6) (7) (7) (8) (9) (10) (10) 
line 177: nearestNeighbour (7)
(7) 
line 178: inorderTraversal
(1) (1) (2) (2) (2) (4) (5) (6) (7) (7) (8) (9) (10) (10) 
line 179: nearestNeighbour (1)
(1) 
line 180: inorderTraversal
(1) (1) (2) (2) (2) (4) (5) (6) (7) (7) (8) (9) (10) (10) 
line 181: nearestNeighbour (4)
(4) 
line 182: inorderTraversal
(1) (1) (2) (2) (2) (4) (5) (6) (7) (7) (8) (9) (10) (10) 
line 183: remove (2)
line 184: inorderTraversal
(1) (1) (2) (2) (4) (5) (6) (7) (7) (8) (9) (10) (10) 
line 185: kNearestNeighbour 10 (7)
(2) (4) (5) (6) (7) (7) (8) (9) (10) (10) 
line 186: inorderTraversal
(1) (1) (2) (2) (4) (5) (6) (7) (7) (8) (9) (10) (10) 
line 187: insert (1)
line 188: inorderTraversal
(1) (1) (1) (2) (2) (4) (5) (6) (7) (7) (8) (9) (10) (10) 
line 189: insert (10)
line 190: inorderTraversal
(1) (1) (1) (2) (2) (4) (5) (6) (7) (7) (8) (9) (10) (10) (10) 
line 191: insert (7)
line 192: inorderTraversal
(1) (1) (1) (2) (2) (4) (5) (6) (7) (7) (7) (8) (9) (10) (10) (10) 
line 193: insert (10)
line 194: inorderTraversal
(1) (1) (1) (2) (2) (4) (5) (6) (7) (7) (7) (8) (9) (10) (10) (10) (10) 
line 195: insert (5)
line 196: inorderTraversal
(1) (1) (1) (2) (2) (4) (5) (5) (6) (7) (7) (7) (8) (9) (10) (10) (10) (10) 
line 197: insert (10)
line 198: inorderTraversal
(1) (1) (1) (2) (2) (4) (5) (5) (6) (7) (7) (7) (8) (9) (10) (10) (10) (10) (10) 
line 199: search (2)
TRUE
line 200: inorderTraversal
(1) (1) (1) (2) (2) (4) (5) (5) (6) (7) (7) (7) (8) (9) (10) (10) (10) (10) (10) 
line 201: kNearestNeighbour 7 (8)
(7) (7) (7) (8) (9) (10) (10) 
line 202: inorderTraversal
(1) (1) (1) (2) (2) (4) (5) (5) (6) (7) (7) (7) (8) (9) (10) (10) (10) (10) (10) 
line 203: insert (3)
line 204: inorderTraversal
(1) (1) (1) (2) (2) (3) (4) (5) (5) (6) (7) (7) (7) (8) (9) (10) (10) (10) (10) (10) 
line 205: remove (1)
line 206: inorderTraversal
(1) (1) (2) (2) (3) (4) (5) (5) (6) (7) (7) (7) (8) (9) (10) (10) (10) (10) (10) 
line 207: insert (4)
line 208: inorderTraversal
(1) (1) (2) (2) (3) (4) (4) (5) (5) (6) (7) (7) (7) (8) (9) (10) (10) (10) (10) (10) 
line 209: nearestNeighbour (9)
(9) 
line 210: inorderTraversal
(1) (1) (2) (2) (3) (4) (4) (5) (5) (6) (7) (7) (7) (8) (9) (10) (10) (10) (10) (10) 
line 211: clear
line 212: buildTree 5
(8) (4) (7) (7) (2) 
line 213: inorderTraversal
(2) (4) (7) (7) (8) 
line 214: kNearestNeighbour 10 (10)
(2) (4) (7) (7) (8) 
line 215: inorderTraversal
(2) (4) (7) (7) (8) 
line 216: insert (10)
line 217: inorderTraversal
(2) (4) (7) (7) (8) (10) 
line 218: insert (1)
line 219: inorderTraversal
(1) (2) (4) (7) (7) (8) (10) 
line 220: insert (1)
line 221: inorderTraversal
(1) (1) (2) (4) (7) (7) (8) (10) 
line 222: nearestNeighbour (4)
(4) 
line 223: inorderTraversal
(1) (1) (2) (4) (7) (7) (8) (10) 
line 224: kNearestNeighbour 7 (10)
(1) (2) (4) (7) (7) (8) (10) 
line 225: inorderTraversal
(1) (1) (2) (4) (7) (7) (8) (10) 
line 226: nearestNeighbour (2)
(2) 
line 227: inorderTraversal
(1) (1) (2) (4) (7) (7) (8) (10) 
line 228: nodeCount_height_leafCount
nodeCount=8;height=4;leafCount=3
line 229: inorderTraversal
(1) (1) (2) (4) (7) (7) (8) (10) 
line 230: kNearestNeighbour 8 (2)
(1) (1) (2) (4) (7) (7) (8) (10) 
line 231: inorderTraversal
(1) (1) (2) (4) (7) (7) (8) (10) 
line 232: kNearestNeighbour 3 (1)
(1) (1) (2) 
line 233: inorderTraversal
(1) (1) (2) (4) (7) (7) (8) (10) 
line 234: kNearestNeighbour 1 (6)
(7) 
line 235: inorderTraversal
(1) (1) (2) (4) (7) (7) (8) (10) 
line 236: insert (7)
line 237: inorderTraversal
(1) (1) (2) (4) (7) (7) (7) (8) (10) 
line 238: preorderTraversal
(7) (2) (1) (1) (4) (7) (8) (7) (10) 
line 239: inorderTraversal
(1) (1) (2) (4) (7) (7) (7) (8) (10) 
line 240: insert (10)
line 241: inorderTraversal
(1) (1) (2) (4) (7) (7) (7) (8) (10) (10) 
line 242: kNearestNeighbour 1 (10)
(10) 
line 243: inorderTraversal
(1) (1) (2) (4) (7) (7) (7) (8) (10) (10) 
line 244: nearestNeighbour (2)
(2) 
line 245: inorderTraversal
(1) (1) (2) (4) (7) (7) (7) (8) (10) (10) 
line 246: insert (1)
line 247: inorderTraversal
(1) (1) (1) (2) (4) (7) (7) (7) (8) (10) (10) 
line 248: nearestNeighbour (5)
(4) 
line 249: inorderTraversal
(1) (1) (1) (2) (4) (7) (7) (7) (8) (10) (10) 
line 250: kNearestNeighbour 2 (2)
(1) (2) 
line 251: inorderTraversal
(1) (1) (1) (2) (4) (7) (7) (7) (8) (10) (10) 
line 252: insert (9)
line 253: inorderTraversal
(1) (1) (1) (2) (4) (7) (7) (7) (8) (9) (10) (10) 
line 254: clear
line 255: buildTree 19
(9) (10) (9) (9) (4) (9) (6) (10) (2) (10) (8) (2) (3) (1) (2) (7) (6) (1) (4) 
line 256: inorderTraversal
(1) (1) (2) (2) (2) (3) (4) (4) (6) (6) (7) (8) (9) (9) (9) (9) (10) (10) (10) 
line 257: insert (6)
line 258: inorderTraversal
(1) (1) (2) (2) (2) (3) (4) (4) (6) (6) (6) (7) (8) (9) (9) (9) (9) (10) (10) (10) 
line 259: kNearestNeighbour 8 (9)
(8) (9) (9) (9) (9) (10) (10) (10) 
line 260: inorderTraversal
(1) (1) (2) (2) (2) (3) (4) (4) (6) (6) (6) (7) (8) (9) (9) (9) (9) (10) (10) (10) 
line 261: clear
line 262: buildTree 8
(7) (2) (4) (3) (3) (6) (10) (5) 
line 263: inorderTraversal
(2) (3) (3) (4) (5) (6) (7) (10) 
line 264: kNearestNeighbour 6 (7)
(3) (4) (5) (6) (7) (10) 
line 265: inorderTraversal
(2) (3) (3) (4) (5) (6) (7) (10) 
line 266: insert (7)
line 267: inorderTraversal
(2) (3) (3) (4) (5) (6) (7) (7) (10) 
line 268: insert (6)
line 269: inorderTraversal
(2) (3) (3) (4) (5) (6) (6) (7) (7) (10) 
line 270: insert (5)
line 271: inorderTraversal
(2) (3) (3) (4) (5) (5) (6) (6) (7) (7) (10) 
line 272: nearestNeighbour (7)
(7) 
line 273: inorderTraversal
(2) (3) (3) (4) (5) (5) (6) (6) (7) (7) (10) 
line 274: remove (3)
line 275: inorderTraversal
(2) (3) (4) (5) (5) (6) (6) (7) (7) (10) 
line 276: kNearestNeighbour 2 (3)
(2) (3) 
line 277: inorderTraversal
(2) (3) (4) (5) (5) (6) (6) (7) (7) (10) 
line 278: insert (1)
line 279: inorderTraversal
(1) (2) (3) (4) (5) (5) (6) (6) (7) (7) (10) 
line 280: remove (1)
line 281: inorderTraversal
(2) (3) (4) (5) (5) (6) (6) (7) (7) (10) 
line 282: clear
line 283: buildTree 16
(9) (5) (2) (7) (2) (2) (10) (4) (4) (9) (4) (4) (5) (6) (5) (2) 
line 284: inorderTraversal
(2) (2) (2) (2) (4) (4) (4) (4) (5) (5) (5) (6) (7) (9) (9) (10) 
line 285: insert (3)
line 286: inorderTraversal
(2) (2) (2) (2) (3) (4) (4) (4) (4) (5) (5) (5) (6) (7) (9) (9) (10) 
line 287: clear
line 288: buildTree 15
(8) (2) (4) (8) (7) (8) (6) (9) (1) (6) (5) (4) (2) (2) (8) 
line 289: inorderTraversal
(1) (2) (2) (2) (4) (4) (5) (6) (6) (7) (8) (8) (8) (8) (9) 
line 290: insert (10)
line 291: inorderTraversal
(1) (2) (2) (2) (4) (4) (5) (6) (6) (7) (8) (8) (8) (8) (9) (10) 
line 292: remove (4)
line 293: inorderTraversal
(1) (2) (2) (2) (4) (5) (6) (6) (7) (8) (8) (8) (8) (9) (10) 
line 294: insert (7)
line 295: inorderTraversal
(1) (2) (2) (2) (4) (5) (6) (6) (7) (7) (8) (8) (8) (8) (9) (10) 
line 296: clear
line 297: buildTree 2
(2) (8) 
line 298: inorderTraversal
(2) (8) 
line 299: search (8)
TRUE
line 300: inorderTraversal
(2) (8) 
line 301: remove (2)
line 302: inorderTraversal
(8) 
line 303: insert (4)
line 304: inorderTraversal
(4) (8) 
line 305: kNearestNeighbour 8 (9)
(4) (8) 
line 306: inorderTraversal
(4) (8) 
line 307: kNearestNeighbour 4 (5)
(4) (8) 
line 308: inorderTraversal
(4) (8) 
line 309: remove (2)
line 310: inorderTraversal
(4) (8) 
line 311: insert (8)
line 312: inorderTraversal
(4) (8) (8) 
line 313: insert (4)
line 314: inorderTraversal
(4) (4) (8) (8) 
line 315: remove (4)
line 316: inorderTraversal
(4) (8) (8) 
line 317: kNearestNeighbour 4 (9)
(4) (8) (8) 
line 318: inorderTraversal
(4) (8) (8) 
line 319: kNearestNeighbour 7 (8)
(4) (8) (8) 
line 320: inorderTraversal
(4) (8) (8) 
line 321: insert (6)
line 322: inorderTraversal
(4) (6) (8) (8) 
line 323: nearestNeighbour (1)
(4) 
line 324: inorderTraversal
(4) (6) (8) (8) 
line 325: remove (4)
line 326: inorderTraversal
(6) (8) (8) 
line 327: kNearestNeighbour 7 (8)
(6) (8) (8) 
line 328: inorderTraversal
(6) (8) (8) 
line 329: kNearestNeighbour 8 (8)
(6) (8) (8) 
line 330: inorderTraversal
(6) (8) (8) 
line 331: postorderTraversal
(6) (8) (8) 
line 332: inorderTraversal
(6) (8) (8) 
line 333: insert (1)
line 334: inorderTraversal
(1) (6) (8) (8) 
line 335: search (6)
TRUE
line 336: inorderTraversal
(1) (6) (8) (8) 
line 337: insert (3)
line 338: inorderTraversal
(1) (3) (6) (8) (8) 
line 339: clear
line 340: buildTree 2
(10) (7) 
line 341: inorderTraversal
(7) (10) 
line 342: kNearestNeighbour 7 (5)
(7) (10) 
line 343: inorderTraversal
(7) (10) 
line 344: clear
line 345: buildTree 3
(4) (2) (6) 
line 346: inorderTraversal
(2) (4) (6) 
line 347: insert (2)
line 348: inorderTraversal
(2) (2) (4) (6) 
line 349: nodeCount_height_leafCount
nodeCount=4;height=3;leafCount=2
line 350: inorderTraversal
(2) (2) (4) (6) 
line 351: remove (5)
line 352: inorderTraversal
(2) (2) (4) (6) 
line 353: remove (2)
line 354: inorderTraversal
(2) (4) (6) 
line 355: insert (5)
line 356: inorderTraversal
(2) (4) (5) (6) 
line 357: search (6)
TRUE
line 358: inorderTraversal
(2) (4) (5) (6) 
line 359: insert (3)
line 360: inorderTraversal
(2) (3) (4) (5) (6) 
line 361: postorderTraversal
(3) (2) (5) (6) (4) 
line 362: inorderTraversal
(2) (3) (4) (5) (6) 
line 363: nearestNeighbour (7)
(6) 
line 364: inorderTraversal
(2) (3) (4) (5) (6) 
line 365: kNearestNeighbour 8 (3)
(2) (3) (4) (5) (6) 
line 366: inorderTraversal
(2) (3) (4) (5) (6) 
line 367: kNearestNeighbour 10 (7)
(2) (3) (4) (5) (6) 
line 368: inorderTraversal
(2) (3) (4) (5) (6) 
line 369: insert (6)
line 370: inorderTraversal
(2) (3) (4) (5) (6) (6) 
line 371: insert (10)
line 372: inorderTraversal
(2) (3) (4) (5) (6) (6) (10) 
line 373: clear
line 374: buildTree 11
(1) (3) (5) (2) (10) (9) (1) (4) (3) (2) (7) 
line 375: inorderTraversal
(1) (1) (2) (2) (3) (3) (4) (5) (7) (9) (10) 
line 376: remove (1)
line 377: inorderTraversal
(1) (2) (2) (3) (3) (4) (5) (7) (9) (10) 
line 378: nearestNeighbour (5)
(5) 
line 379: inorderTraversal
(1) (2) (2) (3) (3) (4) (5) (7) (9) (10) 
line 380: nearestNeighbour (2)
(2) 
line 381: inorderTraversal
(1) (2) (2) (3) (3) (4) (5) (7) (9) (10) 
line 382: kNearestNeighbour 4 (4)
(3) (3) (4) (5) 
line 383: inorderTraversal
(1) (2) (2) (3) (3) (4) (5) (7) (9) (10) 
line 384: nearestNeighbour (5)
(5) 
line 385: inorderTraversal
(1) (2) (2) (3) (3) (4) (5) (7) (9) (10) 
line 386: insert (8)
line 387: inorderTraversal
(1) (2) (2) (3) (3) (4) (5) (7) (8) (9) (10) 
line 388: clear
line 389: buildTree 16
(7) (7) (8) (4) (6) (6) (6) (5) (2) (2) (10) (1) (8) (7) (2) (7) 
line 390: inorderTraversal
(1) (2) (2) (2) (4) (5) (6) (6) (6) (7) (7) (7) (7) (8) (8) (10) 
line 391: insert (3)
line 392: inorderTraversal
(1) (2) (2) (2) (3) (4) (5) (6) (6) (6) (7) (7) (7) (7) (8) (8) (10) 
line 393: insert (8)
line 394: inorderTraversal
(1) (2) (2) (2) (3) (4) (5) (6) (6) (6) (7) (7) (7) (7) (8) (8) (8) (10) 
line 395: remove (10)
line 396: inorderTraversal
(1) (2) (2) (2) (3) (4) (5) (6) (6) (6) (7) (7) (7) (7) (8) (8) (8) 
line 397: nearestNeighbour (8)
(8) 
line 398: inorderTraversal
(1) (2) (2) (2) (3) (4) (5) (6) (6) (6) (7) (7) (7) (7) (8) (8) (8) 
line 399: insert (6)
line 400: inorderTraversal
(1) (2) (2) (2) (3) (4) (5) (6) (6) (6) (6) (7) (7) (7) (7) (8) (8) (8) 
line 401: clear
line 402: buildTree 19
(4) (4) (7) (7) (2) (1) (4) (4) (6) (9) (8) (6) (4) (2) (6) (9) (2) (6) (5) 
line 403: inorderTraversal
(1) (2) (2) (2) (4) (4) (4) (4) (4) (5) (6) (6) (6) (6) (7) (7) (8) (9) (9) 
line 404: insert (10)
line 405: inorderTraversal
(1) (2) (2) (2) (4) (4) (4) (4) (4) (5) (6) (6) (6) (6) (7) (7) (8) (9) (9) (10) 
line 406: kNearestNeighbour 2 (9)
(9) (9) 
line 407: inorderTraversal
(1) (2) (2) (2) (4) (4) (4) (4) (4) (5) (6) (6) (6) (6) (7) (7) (8) (9) (9) (10) 
line 408: preorderTraversal
(5) (4) (2) (1) (2) (2) (4) (4) (4) (4) (7) (6) (6) (6) (6) (8) (7) (9) (9) (10) 
line 409: inorderTraversal
(1) (2) (2) (2) (4) (4) (4) (4) (4) (5) (6) (6) (6) (6) (7) (7) (8) (9) (9) (10) 
line 410: kNearestNeighbour 10 (10)
(6) (6) (6) (6) (7) (7) (8) (9) (9) (10) 
line 411: inorderTraversal
(1) (2) (2) (2) (4) (4) (4) (4) (4) (5) (6) (6) (6) (6) (7) (7) (8) (9) (9) (10) 
line 412: insert (10)
line 413: inorderTraversal
(1) (2) (2) (2) (4) (4) (4) (4) (4) (5) (6) (6) (6) (6) (7) (7) (8) (9) (9) (10) (10) 
line 414: insert (8)
line 415: inorderTraversal
(1) (2) (2) (2) (4) (4) (4) (4) (4) (5) (6) (6) (6) (6) (7) (7) (8) (8) (9) (9) (10) (10) 
line 416: nearestNeighbour (5)
(5) 
line 417: inorderTraversal
(1) (2) (2) (2) (4) (4) (4) (4) (4) (5) (6) (6) (6) (6) (7) (7) (8) (8) (9) (9) (10) (10) 
line 418: clear
line 419: buildTree 5
(7) (10) (1) (4) (7) 
line 420: inorderTraversal
(1) (4) (7) (7) (10) 
line 421: search (7)
TRUE
line 422: inorderTraversal
(1) (4) (7) (7) (10) 
line 423: nodeCount_height_leafCount
nodeCount=5;height=3;leafCount=2
line 424: inorderTraversal
(1) (4) (7) (7) (10) 
line 425: preorderTraversal
(7) (1) (4) (7) (10) 
line 426: postorderTraversal
(4) (1) (10) (7) (7) 
line 427: clear
