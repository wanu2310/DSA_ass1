line 1: k=1
line 2: remove (3)
line 3: inorderTraversal

line 4: insert (9)
line 5: inorderTraversal
(9) 
line 6: remove (3)
line 7: inorderTraversal
(9) 
line 8: insert (2)
line 9: inorderTraversal
(2) (9) 
line 10: kNearestNeighbour 1 (6)
(9) 
line 11: inorderTraversal
(2) (9) 
line 12: insert (7)
line 13: inorderTraversal
(2) (7) (9) 
line 14: clear
line 15: buildTree 13
(6) (2) (1) (7) (3) (9) (7) (9) (6) (7) (3) (5) (7) 
line 16: inorderTraversal
(1) (2) (3) (3) (5) (6) (6) (7) (7) (7) (7) (9) (9) 
line 17: kNearestNeighbour 2 (9)
(9) (9) 
line 18: inorderTraversal
(1) (2) (3) (3) (5) (6) (6) (7) (7) (7) (7) (9) (9) 
line 19: insert (1)
line 20: inorderTraversal
(1) (1) (2) (3) (3) (5) (6) (6) (7) (7) (7) (7) (9) (9) 
line 21: kNearestNeighbour 7 (10)
(6) (7) (7) (7) (7) (9) (9) 
line 22: inorderTraversal
(1) (1) (2) (3) (3) (5) (6) (6) (7) (7) (7) (7) (9) (9) 
line 23: insert (8)
line 24: inorderTraversal
(1) (1) (2) (3) (3) (5) (6) (6) (7) (7) (7) (7) (8) (9) (9) 
line 25: insert (8)
line 26: inorderTraversal
(1) (1) (2) (3) (3) (5) (6) (6) (7) (7) (7) (7) (8) (8) (9) (9) 
line 27: insert (5)
line 28: inorderTraversal
(1) (1) (2) (3) (3) (5) (5) (6) (6) (7) (7) (7) (7) (8) (8) (9) (9) 
line 29: kNearestNeighbour 2 (6)
(6) (6) 
line 30: inorderTraversal
(1) (1) (2) (3) (3) (5) (5) (6) (6) (7) (7) (7) (7) (8) (8) (9) (9) 
line 31: nearestNeighbour (10)
(9) 
line 32: inorderTraversal
(1) (1) (2) (3) (3) (5) (5) (6) (6) (7) (7) (7) (7) (8) (8) (9) (9) 
line 33: insert (5)
line 34: inorderTraversal
(1) (1) (2) (3) (3) (5) (5) (5) (6) (6) (7) (7) (7) (7) (8) (8) (9) (9) 
line 35: nearestNeighbour (1)
(1) 
line 36: inorderTraversal
(1) (1) (2) (3) (3) (5) (5) (5) (6) (6) (7) (7) (7) (7) (8) (8) (9) (9) 
line 37: remove (7)
line 38: inorderTraversal
(1) (1) (2) (3) (3) (5) (5) (5) (6) (6) (7) (7) (7) (8) (8) (9) (9) 
line 39: kNearestNeighbour 10 (6)
(5) (5) (5) (6) (6) (7) (7) (7) (8) (8) 
line 40: inorderTraversal
(1) (1) (2) (3) (3) (5) (5) (5) (6) (6) (7) (7) (7) (8) (8) (9) (9) 
line 41: insert (1)
line 42: inorderTraversal
(1) (1) (1) (2) (3) (3) (5) (5) (5) (6) (6) (7) (7) (7) (8) (8) (9) (9) 
line 43: clear
line 44: buildTree 12
(2) (6) (9) (5) (1) (5) (2) (9) (5) (8) (9) (10) 
line 45: inorderTraversal
(1) (2) (2) (5) (5) (5) (6) (8) (9) (9) (9) (10) 
line 46: insert (7)
line 47: inorderTraversal
(1) (2) (2) (5) (5) (5) (6) (7) (8) (9) (9) (9) (10) 
line 48: nearestNeighbour (3)
(2) 
line 49: inorderTraversal
(1) (2) (2) (5) (5) (5) (6) (7) (8) (9) (9) (9) (10) 
line 50: insert (4)
line 51: inorderTraversal
(1) (2) (2) (4) (5) (5) (5) (6) (7) (8) (9) (9) (9) (10) 
line 52: remove (9)
line 53: inorderTraversal
(1) (2) (2) (4) (5) (5) (5) (6) (7) (8) (9) (9) (10) 
line 54: clear
line 55: buildTree 2
(9) (2) 
line 56: inorderTraversal
(2) (9) 
line 57: insert (7)
line 58: inorderTraversal
(2) (7) (9) 
line 59: remove (2)
line 60: inorderTraversal
(7) (9) 
line 61: kNearestNeighbour 7 (2)
(7) (9) 
line 62: inorderTraversal
(7) (9) 
line 63: search (2)
FALSE
line 64: inorderTraversal
(7) (9) 
line 65: insert (5)
line 66: inorderTraversal
(5) (7) (9) 
line 67: search (7)
TRUE
line 68: inorderTraversal
(5) (7) (9) 
line 69: nearestNeighbour (10)
(9) 
line 70: inorderTraversal
(5) (7) (9) 
line 71: nearestNeighbour (7)
(7) 
line 72: inorderTraversal
(5) (7) (9) 
line 73: insert (10)
line 74: inorderTraversal
(5) (7) (9) (10) 
line 75: insert (2)
line 76: inorderTraversal
(2) (5) (7) (9) (10) 
line 77: kNearestNeighbour 8 (5)
(2) (5) (7) (9) (10) 
line 78: inorderTraversal
(2) (5) (7) (9) (10) 
line 79: insert (5)
line 80: inorderTraversal
(2) (5) (5) (7) (9) (10) 
line 81: insert (8)
line 82: inorderTraversal
(2) (5) (5) (7) (8) (9) (10) 
line 83: clear
line 84: buildTree 10
(6) (8) (10) (7) (8) (8) (6) (9) (8) (2) 
line 85: inorderTraversal
(2) (6) (6) (7) (8) (8) (8) (8) (9) (10) 
line 86: insert (2)
line 87: inorderTraversal
(2) (2) (6) (6) (7) (8) (8) (8) (8) (9) (10) 
line 88: insert (2)
line 89: inorderTraversal
(2) (2) (2) (6) (6) (7) (8) (8) (8) (8) (9) (10) 
line 90: remove (8)
line 91: inorderTraversal
(2) (2) (2) (6) (6) (7) (8) (8) (8) (9) (10) 
line 92: insert (8)
line 93: inorderTraversal
(2) (2) (2) (6) (6) (7) (8) (8) (8) (8) (9) (10) 
line 94: kNearestNeighbour 1 (7)
(7) 
line 95: inorderTraversal
(2) (2) (2) (6) (6) (7) (8) (8) (8) (8) (9) (10) 
line 96: kNearestNeighbour 4 (7)
(6) (6) (7) (8) 
line 97: inorderTraversal
(2) (2) (2) (6) (6) (7) (8) (8) (8) (8) (9) (10) 
line 98: nearestNeighbour (1)
(2) 
line 99: inorderTraversal
(2) (2) (2) (6) (6) (7) (8) (8) (8) (8) (9) (10) 
line 100: kNearestNeighbour 7 (5)
(2) (2) (2) (6) (6) (7) (8) 
line 101: inorderTraversal
(2) (2) (2) (6) (6) (7) (8) (8) (8) (8) (9) (10) 
line 102: insert (3)
line 103: inorderTraversal
(2) (2) (2) (3) (6) (6) (7) (8) (8) (8) (8) (9) (10) 
line 104: kNearestNeighbour 4 (4)
(2) (2) (2) (3) 
line 105: inorderTraversal
(2) (2) (2) (3) (6) (6) (7) (8) (8) (8) (8) (9) (10) 
line 106: clear
line 107: buildTree 1
(3) 
line 108: inorderTraversal
(3) 
line 109: kNearestNeighbour 10 (5)
(3) 
line 110: inorderTraversal
(3) 
line 111: insert (8)
line 112: inorderTraversal
(3) (8) 
line 113: insert (5)
line 114: inorderTraversal
(3) (5) (8) 
line 115: insert (5)
line 116: inorderTraversal
(3) (5) (5) (8) 
line 117: postorderTraversal
(5) (5) (8) (3) 
line 118: inorderTraversal
(3) (5) (5) (8) 
line 119: insert (10)
line 120: inorderTraversal
(3) (5) (5) (8) (10) 
line 121: insert (1)
line 122: inorderTraversal
(1) (3) (5) (5) (8) (10) 
line 123: remove (8)
line 124: inorderTraversal
(1) (3) (5) (5) (10) 
line 125: kNearestNeighbour 8 (9)
(1) (3) (5) (5) (10) 
line 126: inorderTraversal
(1) (3) (5) (5) (10) 
line 127: insert (9)
line 128: inorderTraversal
(1) (3) (5) (5) (9) (10) 
line 129: insert (5)
line 130: inorderTraversal
(1) (3) (5) (5) (5) (9) (10) 
line 131: insert (3)
line 132: inorderTraversal
(1) (3) (3) (5) (5) (5) (9) (10) 
line 133: insert (8)
line 134: inorderTraversal
(1) (3) (3) (5) (5) (5) (8) (9) (10) 
line 135: kNearestNeighbour 2 (10)
(9) (10) 
line 136: inorderTraversal
(1) (3) (3) (5) (5) (5) (8) (9) (10) 
line 137: kNearestNeighbour 9 (1)
(1) (3) (3) (5) (5) (5) (8) (9) (10) 
line 138: inorderTraversal
(1) (3) (3) (5) (5) (5) (8) (9) (10) 
line 139: insert (7)
line 140: inorderTraversal
(1) (3) (3) (5) (5) (5) (7) (8) (9) (10) 
line 141: insert (9)
line 142: inorderTraversal
(1) (3) (3) (5) (5) (5) (7) (8) (9) (9) (10) 
line 143: kNearestNeighbour 3 (6)
(5) (5) (7) 
line 144: inorderTraversal
(1) (3) (3) (5) (5) (5) (7) (8) (9) (9) (10) 
line 145: insert (5)
line 146: inorderTraversal
(1) (3) (3) (5) (5) (5) (5) (7) (8) (9) (9) (10) 
line 147: nearestNeighbour (6)
(5) 
line 148: inorderTraversal
(1) (3) (3) (5) (5) (5) (5) (7) (8) (9) (9) (10) 
line 149: kNearestNeighbour 8 (2)
(1) (3) (3) (5) (5) (5) (5) (7) 
line 150: inorderTraversal
(1) (3) (3) (5) (5) (5) (5) (7) (8) (9) (9) (10) 
line 151: kNearestNeighbour 7 (10)
(5) (5) (7) (8) (9) (9) (10) 
line 152: inorderTraversal
(1) (3) (3) (5) (5) (5) (5) (7) (8) (9) (9) (10) 
line 153: insert (2)
line 154: inorderTraversal
(1) (2) (3) (3) (5) (5) (5) (5) (7) (8) (9) (9) (10) 
line 155: insert (1)
line 156: inorderTraversal
(1) (1) (2) (3) (3) (5) (5) (5) (5) (7) (8) (9) (9) (10) 
line 157: insert (6)
line 158: inorderTraversal
(1) (1) (2) (3) (3) (5) (5) (5) (5) (6) (7) (8) (9) (9) (10) 
line 159: insert (8)
line 160: inorderTraversal
(1) (1) (2) (3) (3) (5) (5) (5) (5) (6) (7) (8) (8) (9) (9) (10) 
line 161: clear
line 162: buildTree 19
(6) (3) (2) (1) (7) (9) (7) (2) (8) (4) (1) (10) (3) (9) (8) (5) (4) (3) (9) 
line 163: inorderTraversal
(1) (1) (2) (2) (3) (3) (3) (4) (4) (5) (6) (7) (7) (8) (8) (9) (9) (9) (10) 
line 164: nearestNeighbour (10)
(10) 
line 165: inorderTraversal
(1) (1) (2) (2) (3) (3) (3) (4) (4) (5) (6) (7) (7) (8) (8) (9) (9) (9) (10) 
line 166: nearestNeighbour (6)
(6) 
line 167: inorderTraversal
(1) (1) (2) (2) (3) (3) (3) (4) (4) (5) (6) (7) (7) (8) (8) (9) (9) (9) (10) 
line 168: nearestNeighbour (8)
(8) 
line 169: inorderTraversal
(1) (1) (2) (2) (3) (3) (3) (4) (4) (5) (6) (7) (7) (8) (8) (9) (9) (9) (10) 
line 170: nearestNeighbour (8)
(8) 
line 171: inorderTraversal
(1) (1) (2) (2) (3) (3) (3) (4) (4) (5) (6) (7) (7) (8) (8) (9) (9) (9) (10) 
line 172: nearestNeighbour (5)
(5) 
line 173: inorderTraversal
(1) (1) (2) (2) (3) (3) (3) (4) (4) (5) (6) (7) (7) (8) (8) (9) (9) (9) (10) 
line 174: nodeCount_height_leafCount
nodeCount=19;height=6;leafCount=8
line 175: inorderTraversal
(1) (1) (2) (2) (3) (3) (3) (4) (4) (5) (6) (7) (7) (8) (8) (9) (9) (9) (10) 
line 176: clear
line 177: buildTree 12
(8) (5) (3) (4) (1) (8) (3) (8) (9) (5) (2) (7) 
line 178: inorderTraversal
(1) (2) (3) (3) (4) (5) (5) (7) (8) (8) (8) (9) 
line 179: kNearestNeighbour 7 (8)
(5) (5) (7) (8) (8) (8) (9) 
line 180: inorderTraversal
(1) (2) (3) (3) (4) (5) (5) (7) (8) (8) (8) (9) 
line 181: nearestNeighbour (4)
(4) 
line 182: inorderTraversal
(1) (2) (3) (3) (4) (5) (5) (7) (8) (8) (8) (9) 
line 183: insert (4)
line 184: inorderTraversal
(1) (2) (3) (3) (4) (4) (5) (5) (7) (8) (8) (8) (9) 
line 185: nearestNeighbour (6)
(7) 
line 186: inorderTraversal
(1) (2) (3) (3) (4) (4) (5) (5) (7) (8) (8) (8) (9) 
line 187: nearestNeighbour (9)
(9) 
line 188: inorderTraversal
(1) (2) (3) (3) (4) (4) (5) (5) (7) (8) (8) (8) (9) 
line 189: insert (2)
line 190: inorderTraversal
(1) (2) (2) (3) (3) (4) (4) (5) (5) (7) (8) (8) (8) (9) 
line 191: insert (3)
line 192: inorderTraversal
(1) (2) (2) (3) (3) (3) (4) (4) (5) (5) (7) (8) (8) (8) (9) 
line 193: insert (6)
line 194: inorderTraversal
(1) (2) (2) (3) (3) (3) (4) (4) (5) (5) (6) (7) (8) (8) (8) (9) 
line 195: search (10)
FALSE
line 196: inorderTraversal
(1) (2) (2) (3) (3) (3) (4) (4) (5) (5) (6) (7) (8) (8) (8) (9) 
line 197: kNearestNeighbour 2 (4)
(4) (4) 
line 198: inorderTraversal
(1) (2) (2) (3) (3) (3) (4) (4) (5) (5) (6) (7) (8) (8) (8) (9) 
line 199: insert (7)
line 200: inorderTraversal
(1) (2) (2) (3) (3) (3) (4) (4) (5) (5) (6) (7) (7) (8) (8) (8) (9) 
line 201: insert (10)
line 202: inorderTraversal
(1) (2) (2) (3) (3) (3) (4) (4) (5) (5) (6) (7) (7) (8) (8) (8) (9) (10) 
line 203: search (7)
TRUE
line 204: inorderTraversal
(1) (2) (2) (3) (3) (3) (4) (4) (5) (5) (6) (7) (7) (8) (8) (8) (9) (10) 
line 205: clear
line 206: buildTree 7
(2) (2) (6) (7) (5) (1) (3) 
line 207: inorderTraversal
(1) (2) (2) (3) (5) (6) (7) 
line 208: kNearestNeighbour 6 (3)
(1) (2) (2) (3) (5) (6) 
line 209: inorderTraversal
(1) (2) (2) (3) (5) (6) (7) 
line 210: nearestNeighbour (8)
(7) 
line 211: inorderTraversal
(1) (2) (2) (3) (5) (6) (7) 
line 212: nearestNeighbour (5)
(5) 
line 213: inorderTraversal
(1) (2) (2) (3) (5) (6) (7) 
line 214: kNearestNeighbour 7 (5)
(1) (2) (2) (3) (5) (6) (7) 
line 215: inorderTraversal
(1) (2) (2) (3) (5) (6) (7) 
line 216: insert (4)
line 217: inorderTraversal
(1) (2) (2) (3) (4) (5) (6) (7) 
line 218: kNearestNeighbour 3 (9)
(5) (6) (7) 
line 219: inorderTraversal
(1) (2) (2) (3) (4) (5) (6) (7) 
line 220: clear
line 221: buildTree 10
(6) (7) (1) (8) (4) (9) (7) (3) (5) (9) 
line 222: inorderTraversal
(1) (3) (4) (5) (6) (7) (7) (8) (9) (9) 
line 223: kNearestNeighbour 6 (7)
(6) (7) (7) (8) (9) (9) 
line 224: inorderTraversal
(1) (3) (4) (5) (6) (7) (7) (8) (9) (9) 
line 225: kNearestNeighbour 10 (4)
(1) (3) (4) (5) (6) (7) (7) (8) (9) (9) 
line 226: inorderTraversal
(1) (3) (4) (5) (6) (7) (7) (8) (9) (9) 
line 227: clear
line 228: buildTree 8
(3) (5) (3) (8) (9) (1) (2) (9) 
line 229: inorderTraversal
(1) (2) (3) (3) (5) (8) (9) (9) 
line 230: nodeCount_height_leafCount
nodeCount=8;height=4;leafCount=3
line 231: inorderTraversal
(1) (2) (3) (3) (5) (8) (9) (9) 
line 232: kNearestNeighbour 1 (8)
(8) 
line 233: inorderTraversal
(1) (2) (3) (3) (5) (8) (9) (9) 
line 234: remove (3)
line 235: inorderTraversal
(1) (2) (3) (5) (8) (9) (9) 
line 236: nearestNeighbour (2)
(2) 
line 237: inorderTraversal
(1) (2) (3) (5) (8) (9) (9) 
line 238: clear
line 239: buildTree 12
(7) (9) (5) (6) (1) (6) (10) (4) (4) (7) (7) (8) 
line 240: inorderTraversal
(1) (4) (4) (5) (6) (6) (7) (7) (7) (8) (9) (10) 
line 241: nearestNeighbour (2)
(1) 
line 242: inorderTraversal
(1) (4) (4) (5) (6) (6) (7) (7) (7) (8) (9) (10) 
line 243: nearestNeighbour (2)
(1) 
line 244: inorderTraversal
(1) (4) (4) (5) (6) (6) (7) (7) (7) (8) (9) (10) 
line 245: kNearestNeighbour 6 (10)
(7) (7) (7) (8) (9) (10) 
line 246: inorderTraversal
(1) (4) (4) (5) (6) (6) (7) (7) (7) (8) (9) (10) 
line 247: search (2)
FALSE
line 248: inorderTraversal
(1) (4) (4) (5) (6) (6) (7) (7) (7) (8) (9) (10) 
line 249: remove (4)
line 250: inorderTraversal
(1) (4) (5) (6) (6) (7) (7) (7) (8) (9) (10) 
line 251: insert (10)
line 252: inorderTraversal
(1) (4) (5) (6) (6) (7) (7) (7) (8) (9) (10) (10) 
line 253: clear
line 254: buildTree 1
(9) 
line 255: inorderTraversal
(9) 
line 256: nearestNeighbour (4)
(9) 
line 257: inorderTraversal
(9) 
line 258: insert (2)
line 259: inorderTraversal
(2) (9) 
line 260: insert (1)
line 261: inorderTraversal
(1) (2) (9) 
line 262: remove (3)
line 263: inorderTraversal
(1) (2) (9) 
line 264: clear
line 265: buildTree 14
(1) (10) (5) (4) (6) (1) (9) (9) (9) (10) (8) (10) (2) (3) 
line 266: inorderTraversal
(1) (1) (2) (3) (4) (5) (6) (8) (9) (9) (9) (10) (10) (10) 
line 267: kNearestNeighbour 1 (2)
(2) 
line 268: inorderTraversal
(1) (1) (2) (3) (4) (5) (6) (8) (9) (9) (9) (10) (10) (10) 
line 269: kNearestNeighbour 5 (3)
(1) (2) (3) (4) (5) 
line 270: inorderTraversal
(1) (1) (2) (3) (4) (5) (6) (8) (9) (9) (9) (10) (10) (10) 
line 271: nearestNeighbour (7)
(8) 
line 272: inorderTraversal
(1) (1) (2) (3) (4) (5) (6) (8) (9) (9) (9) (10) (10) (10) 
line 273: insert (4)
line 274: inorderTraversal
(1) (1) (2) (3) (4) (4) (5) (6) (8) (9) (9) (9) (10) (10) (10) 
line 275: remove (9)
line 276: inorderTraversal
(1) (1) (2) (3) (4) (4) (5) (6) (8) (9) (9) (10) (10) (10) 
line 277: kNearestNeighbour 5 (9)
(9) (9) (10) (10) (10) 
line 278: inorderTraversal
(1) (1) (2) (3) (4) (4) (5) (6) (8) (9) (9) (10) (10) (10) 
line 279: insert (4)
line 280: inorderTraversal
(1) (1) (2) (3) (4) (4) (4) (5) (6) (8) (9) (9) (10) (10) (10) 
line 281: search (10)
TRUE
line 282: inorderTraversal
(1) (1) (2) (3) (4) (4) (4) (5) (6) (8) (9) (9) (10) (10) (10) 
line 283: remove (10)
line 284: inorderTraversal
(1) (1) (2) (3) (4) (4) (4) (5) (6) (8) (9) (9) (10) (10) 
line 285: kNearestNeighbour 3 (1)
(1) (1) (2) 
line 286: inorderTraversal
(1) (1) (2) (3) (4) (4) (4) (5) (6) (8) (9) (9) (10) (10) 
line 287: insert (8)
line 288: inorderTraversal
(1) (1) (2) (3) (4) (4) (4) (5) (6) (8) (8) (9) (9) (10) (10) 
line 289: nodeCount_height_leafCount
nodeCount=15;height=6;leafCount=6
line 290: inorderTraversal
(1) (1) (2) (3) (4) (4) (4) (5) (6) (8) (8) (9) (9) (10) (10) 
line 291: insert (4)
line 292: inorderTraversal
(1) (1) (2) (3) (4) (4) (4) (4) (5) (6) (8) (8) (9) (9) (10) (10) 
line 293: remove (5)
line 294: inorderTraversal
(1) (1) (2) (3) (4) (4) (4) (4) (6) (8) (8) (9) (9) (10) (10) 
line 295: nearestNeighbour (10)
(10) 
line 296: inorderTraversal
(1) (1) (2) (3) (4) (4) (4) (4) (6) (8) (8) (9) (9) (10) (10) 
line 297: insert (5)
line 298: inorderTraversal
(1) (1) (2) (3) (4) (4) (4) (4) (5) (6) (8) (8) (9) (9) (10) (10) 
line 299: remove (9)
line 300: inorderTraversal
(1) (1) (2) (3) (4) (4) (4) (4) (5) (6) (8) (8) (9) (10) (10) 
line 301: insert (5)
line 302: inorderTraversal
(1) (1) (2) (3) (4) (4) (4) (4) (5) (5) (6) (8) (8) (9) (10) (10) 
line 303: clear
line 304: buildTree 4
(1) (5) (2) (1) 
line 305: inorderTraversal
(1) (1) (2) (5) 
line 306: insert (4)
line 307: inorderTraversal
(1) (1) (2) (4) (5) 
line 308: clear
line 309: buildTree 13
(9) (9) (5) (9) (4) (3) (7) (4) (5) (10) (2) (1) (8) 
line 310: inorderTraversal
(1) (2) (3) (4) (4) (5) (5) (7) (8) (9) (9) (9) (10) 
line 311: kNearestNeighbour 8 (1)
(1) (2) (3) (4) (4) (5) (5) (7) 
line 312: inorderTraversal
(1) (2) (3) (4) (4) (5) (5) (7) (8) (9) (9) (9) (10) 
line 313: kNearestNeighbour 7 (2)
(1) (2) (3) (4) (4) (5) (5) 
line 314: inorderTraversal
(1) (2) (3) (4) (4) (5) (5) (7) (8) (9) (9) (9) (10) 
line 315: clear
line 316: buildTree 12
(2) (8) (10) (3) (4) (2) (9) (3) (2) (5) (8) (2) 
line 317: inorderTraversal
(2) (2) (2) (2) (3) (3) (4) (5) (8) (8) (9) (10) 
line 318: insert (3)
line 319: inorderTraversal
(2) (2) (2) (2) (3) (3) (3) (4) (5) (8) (8) (9) (10) 
line 320: kNearestNeighbour 4 (6)
(4) (5) (8) (8) 
line 321: inorderTraversal
(2) (2) (2) (2) (3) (3) (3) (4) (5) (8) (8) (9) (10) 
line 322: insert (2)
line 323: inorderTraversal
(2) (2) (2) (2) (2) (3) (3) (3) (4) (5) (8) (8) (9) (10) 
line 324: clear
line 325: buildTree 1
(6) 
line 326: inorderTraversal
(6) 
line 327: insert (9)
line 328: inorderTraversal
(6) (9) 
line 329: nearestNeighbour (4)
(6) 
line 330: inorderTraversal
(6) (9) 
line 331: remove (9)
line 332: inorderTraversal
(6) 
line 333: insert (7)
line 334: inorderTraversal
(6) (7) 
line 335: insert (7)
line 336: inorderTraversal
(6) (7) (7) 
line 337: kNearestNeighbour 6 (3)
(6) (7) (7) 
line 338: inorderTraversal
(6) (7) (7) 
line 339: insert (9)
line 340: inorderTraversal
(6) (7) (7) (9) 
line 341: clear
line 342: buildTree 3
(2) (2) (2) 
line 343: inorderTraversal
(2) (2) (2) 
line 344: clear
line 345: buildTree 18
(10) (8) (10) (4) (9) (7) (2) (9) (7) (6) (2) (6) (10) (3) (5) (1) (10) (4) 
line 346: inorderTraversal
(1) (2) (2) (3) (4) (4) (5) (6) (6) (7) (7) (8) (9) (9) (10) (10) (10) (10) 
line 347: insert (4)
line 348: inorderTraversal
(1) (2) (2) (3) (4) (4) (4) (5) (6) (6) (7) (7) (8) (9) (9) (10) (10) (10) (10) 
line 349: kNearestNeighbour 7 (1)
(1) (2) (2) (3) (4) (4) (4) 
line 350: inorderTraversal
(1) (2) (2) (3) (4) (4) (4) (5) (6) (6) (7) (7) (8) (9) (9) (10) (10) (10) (10) 
line 351: insert (2)
line 352: inorderTraversal
(1) (2) (2) (2) (3) (4) (4) (4) (5) (6) (6) (7) (7) (8) (9) (9) (10) (10) (10) (10) 
line 353: nearestNeighbour (10)
(10) 
line 354: inorderTraversal
(1) (2) (2) (2) (3) (4) (4) (4) (5) (6) (6) (7) (7) (8) (9) (9) (10) (10) (10) (10) 
line 355: insert (1)
line 356: inorderTraversal
(1) (1) (2) (2) (2) (3) (4) (4) (4) (5) (6) (6) (7) (7) (8) (9) (9) (10) (10) (10) (10) 
line 357: insert (6)
line 358: inorderTraversal
(1) (1) (2) (2) (2) (3) (4) (4) (4) (5) (6) (6) (6) (7) (7) (8) (9) (9) (10) (10) (10) (10) 
line 359: kNearestNeighbour 9 (1)
(1) (1) (2) (2) (2) (3) (4) (4) (4) 
line 360: inorderTraversal
(1) (1) (2) (2) (2) (3) (4) (4) (4) (5) (6) (6) (6) (7) (7) (8) (9) (9) (10) (10) (10) (10) 
line 361: insert (10)
line 362: inorderTraversal
(1) (1) (2) (2) (2) (3) (4) (4) (4) (5) (6) (6) (6) (7) (7) (8) (9) (9) (10) (10) (10) (10) (10) 
line 363: clear
line 364: buildTree 5
(4) (4) (10) (10) (1) 
line 365: inorderTraversal
(1) (4) (4) (10) (10) 
line 366: insert (7)
line 367: inorderTraversal
(1) (4) (4) (7) (10) (10) 
line 368: kNearestNeighbour 3 (7)
(4) (7) (10) 
line 369: inorderTraversal
(1) (4) (4) (7) (10) (10) 
line 370: nearestNeighbour (10)
(10) 
line 371: inorderTraversal
(1) (4) (4) (7) (10) (10) 
line 372: clear
line 373: buildTree 3
(7) (1) (8) 
line 374: inorderTraversal
(1) (7) (8) 
line 375: insert (5)
line 376: inorderTraversal
(1) (5) (7) (8) 
line 377: nearestNeighbour (8)
(8) 
line 378: inorderTraversal
(1) (5) (7) (8) 
line 379: search (7)
TRUE
line 380: inorderTraversal
(1) (5) (7) (8) 
line 381: insert (1)
line 382: inorderTraversal
(1) (1) (5) (7) (8) 
line 383: clear
line 384: buildTree 6
(3) (5) (3) (8) (1) (7) 
line 385: inorderTraversal
(1) (3) (3) (5) (7) (8) 
line 386: nearestNeighbour (10)
(8) 
line 387: inorderTraversal
(1) (3) (3) (5) (7) (8) 
line 388: clear
line 389: buildTree 13
(1) (10) (8) (9) (7) (2) (8) (2) (8) (9) (10) (6) (9) 
line 390: inorderTraversal
(1) (2) (2) (6) (7) (8) (8) (8) (9) (9) (9) (10) (10) 
line 391: nearestNeighbour (9)
(9) 
line 392: inorderTraversal
(1) (2) (2) (6) (7) (8) (8) (8) (9) (9) (9) (10) (10) 
line 393: kNearestNeighbour 10 (5)
(1) (2) (2) (6) (7) (8) (8) (8) (9) (9) 
line 394: inorderTraversal
(1) (2) (2) (6) (7) (8) (8) (8) (9) (9) (9) (10) (10) 
line 395: nearestNeighbour (9)
(9) 
line 396: inorderTraversal
(1) (2) (2) (6) (7) (8) (8) (8) (9) (9) (9) (10) (10) 
line 397: clear
line 398: buildTree 13
(6) (3) (7) (3) (5) (5) (5) (3) (9) (10) (10) (1) (5) 
line 399: inorderTraversal
(1) (3) (3) (3) (5) (5) (5) (5) (6) (7) (9) (10) (10) 
line 400: nearestNeighbour (4)
(3) 
line 401: inorderTraversal
(1) (3) (3) (3) (5) (5) (5) (5) (6) (7) (9) (10) (10) 
line 402: insert (5)
line 403: inorderTraversal
(1) (3) (3) (3) (5) (5) (5) (5) (5) (6) (7) (9) (10) (10) 
line 404: nearestNeighbour (4)
(3) 
line 405: inorderTraversal
(1) (3) (3) (3) (5) (5) (5) (5) (5) (6) (7) (9) (10) (10) 
line 406: kNearestNeighbour 7 (5)
(5) (5) (5) (5) (5) (6) (7) 
line 407: inorderTraversal
(1) (3) (3) (3) (5) (5) (5) (5) (5) (6) (7) (9) (10) (10) 
line 408: nearestNeighbour (7)
(7) 
line 409: inorderTraversal
(1) (3) (3) (3) (5) (5) (5) (5) (5) (6) (7) (9) (10) (10) 
line 410: kNearestNeighbour 8 (3)
(1) (3) (3) (3) (5) (5) (5) (5) 
line 411: inorderTraversal
(1) (3) (3) (3) (5) (5) (5) (5) (5) (6) (7) (9) (10) (10) 
line 412: kNearestNeighbour 6 (10)
(5) (6) (7) (9) (10) (10) 
line 413: inorderTraversal
(1) (3) (3) (3) (5) (5) (5) (5) (5) (6) (7) (9) (10) (10) 
line 414: clear
line 415: buildTree 6
(7) (1) (1) (8) (5) (6) 
line 416: inorderTraversal
(1) (1) (5) (6) (7) (8) 
line 417: remove (5)
line 418: inorderTraversal
(1) (1) (6) (7) (8) 
line 419: insert (1)
line 420: inorderTraversal
(1) (1) (1) (6) (7) (8) 
line 421: clear
line 422: buildTree 15
(2) (2) (9) (6) (5) (10) (8) (9) (2) (2) (9) (4) (2) (4) (8) 
line 423: inorderTraversal
(2) (2) (2) (2) (2) (4) (4) (5) (6) (8) (8) (9) (9) (9) (10) 
line 424: kNearestNeighbour 8 (10)
(5) (6) (8) (8) (9) (9) (9) (10) 
line 425: inorderTraversal
(2) (2) (2) (2) (2) (4) (4) (5) (6) (8) (8) (9) (9) (9) (10) 
line 426: insert (1)
line 427: inorderTraversal
(1) (2) (2) (2) (2) (2) (4) (4) (5) (6) (8) (8) (9) (9) (9) (10) 
line 428: nodeCount_height_leafCount
nodeCount=16;height=7;leafCount=6
line 429: inorderTraversal
(1) (2) (2) (2) (2) (2) (4) (4) (5) (6) (8) (8) (9) (9) (9) (10) 
line 430: preorderTraversal
(5) (2) (1) (2) (2) (2) (4) (2) (4) (9) (8) (6) (8) (9) (9) (10) 
line 431: postorderTraversal
(1) (2) (4) (4) (2) (2) (2) (2) (6) (8) (8) (10) (9) (9) (9) (5) 
line 432: clear
