line 1: k=1
line 2: clear
line 3: buildTree 15
(9) (6) (6) (5) (6) (9) (9) (6) (1) (1) (8) (10) (2) (5) (2) 
line 4: inorderTraversal
(1) (1) (2) (2) (5) (5) (6) (6) (6) (6) (8) (9) (9) (9) (10) 
line 5: insert (2)
line 6: inorderTraversal
(1) (1) (2) (2) (2) (5) (5) (6) (6) (6) (6) (8) (9) (9) (9) (10) 
line 7: kNearestNeighbour 3 (9)
(9) (9) (9) 
line 8: inorderTraversal
(1) (1) (2) (2) (2) (5) (5) (6) (6) (6) (6) (8) (9) (9) (9) (10) 
line 9: insert (8)
line 10: inorderTraversal
(1) (1) (2) (2) (2) (5) (5) (6) (6) (6) (6) (8) (8) (9) (9) (9) (10) 
line 11: nearestNeighbour (5)
(5) 
line 12: inorderTraversal
(1) (1) (2) (2) (2) (5) (5) (6) (6) (6) (6) (8) (8) (9) (9) (9) (10) 
line 13: insert (6)
line 14: inorderTraversal
(1) (1) (2) (2) (2) (5) (5) (6) (6) (6) (6) (6) (8) (8) (9) (9) (9) (10) 
line 15: clear
line 16: buildTree 18
(5) (6) (4) (7) (5) (5) (10) (10) (2) (4) (7) (2) (9) (8) (8) (10) (5) (7) 
line 17: inorderTraversal
(2) (2) (4) (4) (5) (5) (5) (5) (6) (7) (7) (7) (8) (8) (9) (10) (10) (10) 
line 18: kNearestNeighbour 10 (4)
(2) (2) (4) (4) (5) (5) (5) (5) (6) (7) 
line 19: inorderTraversal
(2) (2) (4) (4) (5) (5) (5) (5) (6) (7) (7) (7) (8) (8) (9) (10) (10) (10) 
line 20: insert (1)
line 21: inorderTraversal
(1) (2) (2) (4) (4) (5) (5) (5) (5) (6) (7) (7) (7) (8) (8) (9) (10) (10) (10) 
line 22: kNearestNeighbour 1 (9)
(9) 
line 23: inorderTraversal
(1) (2) (2) (4) (4) (5) (5) (5) (5) (6) (7) (7) (7) (8) (8) (9) (10) (10) (10) 
line 24: nearestNeighbour (1)
(1) 
line 25: inorderTraversal
(1) (2) (2) (4) (4) (5) (5) (5) (5) (6) (7) (7) (7) (8) (8) (9) (10) (10) (10) 
line 26: insert (7)
line 27: inorderTraversal
(1) (2) (2) (4) (4) (5) (5) (5) (5) (6) (7) (7) (7) (7) (8) (8) (9) (10) (10) (10) 
line 28: remove (1)
line 29: inorderTraversal
(2) (2) (4) (4) (5) (5) (5) (5) (6) (7) (7) (7) (7) (8) (8) (9) (10) (10) (10) 
line 30: nearestNeighbour (2)
(2) 
line 31: inorderTraversal
(2) (2) (4) (4) (5) (5) (5) (5) (6) (7) (7) (7) (7) (8) (8) (9) (10) (10) (10) 
line 32: clear
line 33: buildTree 6
(5) (1) (8) (1) (3) (2) 
line 34: inorderTraversal
(1) (1) (2) (3) (5) (8) 
line 35: nearestNeighbour (6)
(5) 
line 36: inorderTraversal
(1) (1) (2) (3) (5) (8) 
line 37: insert (5)
line 38: inorderTraversal
(1) (1) (2) (3) (5) (5) (8) 
line 39: nearestNeighbour (10)
(8) 
line 40: inorderTraversal
(1) (1) (2) (3) (5) (5) (8) 
line 41: nearestNeighbour (9)
(8) 
line 42: inorderTraversal
(1) (1) (2) (3) (5) (5) (8) 
line 43: remove (8)
line 44: inorderTraversal
(1) (1) (2) (3) (5) (5) 
line 45: kNearestNeighbour 2 (9)
(5) (5) 
line 46: inorderTraversal
(1) (1) (2) (3) (5) (5) 
line 47: insert (6)
line 48: inorderTraversal
(1) (1) (2) (3) (5) (5) (6) 
line 49: kNearestNeighbour 4 (6)
(3) (5) (5) (6) 
line 50: inorderTraversal
(1) (1) (2) (3) (5) (5) (6) 
line 51: insert (3)
line 52: inorderTraversal
(1) (1) (2) (3) (3) (5) (5) (6) 
line 53: insert (7)
line 54: inorderTraversal
(1) (1) (2) (3) (3) (5) (5) (6) (7) 
line 55: kNearestNeighbour 4 (10)
(5) (5) (6) (7) 
line 56: inorderTraversal
(1) (1) (2) (3) (3) (5) (5) (6) (7) 
line 57: nodeCount_height_leafCount
nodeCount=9;height=5;leafCount=3
line 58: inorderTraversal
(1) (1) (2) (3) (3) (5) (5) (6) (7) 
line 59: insert (3)
line 60: inorderTraversal
(1) (1) (2) (3) (3) (3) (5) (5) (6) (7) 
line 61: insert (9)
line 62: inorderTraversal
(1) (1) (2) (3) (3) (3) (5) (5) (6) (7) (9) 
line 63: postorderTraversal
(1) (1) (3) (3) (3) (9) (7) (6) (5) (5) (2) 
line 64: inorderTraversal
(1) (1) (2) (3) (3) (3) (5) (5) (6) (7) (9) 
line 65: kNearestNeighbour 10 (1)
(1) (1) (2) (3) (3) (3) (5) (5) (6) (7) 
line 66: inorderTraversal
(1) (1) (2) (3) (3) (3) (5) (5) (6) (7) (9) 
line 67: nearestNeighbour (7)
(7) 
line 68: inorderTraversal
(1) (1) (2) (3) (3) (3) (5) (5) (6) (7) (9) 
line 69: nearestNeighbour (8)
(9) 
line 70: inorderTraversal
(1) (1) (2) (3) (3) (3) (5) (5) (6) (7) (9) 
line 71: kNearestNeighbour 5 (1)
(1) (1) (2) (3) (3) 
line 72: inorderTraversal
(1) (1) (2) (3) (3) (3) (5) (5) (6) (7) (9) 
line 73: kNearestNeighbour 5 (1)
(1) (1) (2) (3) (3) 
line 74: inorderTraversal
(1) (1) (2) (3) (3) (3) (5) (5) (6) (7) (9) 
line 75: search (1)
TRUE
line 76: inorderTraversal
(1) (1) (2) (3) (3) (3) (5) (5) (6) (7) (9) 
line 77: kNearestNeighbour 7 (5)
(3) (3) (3) (5) (5) (6) (7) 
line 78: inorderTraversal
(1) (1) (2) (3) (3) (3) (5) (5) (6) (7) (9) 
line 79: nearestNeighbour (2)
(2) 
line 80: inorderTraversal
(1) (1) (2) (3) (3) (3) (5) (5) (6) (7) (9) 
line 81: insert (2)
line 82: inorderTraversal
(1) (1) (2) (2) (3) (3) (3) (5) (5) (6) (7) (9) 
line 83: insert (10)
line 84: inorderTraversal
(1) (1) (2) (2) (3) (3) (3) (5) (5) (6) (7) (9) (10) 
line 85: kNearestNeighbour 5 (2)
(2) (2) (3) (3) (3) 
line 86: inorderTraversal
(1) (1) (2) (2) (3) (3) (3) (5) (5) (6) (7) (9) (10) 
line 87: kNearestNeighbour 9 (3)
(1) (1) (2) (2) (3) (3) (3) (5) (5) 
line 88: inorderTraversal
(1) (1) (2) (2) (3) (3) (3) (5) (5) (6) (7) (9) (10) 
line 89: remove (8)
line 90: inorderTraversal
(1) (1) (2) (2) (3) (3) (3) (5) (5) (6) (7) (9) (10) 
line 91: search (3)
TRUE
line 92: inorderTraversal
(1) (1) (2) (2) (3) (3) (3) (5) (5) (6) (7) (9) (10) 
line 93: remove (3)
line 94: inorderTraversal
(1) (1) (2) (2) (3) (3) (5) (5) (6) (7) (9) (10) 
line 95: nodeCount_height_leafCount
nodeCount=12;height=7;leafCount=4
line 96: inorderTraversal
(1) (1) (2) (2) (3) (3) (5) (5) (6) (7) (9) (10) 
line 97: kNearestNeighbour 9 (4)
(1) (2) (2) (3) (3) (5) (5) (6) (7) 
line 98: inorderTraversal
(1) (1) (2) (2) (3) (3) (5) (5) (6) (7) (9) (10) 
line 99: insert (2)
line 100: inorderTraversal
(1) (1) (2) (2) (2) (3) (3) (5) (5) (6) (7) (9) (10) 
line 101: clear
line 102: buildTree 18
(8) (9) (7) (6) (6) (7) (6) (10) (3) (9) (7) (5) (4) (6) (4) (10) (4) (10) 
line 103: inorderTraversal
(3) (4) (4) (4) (5) (6) (6) (6) (6) (7) (7) (7) (8) (9) (9) (10) (10) (10) 
line 104: nearestNeighbour (4)
(4) 
line 105: inorderTraversal
(3) (4) (4) (4) (5) (6) (6) (6) (6) (7) (7) (7) (8) (9) (9) (10) (10) (10) 
line 106: insert (8)
line 107: inorderTraversal
(3) (4) (4) (4) (5) (6) (6) (6) (6) (7) (7) (7) (8) (8) (9) (9) (10) (10) (10) 
line 108: insert (9)
line 109: inorderTraversal
(3) (4) (4) (4) (5) (6) (6) (6) (6) (7) (7) (7) (8) (8) (9) (9) (9) (10) (10) (10) 
line 110: nearestNeighbour (9)
(9) 
line 111: inorderTraversal
(3) (4) (4) (4) (5) (6) (6) (6) (6) (7) (7) (7) (8) (8) (9) (9) (9) (10) (10) (10) 
line 112: remove (7)
line 113: inorderTraversal
(3) (4) (4) (4) (5) (6) (6) (6) (6) (7) (7) (8) (8) (9) (9) (9) (10) (10) (10) 
line 114: kNearestNeighbour 10 (8)
(7) (7) (8) (8) (9) (9) (9) (10) (10) (10) 
line 115: inorderTraversal
(3) (4) (4) (4) (5) (6) (6) (6) (6) (7) (7) (8) (8) (9) (9) (9) (10) (10) (10) 
line 116: kNearestNeighbour 7 (10)
(8) (9) (9) (9) (10) (10) (10) 
line 117: inorderTraversal
(3) (4) (4) (4) (5) (6) (6) (6) (6) (7) (7) (8) (8) (9) (9) (9) (10) (10) (10) 
line 118: kNearestNeighbour 9 (3)
(3) (4) (4) (4) (5) (6) (6) (6) (6) 
line 119: inorderTraversal
(3) (4) (4) (4) (5) (6) (6) (6) (6) (7) (7) (8) (8) (9) (9) (9) (10) (10) (10) 
line 120: kNearestNeighbour 9 (7)
(6) (6) (6) (6) (7) (7) (8) (8) (9) 
line 121: inorderTraversal
(3) (4) (4) (4) (5) (6) (6) (6) (6) (7) (7) (8) (8) (9) (9) (9) (10) (10) (10) 
line 122: kNearestNeighbour 7 (4)
(3) (4) (4) (4) (5) (6) (6) 
line 123: inorderTraversal
(3) (4) (4) (4) (5) (6) (6) (6) (6) (7) (7) (8) (8) (9) (9) (9) (10) (10) (10) 
line 124: insert (8)
line 125: inorderTraversal
(3) (4) (4) (4) (5) (6) (6) (6) (6) (7) (7) (8) (8) (8) (9) (9) (9) (10) (10) (10) 
line 126: kNearestNeighbour 1 (5)
(5) 
line 127: inorderTraversal
(3) (4) (4) (4) (5) (6) (6) (6) (6) (7) (7) (8) (8) (8) (9) (9) (9) (10) (10) (10) 
line 128: kNearestNeighbour 3 (7)
(7) (7) (8) 
line 129: inorderTraversal
(3) (4) (4) (4) (5) (6) (6) (6) (6) (7) (7) (8) (8) (8) (9) (9) (9) (10) (10) (10) 
line 130: kNearestNeighbour 10 (8)
(7) (7) (8) (8) (8) (9) (9) (9) (10) (10) 
line 131: inorderTraversal
(3) (4) (4) (4) (5) (6) (6) (6) (6) (7) (7) (8) (8) (8) (9) (9) (9) (10) (10) (10) 
line 132: nearestNeighbour (4)
(4) 
line 133: inorderTraversal
(3) (4) (4) (4) (5) (6) (6) (6) (6) (7) (7) (8) (8) (8) (9) (9) (9) (10) (10) (10) 
line 134: remove (6)
line 135: inorderTraversal
(3) (4) (4) (4) (5) (6) (6) (6) (7) (7) (8) (8) (8) (9) (9) (9) (10) (10) (10) 
line 136: clear
line 137: buildTree 1
(1) 
line 138: inorderTraversal
(1) 
line 139: insert (6)
line 140: inorderTraversal
(1) (6) 
line 141: insert (8)
line 142: inorderTraversal
(1) (6) (8) 
line 143: nearestNeighbour (9)
(8) 
line 144: inorderTraversal
(1) (6) (8) 
line 145: nearestNeighbour (8)
(8) 
line 146: inorderTraversal
(1) (6) (8) 
line 147: clear
line 148: buildTree 20
(10) (10) (6) (1) (3) (3) (2) (10) (8) (4) (9) (1) (7) (10) (10) (4) (1) (7) (10) (7) 
line 149: inorderTraversal
(1) (1) (1) (2) (3) (3) (4) (4) (6) (7) (7) (7) (8) (9) (10) (10) (10) (10) (10) (10) 
line 150: insert (8)
line 151: inorderTraversal
(1) (1) (1) (2) (3) (3) (4) (4) (6) (7) (7) (7) (8) (8) (9) (10) (10) (10) (10) (10) (10) 
line 152: insert (3)
line 153: inorderTraversal
(1) (1) (1) (2) (3) (3) (3) (4) (4) (6) (7) (7) (7) (8) (8) (9) (10) (10) (10) (10) (10) (10) 
line 154: insert (7)
line 155: inorderTraversal
(1) (1) (1) (2) (3) (3) (3) (4) (4) (6) (7) (7) (7) (7) (8) (8) (9) (10) (10) (10) (10) (10) (10) 
line 156: insert (3)
line 157: inorderTraversal
(1) (1) (1) (2) (3) (3) (3) (3) (4) (4) (6) (7) (7) (7) (7) (8) (8) (9) (10) (10) (10) (10) (10) (10) 
line 158: nearestNeighbour (4)
(4) 
line 159: inorderTraversal
(1) (1) (1) (2) (3) (3) (3) (3) (4) (4) (6) (7) (7) (7) (7) (8) (8) (9) (10) (10) (10) (10) (10) (10) 
line 160: nearestNeighbour (5)
(6) 
line 161: inorderTraversal
(1) (1) (1) (2) (3) (3) (3) (3) (4) (4) (6) (7) (7) (7) (7) (8) (8) (9) (10) (10) (10) (10) (10) (10) 
line 162: insert (1)
line 163: inorderTraversal
(1) (1) (1) (1) (2) (3) (3) (3) (3) (4) (4) (6) (7) (7) (7) (7) (8) (8) (9) (10) (10) (10) (10) (10) (10) 
line 164: insert (4)
line 165: inorderTraversal
(1) (1) (1) (1) (2) (3) (3) (3) (3) (4) (4) (4) (6) (7) (7) (7) (7) (8) (8) (9) (10) (10) (10) (10) (10) (10) 
line 166: nearestNeighbour (5)
(4) 
line 167: inorderTraversal
(1) (1) (1) (1) (2) (3) (3) (3) (3) (4) (4) (4) (6) (7) (7) (7) (7) (8) (8) (9) (10) (10) (10) (10) (10) (10) 
line 168: kNearestNeighbour 4 (3)
(3) (3) (3) (3) 
line 169: inorderTraversal
(1) (1) (1) (1) (2) (3) (3) (3) (3) (4) (4) (4) (6) (7) (7) (7) (7) (8) (8) (9) (10) (10) (10) (10) (10) (10) 
line 170: nodeCount_height_leafCount
nodeCount=26;height=7;leafCount=6
line 171: inorderTraversal
(1) (1) (1) (1) (2) (3) (3) (3) (3) (4) (4) (4) (6) (7) (7) (7) (7) (8) (8) (9) (10) (10) (10) (10) (10) (10) 
line 172: insert (1)
line 173: inorderTraversal
(1) (1) (1) (1) (1) (2) (3) (3) (3) (3) (4) (4) (4) (6) (7) (7) (7) (7) (8) (8) (9) (10) (10) (10) (10) (10) (10) 
line 174: clear
line 175: buildTree 4
(10) (3) (2) (7) 
line 176: inorderTraversal
(2) (3) (7) (10) 
line 177: kNearestNeighbour 4 (7)
(2) (3) (7) (10) 
line 178: inorderTraversal
(2) (3) (7) (10) 
line 179: kNearestNeighbour 5 (6)
(2) (3) (7) (10) 
line 180: inorderTraversal
(2) (3) (7) (10) 
line 181: insert (1)
line 182: inorderTraversal
(1) (2) (3) (7) (10) 
line 183: kNearestNeighbour 2 (6)
(3) (7) 
line 184: inorderTraversal
(1) (2) (3) (7) (10) 
line 185: remove (2)
line 186: inorderTraversal
(1) (3) (7) (10) 
line 187: nearestNeighbour (4)
(3) 
line 188: inorderTraversal
(1) (3) (7) (10) 
line 189: kNearestNeighbour 10 (8)
(1) (3) (7) (10) 
line 190: inorderTraversal
(1) (3) (7) (10) 
line 191: insert (6)
line 192: inorderTraversal
(1) (3) (6) (7) (10) 
line 193: remove (10)
line 194: inorderTraversal
(1) (3) (6) (7) 
line 195: nearestNeighbour (9)
(7) 
line 196: inorderTraversal
(1) (3) (6) (7) 
line 197: clear
line 198: buildTree 5
(3) (10) (1) (6) (10) 
line 199: inorderTraversal
(1) (3) (6) (10) (10) 
line 200: clear
line 201: buildTree 13
(8) (5) (6) (5) (7) (7) (4) (1) (10) (6) (7) (6) (2) 
line 202: inorderTraversal
(1) (2) (4) (5) (5) (6) (6) (6) (7) (7) (7) (8) (10) 
line 203: nearestNeighbour (9)
(10) 
line 204: inorderTraversal
(1) (2) (4) (5) (5) (6) (6) (6) (7) (7) (7) (8) (10) 
line 205: remove (6)
line 206: inorderTraversal
(1) (2) (4) (5) (5) (6) (6) (7) (7) (7) (8) (10) 
line 207: clear
line 208: buildTree 17
(1) (2) (1) (6) (7) (2) (3) (2) (7) (1) (5) (4) (9) (8) (10) (1) (3) 
line 209: inorderTraversal
(1) (1) (1) (1) (2) (2) (2) (3) (3) (4) (5) (6) (7) (7) (8) (9) (10) 
line 210: insert (2)
line 211: inorderTraversal
(1) (1) (1) (1) (2) (2) (2) (2) (3) (3) (4) (5) (6) (7) (7) (8) (9) (10) 
line 212: insert (5)
line 213: inorderTraversal
(1) (1) (1) (1) (2) (2) (2) (2) (3) (3) (4) (5) (5) (6) (7) (7) (8) (9) (10) 
line 214: nearestNeighbour (8)
(8) 
line 215: inorderTraversal
(1) (1) (1) (1) (2) (2) (2) (2) (3) (3) (4) (5) (5) (6) (7) (7) (8) (9) (10) 
line 216: preorderTraversal
(3) (1) (1) (2) (1) (1) (2) (2) (2) (7) (4) (3) (5) (6) (5) (8) (7) (9) (10) 
line 217: inorderTraversal
(1) (1) (1) (1) (2) (2) (2) (2) (3) (3) (4) (5) (5) (6) (7) (7) (8) (9) (10) 
line 218: nearestNeighbour (10)
(10) 
line 219: inorderTraversal
(1) (1) (1) (1) (2) (2) (2) (2) (3) (3) (4) (5) (5) (6) (7) (7) (8) (9) (10) 
line 220: insert (5)
line 221: inorderTraversal
(1) (1) (1) (1) (2) (2) (2) (2) (3) (3) (4) (5) (5) (5) (6) (7) (7) (8) (9) (10) 
line 222: postorderTraversal
(1) (1) (2) (2) (2) (2) (1) (1) (3) (5) (5) (6) (5) (4) (7) (10) (9) (8) (7) (3) 
line 223: inorderTraversal
(1) (1) (1) (1) (2) (2) (2) (2) (3) (3) (4) (5) (5) (5) (6) (7) (7) (8) (9) (10) 
line 224: insert (7)
line 225: inorderTraversal
(1) (1) (1) (1) (2) (2) (2) (2) (3) (3) (4) (5) (5) (5) (6) (7) (7) (7) (8) (9) (10) 
line 226: search (9)
TRUE
line 227: inorderTraversal
(1) (1) (1) (1) (2) (2) (2) (2) (3) (3) (4) (5) (5) (5) (6) (7) (7) (7) (8) (9) (10) 
line 228: kNearestNeighbour 2 (5)
(5) (5) 
line 229: inorderTraversal
(1) (1) (1) (1) (2) (2) (2) (2) (3) (3) (4) (5) (5) (5) (6) (7) (7) (7) (8) (9) (10) 
line 230: insert (2)
line 231: inorderTraversal
(1) (1) (1) (1) (2) (2) (2) (2) (2) (3) (3) (4) (5) (5) (5) (6) (7) (7) (7) (8) (9) (10) 
line 232: insert (3)
line 233: inorderTraversal
(1) (1) (1) (1) (2) (2) (2) (2) (2) (3) (3) (3) (4) (5) (5) (5) (6) (7) (7) (7) (8) (9) (10) 
line 234: remove (8)
line 235: inorderTraversal
(1) (1) (1) (1) (2) (2) (2) (2) (2) (3) (3) (3) (4) (5) (5) (5) (6) (7) (7) (7) (9) (10) 
line 236: remove (7)
line 237: inorderTraversal
(1) (1) (1) (1) (2) (2) (2) (2) (2) (3) (3) (3) (4) (5) (5) (5) (6) (7) (7) (9) (10) 
line 238: nearestNeighbour (6)
(6) 
line 239: inorderTraversal
(1) (1) (1) (1) (2) (2) (2) (2) (2) (3) (3) (3) (4) (5) (5) (5) (6) (7) (7) (9) (10) 
line 240: remove (8)
line 241: inorderTraversal
(1) (1) (1) (1) (2) (2) (2) (2) (2) (3) (3) (3) (4) (5) (5) (5) (6) (7) (7) (9) (10) 
line 242: insert (6)
line 243: inorderTraversal
(1) (1) (1) (1) (2) (2) (2) (2) (2) (3) (3) (3) (4) (5) (5) (5) (6) (6) (7) (7) (9) (10) 
line 244: insert (1)
line 245: inorderTraversal
(1) (1) (1) (1) (1) (2) (2) (2) (2) (2) (3) (3) (3) (4) (5) (5) (5) (6) (6) (7) (7) (9) (10) 
line 246: insert (1)
line 247: inorderTraversal
(1) (1) (1) (1) (1) (1) (2) (2) (2) (2) (2) (3) (3) (3) (4) (5) (5) (5) (6) (6) (7) (7) (9) (10) 
line 248: nearestNeighbour (7)
(7) 
line 249: inorderTraversal
(1) (1) (1) (1) (1) (1) (2) (2) (2) (2) (2) (3) (3) (3) (4) (5) (5) (5) (6) (6) (7) (7) (9) (10) 
line 250: insert (5)
line 251: inorderTraversal
(1) (1) (1) (1) (1) (1) (2) (2) (2) (2) (2) (3) (3) (3) (4) (5) (5) (5) (5) (6) (6) (7) (7) (9) (10) 
line 252: insert (10)
line 253: inorderTraversal
(1) (1) (1) (1) (1) (1) (2) (2) (2) (2) (2) (3) (3) (3) (4) (5) (5) (5) (5) (6) (6) (7) (7) (9) (10) (10) 
line 254: nearestNeighbour (1)
(1) 
line 255: inorderTraversal
(1) (1) (1) (1) (1) (1) (2) (2) (2) (2) (2) (3) (3) (3) (4) (5) (5) (5) (5) (6) (6) (7) (7) (9) (10) (10) 
line 256: remove (3)
line 257: inorderTraversal
(1) (1) (1) (1) (1) (1) (2) (2) (2) (2) (2) (3) (3) (4) (5) (5) (5) (5) (6) (6) (7) (7) (9) (10) (10) 
line 258: insert (6)
line 259: inorderTraversal
(1) (1) (1) (1) (1) (1) (2) (2) (2) (2) (2) (3) (3) (4) (5) (5) (5) (5) (6) (6) (6) (7) (7) (9) (10) (10) 
line 260: nearestNeighbour (8)
(7) 
line 261: inorderTraversal
(1) (1) (1) (1) (1) (1) (2) (2) (2) (2) (2) (3) (3) (4) (5) (5) (5) (5) (6) (6) (6) (7) (7) (9) (10) (10) 
line 262: insert (9)
line 263: inorderTraversal
(1) (1) (1) (1) (1) (1) (2) (2) (2) (2) (2) (3) (3) (4) (5) (5) (5) (5) (6) (6) (6) (7) (7) (9) (9) (10) (10) 
line 264: clear
line 265: buildTree 18
(3) (1) (10) (9) (2) (6) (7) (7) (8) (8) (9) (4) (8) (10) (3) (7) (6) (5) 
line 266: inorderTraversal
(1) (2) (3) (3) (4) (5) (6) (6) (7) (7) (7) (8) (8) (8) (9) (9) (10) (10) 
line 267: kNearestNeighbour 5 (8)
(8) (8) (8) (9) (9) 
line 268: inorderTraversal
(1) (2) (3) (3) (4) (5) (6) (6) (7) (7) (7) (8) (8) (8) (9) (9) (10) (10) 
line 269: insert (7)
line 270: inorderTraversal
(1) (2) (3) (3) (4) (5) (6) (6) (7) (7) (7) (7) (8) (8) (8) (9) (9) (10) (10) 
line 271: postorderTraversal
(2) (1) (4) (3) (6) (6) (5) (3) (7) (7) (7) (8) (8) (9) (10) (10) (9) (8) (7) 
line 272: inorderTraversal
(1) (2) (3) (3) (4) (5) (6) (6) (7) (7) (7) (7) (8) (8) (8) (9) (9) (10) (10) 
line 273: nearestNeighbour (9)
(9) 
line 274: inorderTraversal
(1) (2) (3) (3) (4) (5) (6) (6) (7) (7) (7) (7) (8) (8) (8) (9) (9) (10) (10) 
line 275: postorderTraversal
(2) (1) (4) (3) (6) (6) (5) (3) (7) (7) (7) (8) (8) (9) (10) (10) (9) (8) (7) 
line 276: inorderTraversal
(1) (2) (3) (3) (4) (5) (6) (6) (7) (7) (7) (7) (8) (8) (8) (9) (9) (10) (10) 
line 277: remove (4)
line 278: inorderTraversal
(1) (2) (3) (3) (5) (6) (6) (7) (7) (7) (7) (8) (8) (8) (9) (9) (10) (10) 
line 279: insert (4)
line 280: inorderTraversal
(1) (2) (3) (3) (4) (5) (6) (6) (7) (7) (7) (7) (8) (8) (8) (9) (9) (10) (10) 
line 281: nearestNeighbour (3)
(3) 
line 282: inorderTraversal
(1) (2) (3) (3) (4) (5) (6) (6) (7) (7) (7) (7) (8) (8) (8) (9) (9) (10) (10) 
line 283: remove (8)
line 284: inorderTraversal
(1) (2) (3) (3) (4) (5) (6) (6) (7) (7) (7) (7) (8) (8) (9) (9) (10) (10) 
line 285: insert (2)
line 286: inorderTraversal
(1) (2) (2) (3) (3) (4) (5) (6) (6) (7) (7) (7) (7) (8) (8) (9) (9) (10) (10) 
line 287: kNearestNeighbour 4 (7)
(7) (7) (7) (7) 
line 288: inorderTraversal
(1) (2) (2) (3) (3) (4) (5) (6) (6) (7) (7) (7) (7) (8) (8) (9) (9) (10) (10) 
line 289: insert (5)
line 290: inorderTraversal
(1) (2) (2) (3) (3) (4) (5) (5) (6) (6) (7) (7) (7) (7) (8) (8) (9) (9) (10) (10) 
line 291: clear
line 292: buildTree 9
(5) (2) (3) (4) (5) (9) (2) (6) (3) 
line 293: inorderTraversal
(2) (2) (3) (3) (4) (5) (5) (6) (9) 
line 294: kNearestNeighbour 6 (2)
(2) (2) (3) (3) (4) (5) 
line 295: inorderTraversal
(2) (2) (3) (3) (4) (5) (5) (6) (9) 
line 296: insert (5)
line 297: inorderTraversal
(2) (2) (3) (3) (4) (5) (5) (5) (6) (9) 
line 298: insert (4)
line 299: inorderTraversal
(2) (2) (3) (3) (4) (4) (5) (5) (5) (6) (9) 
line 300: remove (4)
line 301: inorderTraversal
(2) (2) (3) (3) (4) (5) (5) (5) (6) (9) 
line 302: kNearestNeighbour 10 (9)
(2) (2) (3) (3) (4) (5) (5) (5) (6) (9) 
line 303: inorderTraversal
(2) (2) (3) (3) (4) (5) (5) (5) (6) (9) 
line 304: preorderTraversal
(4) (2) (3) (2) (3) (5) (6) (5) (5) (9) 
line 305: inorderTraversal
(2) (2) (3) (3) (4) (5) (5) (5) (6) (9) 
line 306: postorderTraversal
(2) (3) (3) (2) (5) (5) (9) (6) (5) (4) 
line 307: inorderTraversal
(2) (2) (3) (3) (4) (5) (5) (5) (6) (9) 
line 308: insert (3)
line 309: inorderTraversal
(2) (2) (3) (3) (3) (4) (5) (5) (5) (6) (9) 
line 310: nearestNeighbour (2)
(2) 
line 311: inorderTraversal
(2) (2) (3) (3) (3) (4) (5) (5) (5) (6) (9) 
line 312: remove (5)
line 313: inorderTraversal
(2) (2) (3) (3) (3) (4) (5) (5) (6) (9) 
line 314: insert (7)
line 315: inorderTraversal
(2) (2) (3) (3) (3) (4) (5) (5) (6) (7) (9) 
line 316: search (3)
TRUE
line 317: inorderTraversal
(2) (2) (3) (3) (3) (4) (5) (5) (6) (7) (9) 
line 318: insert (3)
line 319: inorderTraversal
(2) (2) (3) (3) (3) (3) (4) (5) (5) (6) (7) (9) 
line 320: insert (2)
line 321: inorderTraversal
(2) (2) (2) (3) (3) (3) (3) (4) (5) (5) (6) (7) (9) 
line 322: kNearestNeighbour 4 (5)
(4) (5) (5) (6) 
line 323: inorderTraversal
(2) (2) (2) (3) (3) (3) (3) (4) (5) (5) (6) (7) (9) 
line 324: insert (9)
line 325: inorderTraversal
(2) (2) (2) (3) (3) (3) (3) (4) (5) (5) (6) (7) (9) (9) 
line 326: nearestNeighbour (6)
(6) 
line 327: inorderTraversal
(2) (2) (2) (3) (3) (3) (3) (4) (5) (5) (6) (7) (9) (9) 
line 328: nearestNeighbour (5)
(5) 
line 329: inorderTraversal
(2) (2) (2) (3) (3) (3) (3) (4) (5) (5) (6) (7) (9) (9) 
line 330: nearestNeighbour (1)
(2) 
line 331: inorderTraversal
(2) (2) (2) (3) (3) (3) (3) (4) (5) (5) (6) (7) (9) (9) 
line 332: kNearestNeighbour 4 (4)
(3) (4) (5) (5) 
line 333: inorderTraversal
(2) (2) (2) (3) (3) (3) (3) (4) (5) (5) (6) (7) (9) (9) 
line 334: insert (2)
line 335: inorderTraversal
(2) (2) (2) (2) (3) (3) (3) (3) (4) (5) (5) (6) (7) (9) (9) 
line 336: clear
line 337: buildTree 2
(1) (9) 
line 338: inorderTraversal
(1) (9) 
line 339: remove (8)
line 340: inorderTraversal
(1) (9) 
line 341: clear
line 342: buildTree 11
(7) (9) (9) (7) (1) (5) (1) (6) (10) (5) (7) 
line 343: inorderTraversal
(1) (1) (5) (5) (6) (7) (7) (7) (9) (9) (10) 
line 344: insert (8)
line 345: inorderTraversal
(1) (1) (5) (5) (6) (7) (7) (7) (8) (9) (9) (10) 
line 346: search (7)
TRUE
line 347: inorderTraversal
(1) (1) (5) (5) (6) (7) (7) (7) (8) (9) (9) (10) 
line 348: remove (7)
line 349: inorderTraversal
(1) (1) (5) (5) (6) (7) (7) (8) (9) (9) (10) 
line 350: kNearestNeighbour 8 (3)
(1) (1) (5) (5) (6) (7) (7) (8) 
line 351: inorderTraversal
(1) (1) (5) (5) (6) (7) (7) (8) (9) (9) (10) 
line 352: insert (9)
line 353: inorderTraversal
(1) (1) (5) (5) (6) (7) (7) (8) (9) (9) (9) (10) 
line 354: clear
line 355: buildTree 3
(5) (2) (10) 
line 356: inorderTraversal
(2) (5) (10) 
line 357: nearestNeighbour (8)
(10) 
line 358: inorderTraversal
(2) (5) (10) 
line 359: clear
line 360: buildTree 12
(9) (3) (4) (2) (6) (3) (8) (2) (7) (10) (7) (8) 
line 361: inorderTraversal
(2) (2) (3) (3) (4) (6) (7) (7) (8) (8) (9) (10) 
line 362: insert (8)
line 363: inorderTraversal
(2) (2) (3) (3) (4) (6) (7) (7) (8) (8) (8) (9) (10) 
line 364: kNearestNeighbour 5 (6)
(6) (7) (7) (8) (8) 
line 365: inorderTraversal
(2) (2) (3) (3) (4) (6) (7) (7) (8) (8) (8) (9) (10) 
line 366: preorderTraversal
(6) (3) (2) (2) (3) (4) (8) (7) (7) (9) (8) (8) (10) 
line 367: inorderTraversal
(2) (2) (3) (3) (4) (6) (7) (7) (8) (8) (8) (9) (10) 
line 368: insert (3)
line 369: inorderTraversal
(2) (2) (3) (3) (3) (4) (6) (7) (7) (8) (8) (8) (9) (10) 
line 370: nodeCount_height_leafCount
nodeCount=14;height=5;leafCount=5
line 371: inorderTraversal
(2) (2) (3) (3) (3) (4) (6) (7) (7) (8) (8) (8) (9) (10) 
line 372: insert (3)
line 373: inorderTraversal
(2) (2) (3) (3) (3) (3) (4) (6) (7) (7) (8) (8) (8) (9) (10) 
line 374: clear
line 375: buildTree 5
(3) (5) (5) (5) (5) 
line 376: inorderTraversal
(3) (5) (5) (5) (5) 
line 377: search (5)
TRUE
line 378: inorderTraversal
(3) (5) (5) (5) (5) 
line 379: insert (1)
line 380: inorderTraversal
(1) (3) (5) (5) (5) (5) 
line 381: insert (6)
line 382: inorderTraversal
(1) (3) (5) (5) (5) (5) (6) 
line 383: insert (8)
line 384: inorderTraversal
(1) (3) (5) (5) (5) (5) (6) (8) 
line 385: nodeCount_height_leafCount
nodeCount=8;height=6;leafCount=2
line 386: inorderTraversal
(1) (3) (5) (5) (5) (5) (6) (8) 
line 387: nearestNeighbour (4)
(3) 
line 388: inorderTraversal
(1) (3) (5) (5) (5) (5) (6) (8) 
line 389: nearestNeighbour (3)
(3) 
line 390: inorderTraversal
(1) (3) (5) (5) (5) (5) (6) (8) 
line 391: kNearestNeighbour 6 (2)
(1) (3) (5) (5) (5) (5) 
line 392: inorderTraversal
(1) (3) (5) (5) (5) (5) (6) (8) 
line 393: nearestNeighbour (6)
(6) 
line 394: inorderTraversal
(1) (3) (5) (5) (5) (5) (6) (8) 
line 395: nearestNeighbour (3)
(3) 
line 396: inorderTraversal
(1) (3) (5) (5) (5) (5) (6) (8) 
line 397: clear
line 398: buildTree 17
(9) (7) (9) (2) (6) (10) (9) (9) (5) (4) (8) (9) (10) (3) (1) (4) (3) 
line 399: inorderTraversal
(1) (2) (3) (3) (4) (4) (5) (6) (7) (8) (9) (9) (9) (9) (9) (10) (10) 
line 400: insert (4)
line 401: inorderTraversal
(1) (2) (3) (3) (4) (4) (4) (5) (6) (7) (8) (9) (9) (9) (9) (9) (10) (10) 
line 402: kNearestNeighbour 10 (6)
(3) (3) (4) (4) (4) (5) (6) (7) (8) (9) 
line 403: inorderTraversal
(1) (2) (3) (3) (4) (4) (4) (5) (6) (7) (8) (9) (9) (9) (9) (9) (10) (10) 
line 404: insert (8)
line 405: inorderTraversal
(1) (2) (3) (3) (4) (4) (4) (5) (6) (7) (8) (8) (9) (9) (9) (9) (9) (10) (10) 
line 406: kNearestNeighbour 4 (10)
(9) (9) (10) (10) 
line 407: inorderTraversal
(1) (2) (3) (3) (4) (4) (4) (5) (6) (7) (8) (8) (9) (9) (9) (9) (9) (10) (10) 
line 408: search (8)
TRUE
line 409: inorderTraversal
(1) (2) (3) (3) (4) (4) (4) (5) (6) (7) (8) (8) (9) (9) (9) (9) (9) (10) (10) 
line 410: insert (6)
line 411: inorderTraversal
(1) (2) (3) (3) (4) (4) (4) (5) (6) (6) (7) (8) (8) (9) (9) (9) (9) (9) (10) (10) 
line 412: clear
line 413: buildTree 13
(10) (7) (3) (5) (2) (9) (8) (8) (6) (4) (3) (10) (10) 
line 414: inorderTraversal
(2) (3) (3) (4) (5) (6) (7) (8) (8) (9) (10) (10) (10) 
line 415: kNearestNeighbour 9 (4)
(2) (3) (3) (4) (5) (6) (7) (8) (8) 
line 416: inorderTraversal
(2) (3) (3) (4) (5) (6) (7) (8) (8) (9) (10) (10) (10) 
line 417: insert (9)
line 418: inorderTraversal
(2) (3) (3) (4) (5) (6) (7) (8) (8) (9) (9) (10) (10) (10) 
line 419: insert (9)
line 420: inorderTraversal
(2) (3) (3) (4) (5) (6) (7) (8) (8) (9) (9) (9) (10) (10) (10) 
line 421: nodeCount_height_leafCount
nodeCount=15;height=5;leafCount=6
line 422: inorderTraversal
(2) (3) (3) (4) (5) (6) (7) (8) (8) (9) (9) (9) (10) (10) (10) 
line 423: preorderTraversal
(7) (3) (2) (4) (3) (5) (6) (9) (8) (8) (10) (9) (9) (10) (10) 
line 424: postorderTraversal
(2) (3) (6) (5) (4) (3) (8) (8) (9) (9) (10) (10) (10) (9) (7) 
line 425: clear
